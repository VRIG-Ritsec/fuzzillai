std::copy, std::copy_if - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: copy, std:: copy_if From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class InputIt, class OutputIt > OutputIt copy ( InputIt first, InputIt last, OutputIt d_first ) ; (1) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt1, class ForwardIt2 > ForwardIt2 copy ( ExecutionPolicy && policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first ) ; (2) (since C++17) template < class InputIt, class OutputIt, class UnaryPred > OutputIt copy_if ( InputIt first, InputIt last, OutputIt d_first, UnaryPred pred ) ; (3) (since C++11) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class UnaryPred > ForwardIt2 copy_if ( ExecutionPolicy && policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first, UnaryPred pred ) ; (4) (since C++17) Copies the elements in the range, defined by [ first , last ) , to another range beginning at d_first (copy destination range). 1) Copies all elements in the range [ first , last ) starting from first and proceeding to last . If d_first is in [ first , last ) , the behavior is undefined. In this case, std::copy_backward may be used instead. 2) Copies the elements, but executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If [ first , last ) and the copy destination range overlaps, the behavior is undefined. 3) Only copies the elements for which the predicate pred returns true . This copy algorithm is stable: the relative order of the elements that are copied is preserved. If [ first , last ) and the copy destination range overlaps, the behavior is undefined. 4) Same as (3) , but executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) Contents 1 Parameters 2 Return value 3 Complexity 4 Exceptions 5 Possible implementation 6 Notes 7 Example 8 Defect reports 9 See also [ edit ] Parameters first, last - the pair of iterators defining the source range of elements to copy d_first - the beginning of the destination range policy - the execution policy to use pred - unary predicate which returns ​ true for the required elements. The expression pred ( v ) must be convertible to bool for every argument v of type (possibly const) VT , where VT is the value type of InputIt , regardless of value category , and must not modify v . Thus, a parameter type of VT & is not allowed , nor is VT unless for VT a move is equivalent to a copy (since C++11) . ​ Type requirements - InputIt must meet the requirements of LegacyInputIterator . - OutputIt must meet the requirements of LegacyOutputIterator . - ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator . - UnaryPred must meet the requirements of Predicate . [ edit ] Return value Output iterator to the element in the destination range, one past the last element copied. [ edit ] Complexity Given \(\scriptsize N\) N as std:: distance ( first, last ) : 1,2) Exactly \(\scriptsize N\) N assignments. 3,4) Exactly \(\scriptsize N\) N applications of the predicate pred , and at most \(\scriptsize N\) N assignments. For the overloads with an ExecutionPolicy , there may be a performance cost if ForwardIt1 's value type is not MoveConstructible . [ edit ] Exceptions The overloads with a template parameter named ExecutionPolicy report errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Possible implementation copy (1) template < class InputIt, class OutputIt > OutputIt copy ( InputIt first, InputIt last, OutputIt d_first ) { for ( ; first ! = last ; ( void ) ++ first, ( void ) ++ d_first ) * d_first = * first ; return d_first ; } copy_if (3) template < class InputIt, class OutputIt, class UnaryPred > OutputIt copy_if ( InputIt first, InputIt last, OutputIt d_first, UnaryPred pred ) { for ( ; first ! = last ; ++ first ) if ( pred ( * first ) ) { * d_first = * first ; ++ d_first ; } return d_first ; } [ edit ] Notes In practice, implementations of std::copy avoid multiple assignments and use bulk copy functions such as std::memmove if the value type is TriviallyCopyable and the iterator types satisfy LegacyContiguousIterator . When copying overlapping ranges, std::copy is appropriate when copying to the left (beginning of the destination range is outside the source range) while std::copy_backward is appropriate when copying to the right (end of the destination range is outside the source range). [ edit ] Example The following code uses std::copy both to copy the contents of one std::vector to another and to display the resulting std::vector . Run this code #include <algorithm> #include <iostream> #include <iterator> #include <numeric> #include <vector> int main ( ) { std:: vector < int > from_vector ( 10 ) ; std:: iota ( from_vector. begin ( ) , from_vector. end ( ) , 0 ) ; std:: vector < int > to_vector ; std :: copy ( from_vector. begin ( ) , from_vector. end ( ) , std:: back_inserter ( to_vector ) ) ; // or, alternatively, // std::vector<int> to_vector(from_vector.size()); // std::copy(from_vector.begin(), from_vector.end(), to_vector.begin()); // either way is equivalent to // std::vector<int> to_vector = from_vector; std:: cout << "to_vector contains: " ; std :: copy ( to_vector. begin ( ) , to_vector. end ( ) , std:: ostream_iterator < int > ( std:: cout , " " ) ) ; std:: cout << ' \n ' ; std:: cout << "odd numbers in to_vector are: " ; std :: copy_if ( to_vector. begin ( ) , to_vector. end ( ) , std:: ostream_iterator < int > ( std:: cout , " " ) , [ ] ( int x ) { return x % 2 ! = 0 ; } ) ; std:: cout << ' \n ' ; std:: cout << "to_vector contains these multiples of 3: " ; to_vector. clear ( ) ; std :: copy_if ( from_vector. begin ( ) , from_vector. end ( ) , std:: back_inserter ( to_vector ) , [ ] ( int x ) { return x % 3 == 0 ; } ) ; for ( const int x : to_vector ) std:: cout << x << ' ' ; std:: cout << ' \n ' ; } Possible output: to_vector contains: 0 1 2 3 4 5 6 7 8 9 odd numbers in to_vector are: 1 3 5 7 9 to_vector contains these multiples of 3: 0 3 6 9 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2039 C++11 the return value of std::copy_if was not specified specified LWG 2044 C++11 the stability of std::copy_if was not defined defined [ edit ] See also copy_backward copies a range of elements in backwards order (function template) [edit] reverse_copy creates a copy of a range that is reversed (function template) [edit] copy_n (C++11) copies a number of elements to a new location (function template) [edit] fill copy-assigns the given value to every element in a range (function template) [edit] remove_copy remove_copy_if copies a range of elements omitting those that satisfy specific criteria (function template) [edit] ranges::copy ranges::copy_if (C++20) (C++20) copies a range of elements to a new location (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/copy&oldid=180520 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 11 February 2025, at 11:23. Privacy policy About cppreference.com Disclaimers