std::copy_backward - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: copy_backward From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class BidirIt1, class BidirIt2 > BidirIt2 copy_backward ( BidirIt1 first, BidirIt1 last, BidirIt2 d_last ) ; (constexpr since C++20) Copies the elements from the range [ first , last ) to another range ending at d_last . The elements are copied in reverse order (the last element is copied first), but their relative order is preserved. The behavior is undefined if d_last is within ( first , last ] . std::copy must be used instead of std::copy_backward in that case. Contents 1 Parameters 2 Return value 3 Complexity 4 Notes 5 Possible implementation 6 Example 7 Defect reports 8 See also [ edit ] Parameters first, last - the pair of iterators defining the source range of elements to copy from d_last - the end of the destination range Type requirements - BidirIt must meet the requirements of LegacyBidirectionalIterator . [ edit ] Return value Iterator to the last element copied. [ edit ] Complexity Exactly std:: distance ( first, last ) assignments. [ edit ] Notes When copying overlapping ranges, std::copy is appropriate when copying to the left (beginning of the destination range is outside the source range) while std::copy_backward is appropriate when copying to the right (end of the destination range is outside the source range). [ edit ] Possible implementation template < class BidirIt1, class BidirIt2 > BidirIt2 copy_backward ( BidirIt1 first, BidirIt1 last, BidirIt2 d_last ) { while ( first ! = last ) * ( -- d_last ) = * ( -- last ) ; return d_last ; } [ edit ] Example Run this code #include <algorithm> #include <iostream> #include <numeric> #include <vector> int main ( ) { std:: vector < int > source ( 4 ) ; std:: iota ( source. begin ( ) , source. end ( ) , 1 ) ; // fills with 1, 2, 3, 4 std:: vector < int > destination ( 6 ) ; std :: copy_backward ( source. begin ( ) , source. end ( ) , destination. end ( ) ) ; std:: cout << "destination contains: " ; for ( auto i : destination ) std:: cout << i << ' ' ; std:: cout << ' \n ' ; } Output: destination contains: 0 0 1 2 3 4 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 1206 C++98 1. the behavior was well-defined if d_last == last 2. the behavior was undefined if d_last == first 1. made undefined 2. made well-defined [ edit ] See also copy copy_if (C++11) copies a range of elements to a new location (function template) [edit] ranges::copy_backward (C++20) copies a range of elements in backwards order (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/copy_backward&oldid=180519 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 11 February 2025, at 11:22. Privacy policy About cppreference.com Disclaimers