std::fill - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: fill From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> (1) template < class ForwardIt, class T > void fill ( ForwardIt first, ForwardIt last, const T & value ) ; (constexpr since C++20) (until C++26) template < class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > constexpr void fill ( ForwardIt first, ForwardIt last, const T & value ) ; (since C++26) (2) template < class ExecutionPolicy, class ForwardIt, class T > void fill ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, const T & value ) ; (since C++17) (until C++26) template < class ExecutionPolicy, class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > void fill ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, const T & value ) ; (since C++26) 1) Assigns the given value to all elements in the range [ first , last ) . 2) Same as (1) , but executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If value is not writable to first , the program is ill-formed. Contents 1 Parameters 2 Complexity 3 Exceptions 4 Possible implementation 5 Notes 6 Example 7 Defect reports 8 See also [ edit ] Parameters first, last - the pair of iterators defining the range of elements to modify value - the value to be assigned policy - the execution policy to use Type requirements - ForwardIt must meet the requirements of LegacyForwardIterator . [ edit ] Complexity Exactly std:: distance ( first, last ) assignments. [ edit ] Exceptions The overload with a template parameter named ExecutionPolicy reports errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Possible implementation fill (1) template < class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > void fill ( ForwardIt first, ForwardIt last, const T & value ) { for ( ; first ! = last ; ++ first ) * first = value ; } [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for algorithms ( 1,2 ) [ edit ] Example Run this code #include <algorithm> #include <complex> #include <iostream> #include <vector> void println ( const auto & seq ) { for ( const auto & e : seq ) std:: cout << e << ' ' ; std:: cout << ' \n ' ; } int main ( ) { std:: vector < int > v { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; println ( v ) ; // set all of the elements to 8 std :: fill ( v. begin ( ) , v. end ( ) , 8 ) ; println ( v ) ; std:: vector < std:: complex < double >> nums { { 1 , 3 } , { 2 , 2 } , { 4 , 8 } } ; println ( nums ) ; #ifdef __cpp_lib_algorithm_default_value_type std :: fill ( nums. begin ( ) , nums. end ( ) , { 4 , 2 } ) ; #else std :: fill ( nums. begin ( ) , nums. end ( ) , std:: complex < double > { 4 , 2 } ) ; #endif println ( nums ) ; } Output: 0 1 2 3 4 5 6 7 8 8 8 8 8 8 8 8 8 8 (1,3) (2,2) (4,8) (4,2) (4,2) (4,2) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 283 C++98 T was required to be CopyAssignable , but T is not always writable to ForwardIt required to be writable instead [ edit ] See also fill_n copy-assigns the given value to N elements in a range (function template) [edit] copy copy_if (C++11) copies a range of elements to a new location (function template) [edit] generate assigns the results of successive function calls to every element in a range (function template) [edit] transform applies a function to a range of elements, storing results in a destination range (function template) [edit] ranges::fill (C++20) assigns a range of elements a certain value (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/fill&oldid=180623 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 13 February 2025, at 00:25. Privacy policy About cppreference.com Disclaimers