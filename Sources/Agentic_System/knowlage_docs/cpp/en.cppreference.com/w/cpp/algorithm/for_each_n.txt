std::for_each_n - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: for_each_n From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class InputIt, class Size, class UnaryFunc > InputIt for_each_n ( InputIt first, Size n, UnaryFunc f ) ; (1) (since C++17) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt, class Size, class UnaryFunc > ForwardIt for_each_n ( ExecutionPolicy && policy, ForwardIt first, Size n, UnaryFunc f ) ; (2) (since C++17) Applies the given function object f to the result of dereferencing every iterator in the range [ first , first + n ) . If f returns a result, the result is ignored. 1) f is applied in order starting from first . If UnaryFunc is not MoveConstructible , the behavior is undefined. 2) f might not be applied in order. The algorithm is executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If UnaryFunc is not CopyConstructible , the behavior is undefined. If n >= 0 is not true , the behavior is undefined. If the iterator type ( InputIt / ForwardIt ) is mutable, f may modify the elements of the range through the dereferenced iterator. Unlike the rest of the parallel algorithms, for_each_n is not allowed to make copies of the elements in the sequence even if they are TriviallyCopyable . Contents 1 Parameters 2 Return value 3 Complexity 4 Exceptions 5 Possible implementation 6 Example 7 See also [ edit ] Parameters first - the beginning of the range to apply the function to n - the number of elements to apply the function to policy - the execution policy to use f - function object, to be applied to the result of dereferencing every iterator in the range [ first , first + n ) The signature of the function should be equivalent to the following: void fun ( const Type & a ) ; The signature does not need to have const & . The type Type must be such that an object of type InputIt can be dereferenced and then implicitly converted to Type . ​ Type requirements - InputIt must meet the requirements of LegacyInputIterator . - ForwardIt must meet the requirements of LegacyForwardIterator . - Size must be convertible to an integral type. [ edit ] Return value An iterator equal to first + n , or more formally, to std:: advance ( first, n ) . [ edit ] Complexity Exactly n applications of f . [ edit ] Exceptions The overload with a template parameter named ExecutionPolicy reports errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Possible implementation See also the implementation in libstdc++ , libc++ and MSVC stdlib . template < class InputIt, class Size, class UnaryFunc > InputIt for_each_n ( InputIt first, Size n, UnaryFunc f ) { for ( Size i = 0 ; i < n ; ++ first, ( void ) ++ i ) f ( * first ) ; return first ; } [ edit ] Example Run this code #include <algorithm> #include <iostream> #include <vector> void println ( auto const & v ) { for ( auto count { v. size ( ) } ; const auto & e : v ) std:: cout << e << ( -- count ? ", " : " \n " ) ; } int main ( ) { std:: vector < int > vi { 1 , 2 , 3 , 4 , 5 } ; println ( vi ) ; std :: for_each_n ( vi. begin ( ) , 3 , [ ] ( auto & n ) { n * = 2 ; } ) ; println ( vi ) ; } Output: 1, 2, 3, 4, 5 2, 4, 6, 4, 5 [ edit ] See also transform applies a function to a range of elements, storing results in a destination range (function template) [edit] range- for loop (C++11) executes loop over range [edit] for_each applies a unary function object to elements from a range (function template) [edit] ranges::for_each_n (C++20) applies a function object to the first N elements of a sequence (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/for_each_n&oldid=170216 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 18 March 2024, at 19:37. Privacy policy About cppreference.com Disclaimers