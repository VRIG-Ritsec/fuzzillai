std::move_backward - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: move_backward From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class BidirIt1, class BidirIt2 > BidirIt2 move_backward ( BidirIt1 first, BidirIt1 last, BidirIt2 d_last ) ; (since C++11) (constexpr since C++20) Moves the elements from the range [ first , last ) , to another range ending at d_last . The elements are moved in reverse order (the last element is moved first), but their relative order is preserved. If d_last is within ( first , last ] , the behavior is undefined. In this case, std::move may be used instead. Contents 1 Parameters 2 Return value 3 Complexity 4 Possible implementation 5 Notes 6 Example 7 See also [ edit ] Parameters first, last - the pair of iterators defining the source range of elements to move d_last - end of the destination range Type requirements - BidirIt1, BidirIt2 must meet the requirements of LegacyBidirectionalIterator . [ edit ] Return value Iterator in the destination range, pointing at the last element moved. [ edit ] Complexity Exactly std:: distance ( first, last ) move assignments. [ edit ] Possible implementation template < class BidirIt1, class BidirIt2 > BidirIt2 move_backward ( BidirIt1 first, BidirIt1 last, BidirIt2 d_last ) { while ( first ! = last ) * ( -- d_last ) = std :: move ( * ( -- last ) ) ; return d_last ; } [ edit ] Notes When moving overlapping ranges, std::move is appropriate when moving to the left (beginning of the destination range is outside the source range) while std::move_backward is appropriate when moving to the right (end of the destination range is outside the source range). [ edit ] Example Run this code #include <algorithm> #include <iostream> #include <iterator> #include <string> #include <string_view> #include <vector> using container = std:: vector < std:: string > ; void print ( std:: string_view comment, const container & src, const container & dst = { } ) { auto prn = [ ] ( std:: string_view name, const container & cont ) { std:: cout << name ; for ( const auto & s : cont ) std:: cout << ( s. empty ( ) ? "∙" : s. data ( ) ) << ' ' ; std:: cout << ' \n ' ; } ; std:: cout << comment << ' \n ' ; prn ( "src: " , src ) ; if ( dst. empty ( ) ) return ; prn ( "dst: " , dst ) ; } int main ( ) { container src { "foo" , "bar" , "baz" } ; container dst { "qux" , "quux" , "quuz" , "corge" } ; print ( "Non-overlapping case; before move_backward:" , src, dst ) ; std :: move_backward ( src. begin ( ) , src. end ( ) , dst. end ( ) ) ; print ( "After:" , src, dst ) ; src = { "snap" , "crackle" , "pop" , "lock" , "drop" } ; print ( "Overlapping case; before move_backward:" , src ) ; std :: move_backward ( src. begin ( ) , std:: next ( src. begin ( ) , 3 ) , src. end ( ) ) ; print ( "After:" , src ) ; } Output: Non-overlapping case; before move_backward: src: foo bar baz dst: qux quux quuz corge After: src: ∙ ∙ ∙ dst: qux foo bar baz Overlapping case; before move_backward: src: snap crackle pop lock drop After: src: ∙ ∙ snap crackle pop [ edit ] See also move (C++11) moves a range of elements to a new location (function template) [edit] ranges::move_backward (C++20) moves a range of elements to a new location in backwards order (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/move_backward&oldid=180517 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 11 February 2025, at 11:17. Privacy policy About cppreference.com Disclaimers