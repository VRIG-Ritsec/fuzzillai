std::partition_point - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: partition_point From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class ForwardIt, class UnaryPred > ForwardIt partition_point ( ForwardIt first, ForwardIt last, UnaryPred p ) ; (since C++11) (constexpr since C++20) Examines the partitioned range [ first , last ) and locates the end of the first partition, that is, the first element that does not satisfy p or last if all elements satisfy p . If the elements elem of [ first , last ) are not partitioned with respect to the expression bool ( p ( elem ) ) , the behavior is undefined. Contents 1 Parameters 2 Return value 3 Complexity 4 Notes 5 Possible implementation 6 Example 7 See also [ edit ] Parameters first, last - the pair of iterators defining the partitioned range of elements to examine p - unary predicate which returns ​ true for the elements found in the beginning of the range. The expression p ( v ) must be convertible to bool for every argument v of type (possibly const) VT , where VT is the value type of ForwardIt , regardless of value category , and must not modify v . Thus, a parameter type of VT & is not allowed , nor is VT unless for VT a move is equivalent to a copy (since C++11) . ​ Type requirements - ForwardIt must meet the requirements of LegacyForwardIterator . - UnaryPred must meet the requirements of Predicate . [ edit ] Return value The iterator past the end of the first partition within [ first , last ) or last if all elements satisfy p . [ edit ] Complexity Given \(\scriptsize N\) N as std:: distance ( first, last ) , performs \(\scriptsize O(log(N))\) O(log(N)) applications of the predicate p . [ edit ] Notes This algorithm is a more general form of std::lower_bound , which can be expressed in terms of std::partition_point with the predicate [ & ] ( const auto & e ) { return e < value ; } ) ; . [ edit ] Possible implementation template < class ForwardIt, class UnaryPred > constexpr //< since C++20 ForwardIt partition_point ( ForwardIt first, ForwardIt last, UnaryPred p ) { for ( auto length = std:: distance ( first, last ) ; 0 < length ; ) { auto half = length / 2 ; auto middle = std:: next ( first, half ) ; if ( p ( * middle ) ) { first = std:: next ( middle ) ; length - = ( half + 1 ) ; } else length = half ; } return first ; } [ edit ] Example Run this code #include <algorithm> #include <array> #include <iostream> #include <iterator> auto print_seq = [ ] ( auto rem, auto first, auto last ) { for ( std:: cout << rem ; first ! = last ; std:: cout << * first ++ << ' ' ) { } std:: cout << ' \n ' ; } ; int main ( ) { std:: array v { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; auto is_even = [ ] ( int i ) { return i % 2 == 0 ; } ; std:: partition ( v. begin ( ) , v. end ( ) , is_even ) ; print_seq ( "After partitioning, v: " , v. cbegin ( ) , v. cend ( ) ) ; const auto pp = std :: partition_point ( v. cbegin ( ) , v. cend ( ) , is_even ) ; const auto i = std:: distance ( v. cbegin ( ) , pp ) ; std:: cout << "Partition point is at " << i << "; v[" << i << "] = " << * pp << ' \n ' ; print_seq ( "First partition (all even elements): " , v. cbegin ( ) , pp ) ; print_seq ( "Second partition (all odd elements): " , pp, v. cend ( ) ) ; } Possible output: After partitioning, v: 8 2 6 4 5 3 7 1 9 Partition point is at 4; v[4] = 5 First partition (all even elements): 8 2 6 4 Second partition (all odd elements): 5 3 7 1 9 [ edit ] See also find find_if find_if_not (C++11) finds the first element satisfying specific criteria (function template) [edit] is_sorted (C++11) checks whether a range is sorted into ascending order (function template) [edit] lower_bound returns an iterator to the first element not less than the given value (function template) [edit] ranges::partition_point (C++20) locates the partition point of a partitioned range (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/partition_point&oldid=180475 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 11 February 2025, at 05:21. Privacy policy About cppreference.com Disclaimers