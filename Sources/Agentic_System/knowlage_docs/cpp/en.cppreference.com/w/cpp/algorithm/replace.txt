std::replace, std::replace_if - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: replace, std:: replace_if From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> (1) template < class ForwardIt, class T > void replace ( ForwardIt first, ForwardIt last, const T & old_value, const T & new_value ) ; (constexpr since C++20) (until C++26) template < class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > constexpr void replace ( ForwardIt first, ForwardIt last, const T & old_value, const T & new_value ) ; (since C++26) (2) template < class ExecutionPolicy, class ForwardIt, class T > void replace ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, const T & old_value, const T & new_value ) ; (since C++17) (until C++26) template < class ExecutionPolicy, class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > void replace ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, const T & old_value, const T & new_value ) ; (since C++26) (3) template < class ForwardIt, class UnaryPred, class T > void replace_if ( ForwardIt first, ForwardIt last, UnaryPred p, const T & new_value ) ; (constexpr since C++20) (until C++26) template < class ForwardIt, class UnaryPred, class T = typename std:: iterator_traits < ForwardIt > :: value_type > > constexpr void replace_if ( ForwardIt first, ForwardIt last, UnaryPred p, const T & new_value ) ; (since C++26) (4) template < class ExecutionPolicy, class ForwardIt, class UnaryPred, class T > void replace_if ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, UnaryPred p, const T & new_value ) ; (since C++17) (until C++26) template < class ExecutionPolicy, class ForwardIt, class UnaryPred, class T = typename std:: iterator_traits < ForwardIt > :: value_type > > void replace_if ( ExecutionPolicy && policy, ForwardIt first, ForwardIt last, UnaryPred p, const T & new_value ) ; (since C++26) Replaces all elements in the range [ first , last ) with new_value if they satisfy specific criteria. 1) Replaces all elements that are equal to old_value (using operator == ). 3) Replaces all elements for which predicate p returns true . 2,4) Same as (1,3) , but executed according to policy . These overloads participate in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If * first = new_value is invalid (until C++20) new_value is not writable to first (since C++20) , the program is ill-formed. Contents 1 Parameters 2 Complexity 3 Exceptions 4 Notes 5 Possible implementation 6 Example 7 Defect reports 8 See also [ edit ] Parameters first, last - the pair of iterators defining the range of elements to process old_value - the value of elements to replace policy - the execution policy to use p - unary predicate which returns ​ true if the element value should be replaced. The expression p ( v ) must be convertible to bool for every argument v of type (possibly const) VT , where VT is the value type of ForwardIt , regardless of value category , and must not modify v . Thus, a parameter type of VT & is not allowed , nor is VT unless for VT a move is equivalent to a copy (since C++11) . ​ new_value - the value to use as replacement Type requirements - ForwardIt must meet the requirements of LegacyForwardIterator . - UnaryPred must meet the requirements of Predicate . [ edit ] Complexity Given \(\scriptsize N\) N as std:: distance ( first, last ) : 1,2) Exactly \(\scriptsize N\) N comparisons using operator == . 3,4) Exactly \(\scriptsize N\) N applications of the predicate p . [ edit ] Exceptions The overloads with a template parameter named ExecutionPolicy report errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Notes Because the algorithm takes old_value and new_value by reference, it can have unexpected behavior if either is a reference to an element of the range [ first , last ) . Feature-test macro Value Std Feature __cpp_lib_algorithm_default_value_type 202403 (C++26) List-initialization for algorithms ( 1-4 ) [ edit ] Possible implementation replace (1) template < class ForwardIt, class T = typename std:: iterator_traits < ForwardIt > :: value_type > void replace ( ForwardIt first, ForwardIt last, const T & old_value, const T & new_value ) { for ( ; first ! = last ; ++ first ) if ( * first == old_value ) * first = new_value ; } replace_if (3) template < class ForwardIt, class UnaryPred, class T = typename std:: iterator_traits < ForwardIt > :: value_type > void replace_if ( ForwardIt first, ForwardIt last, UnaryPred p, const T & new_value ) { for ( ; first ! = last ; ++ first ) if ( p ( * first ) ) * first = new_value ; } [ edit ] Example Run this code #include <algorithm> #include <array> #include <complex> #include <functional> #include <iostream> void println ( const auto & seq ) { for ( const auto & e : seq ) std:: cout << e << ' ' ; std:: cout << ' \n ' ; } int main ( ) { std:: array < int , 10 > s { 5 , 7 , 4 , 2 , 8 , 6 , 1 , 9 , 0 , 3 } ; // Replace all occurrences of 8 with 88. std :: replace ( s. begin ( ) , s. end ( ) , 8 , 88 ) ; println ( s ) ; // Replace all values less than 5 with 55. std :: replace_if ( s. begin ( ) , s. end ( ) , std:: bind ( std:: less < int > ( ) , std :: placeholders :: _1, 5 ) , 55 ) ; println ( s ) ; std:: array < std:: complex < double > , 2 > nums { { { 1 , 3 } , { 1 , 3 } } } ; #ifdef __cpp_lib_algorithm_default_value_type std :: replace ( nums. begin ( ) , nums. end ( ) , { 1 , 3 } , { 4 , 2 } ) ; #else std :: replace ( nums. begin ( ) , nums. end ( ) , std:: complex < double > { 1 , 3 } , std:: complex < double > { 4 , 2 } ) ; #endif println ( nums ) ; } Output: 5 7 4 2 88 6 1 9 0 3 5 7 55 55 88 6 55 9 55 55 (4,2), (4,2) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 283 C++98 T was required to be CopyAssignable (and EqualityComparable for replace ), but the value type of ForwardIt is not always T and T is not always writable to ForwardIt required * first = new_value to be valid instead [ edit ] See also replace_copy replace_copy_if copies a range, replacing elements satisfying specific criteria with another value (function template) [edit] ranges::replace ranges::replace_if (C++20) (C++20) replaces all values satisfying specific criteria with another value (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/replace&oldid=180620 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 12 February 2025, at 22:40. Privacy policy About cppreference.com Disclaimers