std::reverse_copy - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: reverse_copy From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class BidirIt, class OutputIt > OutputIt reverse_copy ( BidirIt first, BidirIt last, OutputIt d_first ) ; (1) (constexpr since C++20) template < class ExecutionPolicy, class BidirIt, class ForwardIt > ForwardIt reverse_copy ( ExecutionPolicy && policy, BidirIt first, BidirIt last, ForwardIt d_first ) ; (2) (since C++17) 1) Given \(\scriptsize N\) N as std:: distance ( first, last ) . Copies the elements from the range [ first , last ) (source range) to another range of \(\scriptsize N\) N elements beginning at d_first (destination range) in such a way that the elements in the destination range are in reverse order. Behaves as if by executing the assignment * ( d_first + N - 1 - i ) = * ( first + i ) [1] once for each integer i in [ ​ 0 ​ , N ) . If source and destination ranges overlap, the behavior is undefined. 2) Same as (1) , but executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) Contents 1 Parameters 2 Return value 3 Complexity 4 Exceptions 5 Possible implementation 6 Notes 7 Example 8 Defect reports 9 See also [ edit ] Parameters first, last - the pair of iterators defining the source range of elements to copy d_first - the beginning of the destination range Type requirements - BidirIt must meet the requirements of LegacyBidirectionalIterator . - OutputIt must meet the requirements of LegacyOutputIterator . - ForwardIt must meet the requirements of LegacyForwardIterator . [ edit ] Return value Output iterator to the element past the last element copied. [ edit ] Complexity Exactly \(\scriptsize N\) N assignments. [ edit ] Exceptions The overload with a template parameter named ExecutionPolicy reports errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Possible implementation See also the implementations in libstdc++ , libc++ , and MSVC STL . template < class BidirIt, class OutputIt > constexpr // since C++20 OutputIt reverse_copy ( BidirIt first, BidirIt last, OutputIt d_first ) { for ( ; first ! = last ; ++ d_first ) * d_first = * ( -- last ) ; return d_first ; } [ edit ] Notes Implementations (e.g. MSVC STL ) may enable vectorization when the both iterator types satisfy LegacyContiguousIterator and have the same value type, and the value type is TriviallyCopyable . [ edit ] Example Run this code #include <algorithm> #include <iostream> #include <vector> int main ( ) { auto print = [ ] ( const std:: vector < int > & v ) { for ( const auto & value : v ) std:: cout << value << ' ' ; std:: cout << ' \n ' ; } ; std:: vector < int > v { 1 , 2 , 3 } ; print ( v ) ; std:: vector < int > destination ( 3 ) ; std :: reverse_copy ( std:: begin ( v ) , std:: end ( v ) , std:: begin ( destination ) ) ; print ( destination ) ; std :: reverse_copy ( std:: rbegin ( v ) , std:: rend ( v ) , std:: begin ( destination ) ) ; print ( destination ) ; } Output: 1 2 3 3 2 1 1 2 3 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2074 C++98 for each i , the assignment was * ( d_first + N - i ) = * ( first + i ) [1] corrected to * ( d_first + N - 1 - i ) = * ( first + i ) [1] LWG 2150 C++98 only one element was required to be assigned corrected the requirement ↑ 1.0 1.1 1.2 LegacyOutputIterator is not required to support binary + and - . The usages of + and - here are exposition-only: the actual computation does not need to use them. [ edit ] See also reverse reverses the order of elements in a range (function template) [edit] ranges::reverse_copy (C++20) creates a copy of a range that is reversed (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/reverse_copy&oldid=180512 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 11 February 2025, at 11:02. Privacy policy About cppreference.com Disclaimers