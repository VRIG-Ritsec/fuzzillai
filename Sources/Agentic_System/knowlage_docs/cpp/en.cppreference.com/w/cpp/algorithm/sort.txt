std::sort - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: sort From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class RandomIt > void sort ( RandomIt first, RandomIt last ) ; (1) (constexpr since C++20) template < class ExecutionPolicy, class RandomIt > void sort ( ExecutionPolicy && policy, RandomIt first, RandomIt last ) ; (2) (since C++17) template < class RandomIt, class Compare > void sort ( RandomIt first, RandomIt last, Compare comp ) ; (3) (constexpr since C++20) template < class ExecutionPolicy, class RandomIt, class Compare > void sort ( ExecutionPolicy && policy, RandomIt first, RandomIt last, Compare comp ) ; (4) (since C++17) Sorts the elements in the range [ first , last ) in non-descending order. The order of equal elements is not guaranteed to be preserved. 1) Elements are sorted with respect to operator < (until C++20) std:: less { } (since C++20) . 3) Elements are sorted with respect to comp . 2,4) Same as (1,3) , but executed according to policy . These overloads participate in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If any of the following conditions is satisfied, the behavior is undefined: The type of * first is not Swappable . (until C++11) RandomIt is not ValueSwappable . The type of * first is not MoveConstructible . The type of * first is not MoveAssignable . (since C++11) Contents 1 Parameters 2 Complexity 3 Exceptions 4 Possible implementation 5 Notes 6 Example 7 Defect reports 8 See also [ edit ] Parameters first, last - the pair of iterators defining the range of elements to sort policy - the execution policy to use comp - comparison function object (i.e. an object that satisfies the requirements of Compare ) which returns ​ true if the first argument is less than (i.e. is ordered before ) the second. The signature of the comparison function should be equivalent to the following: bool cmp ( const Type1 & a, const Type2 & b ) ; While the signature does not need to have const & , the function must not modify the objects passed to it and must be able to accept all values of type (possibly const) Type1 and Type2 regardless of value category (thus, Type1& is not allowed , nor is Type1 unless for Type1 a move is equivalent to a copy (since C++11) ). The types Type1 and Type2 must be such that an object of type RandomIt can be dereferenced and then implicitly converted to both of them. ​ Type requirements - RandomIt must meet the requirements of LegacyRandomAccessIterator . - Compare must meet the requirements of Compare . [ edit ] Complexity Given \(\scriptsize N\) N as last - first : 1,2) \(\scriptsize O(N \cdot \log(N))\) O(N·log(N)) comparisons using operator < (until C++20) std:: less { } (since C++20) . 3,4) \(\scriptsize O(N \cdot \log(N))\) O(N·log(N)) applications of the comparator comp . [ edit ] Exceptions The overloads with a template parameter named ExecutionPolicy report errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Possible implementation See also the implementations in libstdc++ and libc++ . [ edit ] Notes Before LWG713 , the complexity requirement allowed sort() to be implemented using only Quicksort , which may need \(\scriptsize O(N^2)\) O(N 2 ) comparisons in the worst case. Introsort can handle all cases with \(\scriptsize O(N \cdot \log(N))\) O(N·log(N)) comparisons (without incurring additional overhead in the average case), and thus is usually used for implementing sort() . libc++ has not implemented the corrected time complexity requirement until LLVM 14 . [ edit ] Example Run this code #include <algorithm> #include <array> #include <functional> #include <iostream> #include <string_view> int main ( ) { std:: array < int , 10 > s { 5 , 7 , 4 , 2 , 8 , 6 , 1 , 9 , 0 , 3 } ; auto print = [ & s ] ( std:: string_view const rem ) { for ( auto a : s ) std:: cout << a << ' ' ; std:: cout << ": " << rem << ' \n ' ; } ; std :: sort ( s. begin ( ) , s. end ( ) ) ; print ( "sorted with the default operator<" ) ; std :: sort ( s. begin ( ) , s. end ( ) , std:: greater < int > ( ) ) ; print ( "sorted with the standard library compare function object" ) ; struct { bool operator ( ) ( int a, int b ) const { return a < b ; } } customLess ; std :: sort ( s. begin ( ) , s. end ( ) , customLess ) ; print ( "sorted with a custom function object" ) ; std :: sort ( s. begin ( ) , s. end ( ) , [ ] ( int a, int b ) { return a > b ; } ) ; print ( "sorted with a lambda expression" ) ; } Output: 0 1 2 3 4 5 6 7 8 9 : sorted with the default operator< 9 8 7 6 5 4 3 2 1 0 : sorted with the standard library compare function object 0 1 2 3 4 5 6 7 8 9 : sorted with a custom function object 9 8 7 6 5 4 3 2 1 0 : sorted with a lambda expression [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 713 C++98 the \(\scriptsize O(N \cdot \log(N))\) O(N·log(N)) time complexity was only required on the average it is required for the worst case [ edit ] See also partial_sort sorts the first N elements of a range (function template) [edit] stable_sort sorts a range of elements while preserving order between equal elements (function template) [edit] ranges::sort (C++20) sorts a range into ascending order (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/sort&oldid=180389 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 10 February 2025, at 00:33. Privacy policy About cppreference.com Disclaimers