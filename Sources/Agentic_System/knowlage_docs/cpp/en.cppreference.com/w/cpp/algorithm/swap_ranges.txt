std::swap_ranges - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: swap_ranges From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Defined in header <algorithm> template < class ForwardIt1, class ForwardIt2 > ForwardIt2 swap_ranges ( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 ) ; (1) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt1, class ForwardIt2 > ForwardIt2 swap_ranges ( ExecutionPolicy && policy, ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 ) ; (2) (since C++17) 1) Exchanges elements between range [ first1 , last1 ) and another range of std:: distance ( first1, last1 ) elements starting at first2 . 2) Same as (1) , but executed according to policy . This overload participates in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) If any of the following conditions is satisfied, the behavior is undefined: The two ranges overlap. There exists a pair of corresponding iterators iter1 and iter2 in the two ranges such that * iter1 is not Swappable with * iter2 . Contents 1 Parameters 2 Return value 3 Complexity 4 Exceptions 5 Notes 6 Possible implementation 7 Example 8 See also [ edit ] Parameters first1, last1 - the pair of iterators defining the range of elements to swap first2 - beginning of the second range of elements to swap policy - the execution policy to use Type requirements - ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator . [ edit ] Return value Iterator to the element past the last element exchanged in the range beginning with first2 . [ edit ] Complexity Exactly std:: distance ( first1, last1 ) swaps. [ edit ] Exceptions The overload with a template parameter named ExecutionPolicy reports errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Notes Implementations (e.g. MSVC STL ) may enable vectorization when the iterator type satisfies LegacyContiguousIterator and swapping its value type calls neither non-trivial special member function nor ADL -found swap . [ edit ] Possible implementation template < class ForwardIt1, class ForwardIt2 > constexpr //< since C++20 ForwardIt2 swap_ranges ( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 ) { for ( ; first1 ! = last1 ; ++ first1, ++ first2 ) std:: iter_swap ( first1, first2 ) ; return first2 ; } [ edit ] Example Demonstrates swapping of subranges from different containers. Run this code #include <algorithm> #include <iostream> #include <list> #include <vector> auto print = [ ] ( auto comment, auto const & seq ) { std:: cout << comment ; for ( const auto & e : seq ) std:: cout << e << ' ' ; std:: cout << ' \n ' ; } ; int main ( ) { std:: vector < char > v { 'a' , 'b' , 'c' , 'd' , 'e' } ; std:: list < char > l { '1' , '2' , '3' , '4' , '5' } ; print ( "Before swap_ranges: \n " "v: " , v ) ; print ( "l: " , l ) ; std :: swap_ranges ( v. begin ( ) , v. begin ( ) + 3 , l. begin ( ) ) ; print ( "After swap_ranges: \n " "v: " , v ) ; print ( "l: " , l ) ; } Output: Before swap_ranges: v: a b c d e l: 1 2 3 4 5 After swap_ranges: v: 1 2 3 d e l: a b c 4 5 [ edit ] See also iter_swap swaps the elements pointed to by two iterators (function template) [edit] swap swaps the values of two objects (function template) [edit] ranges::swap_ranges (C++20) swaps two ranges of elements (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/swap_ranges&oldid=180362 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 9 February 2025, at 23:32. Privacy policy About cppreference.com Disclaimers