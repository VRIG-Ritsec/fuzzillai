std::transform_inclusive_scan - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: transform_inclusive_scan From cppreference.com < cpp ‎ | algorithm C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Algorithm library Constrained algorithms and algorithms on ranges (C++20) Constrained algorithms, e.g. ranges::copy , ranges::sort , ... Execution policies (C++17) is_execution_policy (C++17) execution::seq execution::par execution::par_unseq execution::unseq (C++17) (C++17) (C++17) (C++20) execution::sequenced_policy execution::parallel_policy execution::parallel_unsequenced_policy execution::parallel_unsequenced (C++17) (C++17) (C++17) (C++20) Non-modifying sequence operations Batch operations for_each for_each_n (C++17) Search operations all_of any_of none_of (C++11) (C++11) (C++11) count count_if mismatch equal find find_if find_if_not (C++11) find_end find_first_of adjacent_find search search_n Modifying sequence operations Copy operations copy copy_if (C++11) copy_backward copy_n (C++11) move (C++11) move_backward (C++11) Swap operations swap iter_swap swap_ranges Transformation operations replace replace_if transform replace_copy replace_copy_if Generation operations fill fill_n generate generate_n Removing operations remove remove_if unique remove_copy remove_copy_if unique_copy Order-changing operations reverse reverse_copy rotate rotate_copy random_shuffle shuffle (until C++17) (C++11) shift_left shift_right (C++20) (C++20) Sampling operations sample (C++17) Sorting and related operations Partitioning operations partition partition_copy (C++11) stable_partition is_partitioned (C++11) partition_point (C++11) Sorting operations sort stable_sort partial_sort partial_sort_copy is_sorted (C++11) is_sorted_until (C++11) nth_element Binary search operations (on partitioned ranges) lower_bound upper_bound equal_range binary_search Set operations (on sorted ranges) includes set_union set_intersection set_difference set_symmetric_difference Merge operations (on sorted ranges) merge inplace_merge Heap operations push_heap pop_heap make_heap sort_heap is_heap (C++11) is_heap_until (C++11) Minimum/maximum operations max min minmax (C++11) clamp (C++17) max_element min_element minmax_element (C++11) Lexicographical comparison operations lexicographical_compare lexicographical_compare_three_way (C++20) Permutation operations next_permutation prev_permutation is_permutation (C++11) C library qsort bsearch Numeric operations iota (C++11) inner_product adjacent_difference accumulate reduce (C++17) transform_reduce (C++17) partial_sum inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) Operations on uninitialized memory uninitialized_copy uninitialized_move (C++17) uninitialized_fill uninitialized_copy_n (C++11) uninitialized_move_n (C++17) uninitialized_fill_n destroy (C++17) destroy_n (C++17) destroy_at (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Defined in header <numeric> template < class InputIt, class OutputIt, class BinaryOp, class UnaryOp > OutputIt transform_inclusive_scan ( InputIt first, InputIt last, OutputIt d_first, BinaryOp binary_op, UnaryOp unary_op ) ; (1) (since C++17) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryOp, class UnaryOp > ForwardIt2 transform_inclusive_scan ( ExecutionPolicy && policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first, BinaryOp binary_op, UnaryOp unary_op ) ; (2) (since C++17) template < class InputIt, class OutputIt, class BinaryOp, class UnaryOp, class T > OutputIt transform_inclusive_scan ( InputIt first, InputIt last, OutputIt d_first, BinaryOp binary_op, UnaryOp unary_op, T init ) ; (3) (since C++17) (constexpr since C++20) template < class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class BinaryOp, class UnaryOp, class T > ForwardIt2 transform_inclusive_scan ( ExecutionPolicy && policy, ForwardIt1 first, ForwardIt1 last, ForwardIt2 d_first, BinaryOp binary_op, UnaryOp unary_op, T init ) ; (4) (since C++17) 1) Computes the inclusive prefix sum using op . For each integer i in [ ​ 0 ​ , std:: distance ( first, last ) ) , performs the following operations in order: Creates a sequence which is formed by the values transformed from the elements of [ first , iter ] in order by unary_op , where iter is the next i th iterator of first . Computes the generalized noncommutative sum of the sequence over binary_op . Assigns the result to * dest , where dest is the next i th iterator of d_first . 3) Same as (1) , but each sequence created is formed by init followed by the elements of [ first , iter ] in order. 2,4) Same as (1,3) , but executed according to policy . These overloads participate in overload resolution only if all following conditions are satisfied: std:: is_execution_policy_v < std:: decay_t < ExecutionPolicy >> is true . (until C++20) std:: is_execution_policy_v < std:: remove_cvref_t < ExecutionPolicy >> is true . (since C++20) The generalized noncommutative sum of a sequence of elements over a binary operation binary_op is defined as follows: If the sequence only has one element, the sum is the value of the element. Otherwise, performs the following operations in order: Selects any two adjacent elements elem1 and elem2 from the sequence. Calculates binary_op ( elem1, elem2 ) and replaces the two elements in the sequence with the result. Repeats steps 1 and 2 until there is only one element in the sequence. The result is non-deterministic if the binary_op is not associative (such as floating-point addition). For overloads (1,2) , if binary_op ( unary_op ( * first ) , unary_op ( * first ) ) is not convertible to the value type of decltype ( first ) , the program is ill-formed. For overloads (3,4) , if any of the following values is not convertible to T , the program is ill-formed: binary_op ( init, init ) binary_op ( init, unary_op ( * first ) ) binary_op ( unary_op ( * first ) , unary_op ( * first ) ) If any of the following conditions is satisfied, the behavior is undefined: For overloads (1,2) , the value type of decltype ( first ) is not MoveConstructible . For overloads (3,4) , T is not MoveConstructible . unary_op or binary_op modifies any element of [ first , last ) . unary_op or binary_op invalidates any iterator or subrange of [ first , last ] . Contents 1 Parameters 2 Return value 3 Complexity 4 Exceptions 5 Notes 6 Example 7 See also [ edit ] Parameters first, last - the pair of iterators defining the range of elements to sum d_first - the beginning of the destination range; may be equal to first policy - the execution policy to use init - the initial value unary_op - unary FunctionObject that will be applied to each element of the input range. The return type must be acceptable as input to binary_op . binary_op - binary FunctionObject that will be applied in to the result of unary_op , the results of other binary_op , and init if provided Type requirements - InputIt must meet the requirements of LegacyInputIterator . - OutputIt must meet the requirements of LegacyOutputIterator . - ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator . [ edit ] Return value Iterator to the element past the last element written. [ edit ] Complexity Given \(\scriptsize N\) N as std:: distance ( first, last ) : 1-4) \(\scriptsize O(N)\) O(N) applications of unary_op and binary_op respectively. [ edit ] Exceptions The overloads with a template parameter named ExecutionPolicy report errors as follows: If execution of a function invoked as part of the algorithm throws an exception and ExecutionPolicy is one of the standard policies , std::terminate is called. For any other ExecutionPolicy , the behavior is implementation-defined. If the algorithm fails to allocate memory, std::bad_alloc is thrown. [ edit ] Notes unary_op is never applied to init . The parameter init appears last, differing from std::transform_exclusive_scan , because it is optional for this function. [ edit ] Example Run this code #include <functional> #include <iostream> #include <iterator> #include <numeric> #include <vector> int main ( ) { std:: vector data { 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 } ; auto times_10 = [ ] ( int x ) { return x * 10 ; } ; std:: cout << "10 times exclusive sum: " ; std:: transform_exclusive_scan ( data. begin ( ) , data. end ( ) , std:: ostream_iterator < int > ( std:: cout , " " ) , 0 , std:: plus < int > { } , times_10 ) ; std:: cout << " \n 10 times inclusive sum: " ; std :: transform_inclusive_scan ( data. begin ( ) , data. end ( ) , std:: ostream_iterator < int > ( std:: cout , " " ) , std:: plus < int > { } , times_10 ) ; std:: cout << ' \n ' ; } Output: 10 times exclusive sum: 0 30 40 80 90 140 230 250 10 times inclusive sum: 30 40 80 90 140 230 250 310 [ edit ] See also partial_sum computes the partial sum of a range of elements (function template) [edit] transform applies a function to a range of elements, storing results in a destination range (function template) [edit] inclusive_scan (C++17) similar to std::partial_sum , includes the i th input element in the i th sum (function template) [edit] transform_exclusive_scan (C++17) applies an invocable, then calculates exclusive scan (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/transform_inclusive_scan&oldid=180309 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 中文 This page was last modified on 9 February 2025, at 14:13. Privacy policy About cppreference.com Disclaimers