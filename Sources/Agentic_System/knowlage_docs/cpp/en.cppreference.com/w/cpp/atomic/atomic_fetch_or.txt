std::atomic_fetch_or, std::atomic_fetch_or_explicit - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: atomic_fetch_or, std:: atomic_fetch_or_explicit From cppreference.com < cpp ‎ | atomic C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] Defined in header <atomic> template < class T > T atomic_fetch_or ( std:: atomic < T > * obj, typename std:: atomic < T > :: value_type arg ) noexcept ; (1) (since C++11) template < class T > T atomic_fetch_or ( volatile std:: atomic < T > * obj, typename std:: atomic < T > :: value_type arg ) noexcept ; (2) (since C++11) template < class T > T atomic_fetch_or_explicit ( std:: atomic < T > * obj, typename std:: atomic < T > :: value_type arg, std:: memory_order order ) noexcept ; (3) (since C++11) template < class T > T atomic_fetch_or_explicit ( volatile std:: atomic < T > * obj, typename std:: atomic < T > :: value_type arg, std:: memory_order order ) noexcept ; (4) (since C++11) Atomically replaces the value pointed by obj with the result of bitwise OR between the old value of obj and arg . Returns the value obj held previously. The operation is performed as if the following is executed: 1,2) obj - > fetch_or ( arg ) 3,4) obj - > fetch_or ( arg, order ) If std::atomic<T> has no fetch_or member (this member is only provided for integral types except bool ), the program is ill-formed. Contents 1 Parameters 2 Return value 3 Example 4 Defect reports 5 See also [ edit ] Parameters obj - pointer to the atomic object to modify arg - the value to bitwise OR to the value stored in the atomic object order - the memory synchronization ordering [ edit ] Return value The value immediately preceding the effects of this function in the modification order of * obj . [ edit ] Example [edit] Run this code #include <atomic> #include <chrono> #include <functional> #include <iostream> #include <thread> // Binary semaphore for demonstrative purposes only. // This is a simple yet meaningful example: atomic operations // are unnecessary without threads. class Semaphore { std:: atomic_char m_signaled ; public : Semaphore ( bool initial = false ) { m_signaled = initial ; } // Block until semaphore is signaled void take ( ) { while ( ! std:: atomic_fetch_and ( & m_signaled, false ) ) { std:: this_thread :: sleep_for ( std:: chrono :: milliseconds ( 10 ) ) ; } } void put ( ) { std :: atomic_fetch_or ( & m_signaled, true ) ; } } ; class ThreadedCounter { static const int N = 100 ; static const int REPORT_INTERVAL = 10 ; int m_count ; bool m_done ; Semaphore m_count_sem ; Semaphore m_print_sem ; void count_up ( ) { for ( m_count = 1 ; m_count <= N ; ++ m_count ) if ( m_count % REPORT_INTERVAL == 0 ) { if ( m_count == N ) m_done = true ; m_print_sem. put ( ) ; // signal printing to occur m_count_sem. take ( ) ; // wait until printing is complete proceeding } std:: cout << "count_up() done \n " ; m_done = true ; m_print_sem. put ( ) ; } void print_count ( ) { do { m_print_sem. take ( ) ; std:: cout << m_count << ' \n ' ; m_count_sem. put ( ) ; } while ( ! m_done ) ; std:: cout << "print_count() done \n " ; } public : ThreadedCounter ( ) : m_done ( false ) { } void run ( ) { auto print_thread = std:: thread ( & ThreadedCounter :: print_count , this ) ; auto count_thread = std:: thread ( & ThreadedCounter :: count_up , this ) ; print_thread. join ( ) ; count_thread. join ( ) ; } } ; int main ( ) { ThreadedCounter m_counter ; m_counter. run ( ) ; } Output: 10 20 30 40 50 60 70 80 90 100 print_count() done count_up() done [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior P0558R1 C++11 exact type match was required because T was deduced from multiple arguments T is only deduced from obj [ edit ] See also fetch_or atomically performs bitwise OR between the argument and the value of the atomic object and obtains the value held previously (public member function of std::atomic<T> ) [edit] atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) replaces the atomic object with the result of bitwise AND with a non-atomic argument and obtains the previous value of the atomic (function template) [edit] atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) replaces the atomic object with the result of bitwise XOR with a non-atomic argument and obtains the previous value of the atomic (function template) [edit] C documentation for atomic_fetch_or , atomic_fetch_or_explicit Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/atomic/atomic_fetch_or&oldid=161343 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 25 October 2023, at 09:11. Privacy policy About cppreference.com Disclaimers