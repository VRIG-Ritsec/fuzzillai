std::atomic_flag - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: atomic_flag From cppreference.com < cpp ‎ | atomic C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::atomic_flag Member functions atomic_flag::atomic_flag atomic_flag::operator= atomic_flag::clear atomic_flag::test_and_set atomic_flag::test (C++20) atomic_flag::wait (C++20) atomic_flag::notify_one (C++20) atomic_flag::notify_all (C++20) [edit] Defined in header <atomic> class atomic_flag ; (since C++11) std::atomic_flag is an atomic boolean type. Unlike all specializations of std::atomic , it is guaranteed to be lock-free. Unlike std:: atomic < bool > , std::atomic_flag does not provide load or store operations. [ edit ] Member functions (constructor) constructs an atomic_flag (public member function) operator= [deleted] the assignment operator (deleted) (public member function) clear atomically sets flag to false (public member function) [edit] test_and_set atomically sets the flag to true and obtains its previous value (public member function) [edit] test (C++20) atomically returns the value of the flag (public member function) [edit] wait (C++20) blocks the thread until notified and the atomic value changes (public member function) [edit] notify_one (C++20) notifies at least one thread waiting on the atomic object (public member function) [edit] notify_all (C++20) notifies all threads blocked waiting on the atomic object (public member function) [edit] [ edit ] Example A spinlock mutex demo can be implemented in userspace using an atomic_flag . Do note that spinlock mutexes are extremely dubious in practice. Run this code #include <atomic> #include <iostream> #include <mutex> #include <thread> #include <vector> class mutex { std :: atomic_flag m_ { } ; public : void lock ( ) noexcept { while ( m_. test_and_set ( std:: memory_order_acquire ) ) #if defined(__cpp_lib_atomic_wait) && __cpp_lib_atomic_wait >= 201907L // Since C++20, locks can be acquired only after notification in the unlock, // avoiding any unnecessary spinning. // Note that even though wait guarantees it returns only after the value has // changed, the lock is acquired after the next condition check. m_. wait ( true , std:: memory_order_relaxed ) #endif ; } bool try_lock ( ) noexcept { return ! m_. test_and_set ( std:: memory_order_acquire ) ; } void unlock ( ) noexcept { m_. clear ( std:: memory_order_release ) ; #if defined(__cpp_lib_atomic_wait) && __cpp_lib_atomic_wait >= 201907L m_. notify_one ( ) ; #endif } } ; static mutex m ; static int out { } ; void f ( std:: size_t n ) { for ( std:: size_t cnt { } ; cnt < 40 ; ++ cnt ) { std:: lock_guard lock { m } ; std:: cout << n << ( ( ++ out % 40 ) == 0 ? ' \n ' : ' ' ) ; } } int main ( ) { std:: vector < std:: thread > v ; for ( std:: size_t n { } ; n < 10 ; ++ n ) v. emplace_back ( f, n ) ; for ( auto & t : v ) t. join ( ) ; } Possible output: 0 1 1 2 0 1 3 2 3 2 0 1 2 3 2 3 0 1 3 2 0 1 2 3 2 3 0 3 2 3 2 3 2 3 1 2 3 0 1 3 2 3 2 0 1 2 3 0 1 2 3 2 0 1 2 3 0 1 2 3 2 3 2 3 2 0 1 2 3 2 3 0 1 3 2 3 0 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 3 2 0 2 3 2 3 2 3 2 3 2 3 0 3 2 3 0 3 0 3 2 3 0 3 2 3 2 3 0 2 3 0 3 2 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 [ edit ] See also atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomically sets the flag to true and returns its previous value (function) [edit] atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomically sets the value of the flag to false (function) [edit] atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) blocks the thread until notified and the flag changes (function) [edit] atomic_flag_notify_one (C++20) notifies a thread blocked in atomic_flag_wait (function) [edit] atomic_flag_notify_all (C++20) notifies all threads blocked in atomic_flag_wait (function) [edit] ATOMIC_FLAG_INIT (C++11) initializes an std::atomic_flag to false (macro constant) [edit] C documentation for atomic_flag Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/atomic/atomic_flag&oldid=179464 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 10 January 2025, at 06:29. Privacy policy About cppreference.com Disclaimers