std::same_as - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: same_as From cppreference.com < cpp ‎ | concepts C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concepts library Core language concepts same_as (C++20) derived_from (C++20) convertible_to (C++20) common_reference_with (C++20) common_with (C++20) integral (C++20) signed_integral (C++20) unsigned_integral (C++20) floating_point (C++20) swappable swappable_with (C++20) (C++20) destructible (C++20) constructible_from (C++20) default_initializable (C++20) move_constructible (C++20) copy_constructible (C++20) assignable_from (C++20) Comparison concepts equality_comparable equality_comparable_with (C++20) (C++20) totally_ordered totally_ordered_with (C++20) (C++20) Object concepts movable (C++20) copyable (C++20) semiregular (C++20) regular (C++20) Callable concepts invocable regular_invocable (C++20) (C++20) predicate (C++20) relation (C++20) equivalence_relation (C++20) strict_weak_order (C++20) Exposition-only concepts boolean-testable ﻿ (C++20) [edit] Defined in header <concepts> template < class T, class U > concept same_as = /* see below */ ; (since C++20) The concept same_as<T, U> is satisfied if and only if T and U denote the same type. std :: same_as < T, U > subsumes std :: same_as < U, T > and vice versa. Contents 1 Possible implementation 2 Example 3 References 4 See also [ edit ] Possible implementation namespace detail { template < class T, class U > concept SameHelper = std:: is_same_v < T, U > ; } template < class T, class U > concept same_as = detail :: SameHelper < T, U > && detail :: SameHelper < U, T > ; [ edit ] Example Run this code #include <concepts> #include <iostream> template < typename T, typename ... U > concept either = ( std :: same_as < T, U > || ... ) ; template < typename T > concept is_printable = std:: integral < T > || std:: floating_point < T > || either < std:: remove_cvref_t < std:: remove_pointer_t < std:: decay_t < T >>> , char , wchar_t > ; void println ( is_printable auto const ... arguments ) { ( std:: wcout << ... << arguments ) << ' \n ' ; } int main ( ) { println ( "Example: " , 3.14 , " : " , 42 , " : [" , 'a' , L '-' , L "Z]" ) ; } Output: Example: 3.14 : 42 : [a-Z] [ edit ] References C++23 standard (ISO/IEC 14882:2024): 18.4.2 Concept same_as [concept.same] C++20 standard (ISO/IEC 14882:2020): 18.4.2 Concept same_as [concept.same] [ edit ] See also is_same (C++11) checks if two types are the same (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/same_as&oldid=182044 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 中文 Русский This page was last modified on 19 March 2025, at 14:20. Privacy policy About cppreference.com Disclaimers