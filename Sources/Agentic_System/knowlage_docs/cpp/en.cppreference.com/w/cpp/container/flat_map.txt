std::flat_map - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: flat_map From cppreference.com < cpp ‎ | container C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::flat_map Member types Member functions flat_map::flat_map flat_map::operator= Element access flat_map::at flat_map::operator[] Iterators flat_map::begin flat_map::cbegin flat_map::end flat_map::cend flat_map::rbegin flat_map::crbegin flat_map::rend flat_map::crend Lookup flat_map::count flat_map::find flat_map::contains flat_map::equal_range flat_map::lower_bound flat_map::upper_bound Capacity flat_map::size flat_map::max_size flat_map::empty Modifiers flat_map::clear flat_map::erase flat_map::swap flat_map::emplace flat_map::extract flat_map::replace flat_map::insert flat_map::insert_range flat_map::insert_or_assign flat_map::emplace_hint flat_map::try_emplace Observers flat_map::key_comp flat_map::keys flat_map::value_comp flat_map::values Non-member functions operator== operator<=> swap (std::flat_map) erase_if (std::flat_map) Helper classes uses_allocator <std::flat_map> Tags sorted_unique sorted_unique_t Deduction guides [edit] Defined in header <flat_map> template < class Key, class T, class Compare = std:: less < Key > , class KeyContainer = std:: vector < Key > , class MappedContainer = std:: vector < T > > class flat_map ; (since C++23) The flat map is a container adaptor that gives the functionality of an associative container that contains key-value pairs with unique keys. Keys are sorted by using the comparison function Compare . The class template flat_map acts as a wrapper to the two underlying containers, passed as objects of type KeyContainer and MappedContainer respectively. The first container is sorted, and for each key its corresponding value is in the second container at the same index (offset). The number of elements in both containers is the same. Everywhere the standard library uses the Compare requirements, uniqueness is determined by using the equivalence relation. Informally, two objects a and b are considered equivalent if neither compares less than the other: ! comp ( a, b ) && ! comp ( b, a ) . std::flat_map meets the requirements of Container , ReversibleContainer , optional container requirements , and all requirements of AssociativeContainer (including logarithmic search complexity), except that: requirements related to nodes are not applicable, iterator invalidation requirements differ, the complexity of insertion and erasure operations is linear. A flat map supports most AssociativeContainer 's operations that use unique keys. All member functions of std::flat_map are constexpr : it is possible to create and use std::flat_map objects in the evaluation of a constant expression. However, std::flat_map objects generally cannot be constexpr , because any dynamically allocated storage must be released in the same evaluation of constant expression. (since C++26) Contents 1 Iterator invalidation 2 Template parameters 3 Member types 4 Member classes 5 Member objects 6 Member functions 6.1 Element access 6.2 Iterators 6.3 Capacity 6.4 Modifiers 6.5 Lookup 6.6 Observers 7 Non-member functions 8 Helper classes 9 Tags 10 Deduction guides 11 Notes 12 Example 13 See also [ edit ] Iterator invalidation This section is incomplete [ edit ] Template parameters Key - The type of the keys. The program is ill-formed if Key is not the same type as KeyContainer::value_type . T - The type of mapped values. The program is ill-formed if T is not the same type as MappedContainer::value_type . Compare - A Compare type providing a strict weak ordering. KeyContainer MappedContainer - The types of the underlying SequenceContainer to store keys and mapped values correspondingly. The iterators of such containers should satisfy LegacyRandomAccessIterator or model random_access_iterator . Invocations of their member functions size and max_size should not exit via an exception. The standard containers std::vector and std::deque satisfy these requirements. [ edit ] Member types Type Definition key_container_type KeyContainer [edit] mapped_container_type MappedContainer [edit] key_type Key [edit] mapped_type T [edit] value_type std:: pair < key_type, mapped_type > [edit] key_compare Compare [edit] reference std:: pair < const key_type & , mapped_type & > [edit] const_reference std:: pair < const key_type & , const mapped_type & > [edit] size_type std::size_t [edit] difference_type std::ptrdiff_t [edit] iterator implementation-defined LegacyInputIterator , ConstexprIterator (since C++26) and random_access_iterator to value_type [edit] const_iterator implementation-defined LegacyInputIterator , ConstexprIterator (since C++26) and random_access_iterator to const value_type [edit] reverse_iterator std:: reverse_iterator < iterator > [edit] const_reverse_iterator std:: reverse_iterator < const_iterator > [edit] containers type describing the underlying containers struct containers { key_container_type keys ; mapped_container_type values ; } ; [edit] [ edit ] Member classes value_compare compares objects of type value_type (class) [edit] [ edit ] Member objects Member Description containers c (private) the adapted containers ( exposition-only member object* ) key_compare compare (private) the comparison function object ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs the flat_map (public member function) [edit] (destructor) (implicitly declared) destroys every element of the container adaptor (public member function) operator= assigns values to the container adaptor (public member function) [edit] Element access at access specified element with bounds checking (public member function) [edit] operator[] access or insert specified element (public member function) [edit] Iterators begin cbegin returns an iterator to the beginning (public member function) [edit] end cend returns an iterator to the end (public member function) [edit] rbegin crbegin returns a reverse iterator to the beginning (public member function) [edit] rend crend returns a reverse iterator to the end (public member function) [edit] Capacity empty checks whether the container adaptor is empty (public member function) [edit] size returns the number of elements (public member function) [edit] max_size returns the maximum possible number of elements (public member function) [edit] Modifiers emplace constructs element in-place (public member function) [edit] emplace_hint constructs elements in-place using a hint (public member function) [edit] try_emplace inserts in-place if the key does not exist, does nothing if the key exists (public member function) [edit] insert inserts elements (public member function) [edit] insert_range inserts a range of elements (public member function) [edit] insert_or_assign inserts an element or assigns to the current element if the key already exists (public member function) [edit] extract extracts the underlying containers (public member function) [edit] replace replaces the underlying containers (public member function) [edit] erase erases elements (public member function) [edit] swap swaps the contents (public member function) [edit] clear clears the contents (public member function) [edit] Lookup find finds element with specific key (public member function) [edit] count returns the number of elements matching specific key (public member function) [edit] contains checks if the container contains element with specific key (public member function) [edit] lower_bound returns an iterator to the first element not less than the given key (public member function) [edit] upper_bound returns an iterator to the first element greater than the given key (public member function) [edit] equal_range returns range of elements matching a specific key (public member function) [edit] Observers key_comp returns the function that compares keys (public member function) [edit] value_comp returns the function that compares keys in objects of type value_type (public member function) [edit] keys direct access to the underlying keys container (public member function) [edit] values direct access to the underlying values container (public member function) [edit] [ edit ] Non-member functions operator== operator<=> (C++23) lexicographically compares the values of two flat_map s (function template) [edit] std::swap (std::flat_map) (C++23) specializes the std::swap algorithm (function template) [edit] erase_if (std::flat_map) (C++23) erases all elements satisfying specific criteria (function template) [edit] [ edit ] Helper classes std::uses_allocator <std::flat_map> (C++23) specializes the std::uses_allocator type trait (class template specialization) [edit] [ edit ] Tags sorted_unique sorted_unique_t (C++23) indicates that elements of a range are sorted and unique (tag) [edit] [ edit ] Deduction guides [ edit ] Notes The member types iterator and const_iterator may be aliases to the same type. This means defining a pair of function overloads using the two types as parameter types may violate the One Definition Rule . Since iterator is convertible to const_iterator , a single function with a const_iterator as parameter type will work instead. Feature-test macro Value Std Feature __cpp_lib_flat_map 202207L (C++23) std::flat_map and std::flat_multimap __cpp_lib_constexpr_flat_map 202502L (C++26) constexpr std::flat_map [ edit ] Example This section is incomplete Reason: no example [ edit ] See also flat_multimap (C++23) adapts two containers to provide a collection of key-value pairs, sorted by keys (class template) [edit] map collection of key-value pairs, sorted by keys, keys are unique (class template) [edit] unordered_map (C++11) collection of key-value pairs, hashed by keys, keys are unique (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_map&oldid=182858 " Categories : Todo without reason Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Česky Deutsch Español Français Italiano 日本語 Polski Português Русский 中文 This page was last modified on 26 April 2025, at 15:09. Privacy policy About cppreference.com Disclaimers