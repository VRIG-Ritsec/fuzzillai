std::flat_set - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: flat_set From cppreference.com < cpp ‎ | container C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::flat_set Member types Member functions flat_set::flat_set flat_set::operator= Iterators flat_set::begin flat_set::cbegin flat_set::end flat_set::cend flat_set::rbegin flat_set::crbegin flat_set::rend flat_set::crend Capacity flat_set::size flat_set::max_size flat_set::empty Observers flat_set::key_comp flat_set::value_comp Modifiers flat_set::clear flat_set::insert flat_set::insert_range flat_set::emplace flat_set::emplace_hint flat_set::erase flat_set::swap flat_set::extract flat_set::replace Lookup flat_set::count flat_set::find flat_set::contains flat_set::equal_range flat_set::lower_bound flat_set::upper_bound Non-member functions operator== operator<=> swap (std::flat_set) erase_if (std::flat_set) Helper classes uses_allocator <std::flat_set> Tags sorted_unique sorted_unique_t Deduction guides [edit] Defined in header <flat_set> template < class Key, class Compare = std:: less < Key > , class KeyContainer = std:: vector < Key > > class flat_set ; (since C++23) The flat set is a container adaptor that gives the functionality of an associative container that stores a sorted set of unique objects of type Key . Sorting is done using the key comparison function Compare . The class template flat_set acts as a wrapper to the underlying sorted container passed as object of type KeyContainer . Everywhere the standard library uses the Compare requirements, uniqueness is determined by using the equivalence relation. Informally, two objects a and b are considered equivalent if neither compares less than the other: ! comp ( a, b ) && ! comp ( b, a ) . std::flat_set meets the requirements of Container , ReversibleContainer , optional container requirements , and all requirements of AssociativeContainer (including logarithmic search complexity), except that: requirements related to nodes are not applicable, iterator invalidation requirements differ, the complexity of insertion and erasure operations is linear. A flat set supports most AssociativeContainer 's operations that use unique keys. All member functions of std::flat_set are constexpr : it is possible to create and use std::flat_set objects in the evaluation of a constant expression. However, std::flat_set objects generally cannot be constexpr , because any dynamically allocated storage must be released in the same evaluation of constant expression. (since C++26) Contents 1 Iterator invalidation 2 Template parameters 3 Member types 4 Member objects 5 Member functions 5.1 Iterators 5.2 Capacity 5.3 Modifiers 5.4 Lookup 5.5 Observers 6 Non-member functions 7 Helper classes 8 Tags 9 Deduction guides 10 Notes 11 Example 12 See also [ edit ] Iterator invalidation This section is incomplete [ edit ] Template parameters Key - The type of the stored elements. The program is ill-formed if Key is not the same type as KeyContainer::value_type . Compare - A Compare type providing a strict weak ordering. KeyContainer - The type of the underlying SequenceContainer to store the elements. The iterators of such container should satisfy LegacyRandomAccessIterator or model random_access_iterator . The standard containers std::vector and std::deque satisfy these requirements. [ edit ] Member types Type Definition container_type Key Container [edit] key_type Key [edit] value_type Key [edit] key_compare Compare [edit] value_compare Compare [edit] reference value_type & [edit] const_reference const value_type & [edit] size_type typename KeyContainer :: size_type [edit] difference_type typename KeyContainer :: difference_type [edit] iterator implementation-defined LegacyRandomAccessIterator , ConstexprIterator (since C++26) and random_access_iterator to value_type [edit] const_iterator implementation-defined LegacyRandomAccessIterator , ConstexprIterator (since C++26) and random_access_iterator to const value_type [edit] reverse_iterator std:: reverse_iterator < iterator > [edit] const_reverse_iterator std:: reverse_iterator < const_iterator > [edit] [ edit ] Member objects Member Description container_type c (private) the adapted container ( exposition-only member object* ) key_compare compare (private) the comparison function object ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs the flat_set (public member function) [edit] (destructor) (implicitly declared) destroys every element of the container adaptor (public member function) operator= assigns values to the container adaptor (public member function) [edit] Iterators begin cbegin returns an iterator to the beginning (public member function) [edit] end cend returns an iterator to the end (public member function) [edit] rbegin crbegin returns a reverse iterator to the beginning (public member function) [edit] rend crend returns a reverse iterator to the end (public member function) [edit] Capacity empty checks whether the container adaptor is empty (public member function) [edit] size returns the number of elements (public member function) [edit] max_size returns the maximum possible number of elements (public member function) [edit] Modifiers emplace constructs element in-place (public member function) [edit] emplace_hint constructs elements in-place using a hint (public member function) [edit] insert inserts elements (public member function) [edit] insert_range inserts a range of elements (public member function) [edit] extract extracts the underlying container (public member function) [edit] replace replaces the underlying container (public member function) [edit] erase erases elements (public member function) [edit] swap swaps the contents (public member function) [edit] clear clears the contents (public member function) [edit] Lookup find finds element with specific key (public member function) [edit] count returns the number of elements matching specific key (public member function) [edit] contains checks if the container contains element with specific key (public member function) [edit] lower_bound returns an iterator to the first element not less than the given key (public member function) [edit] upper_bound returns an iterator to the first element greater than the given key (public member function) [edit] equal_range returns range of elements matching a specific key (public member function) [edit] Observers key_comp returns the function that compares keys (public member function) [edit] value_comp returns the function that compares keys in objects of type value_type (public member function) [edit] [ edit ] Non-member functions operator== operator<=> (C++23) lexicographically compares the values of two flat_set s (function template) [edit] std::swap (std::flat_set) (C++23) specializes the std::swap algorithm (function template) [edit] erase_if (std::flat_set) (C++23) erases all elements satisfying specific criteria (function template) [edit] [ edit ] Helper classes std::uses_allocator <std::flat_set> (C++23) specializes the std::uses_allocator type trait (class template specialization) [edit] [ edit ] Tags sorted_unique sorted_unique_t (C++23) indicates that elements of a range are sorted and unique (tag) [edit] [ edit ] Deduction guides [ edit ] Notes The member types iterator and const_iterator may be aliases to the same type. This means defining a pair of function overloads using the two types as parameter types may violate the One Definition Rule . Since iterator is convertible to const_iterator , a single function with a const_iterator as parameter type will work instead. Some advantages of flat set over other standard container adaptors are: Potentially faster lookup (even though search operations have logarithmic complexity). Much faster iteration: random access iterators instead of bidirectional iterators . Less memory consumption for small objects (and for big objects if KeyContainer :: shrink_to_fit ( ) is available). Better cache performance (depending on KeyContainer , keys are stored in a contiguous block(s) of memory). Some disadvantages of flat set are: Non-stable iterators (iterators are invalidated when inserting and erasing elements). Non-copyable and non-movable type values can not be stored. Weaker exception safety (copy/move constructors can throw when shifting values in erasures and insertions). Slower (i.e., linear) insertion and erasure, especially for non-movable types. Feature-test macro Value Std Feature __cpp_lib_flat_set 202207L (C++23) std::flat_set and std::flat_multiset __cpp_lib_constexpr_flat_set 202502L (C++26) constexpr std::flat_set [ edit ] Example This section is incomplete Reason: no example [ edit ] See also flat_multiset (C++23) adapts a container to provide a collection of keys, sorted by keys (class template) [edit] set collection of unique keys, sorted by keys (class template) [edit] unordered_set (C++11) collection of unique keys, hashed by keys (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_set&oldid=182862 " Categories : Todo without reason Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Česky Deutsch Español Français Italiano 日本語 Polski Português Русский 中文 This page was last modified on 26 April 2025, at 15:15. Privacy policy About cppreference.com Disclaimers