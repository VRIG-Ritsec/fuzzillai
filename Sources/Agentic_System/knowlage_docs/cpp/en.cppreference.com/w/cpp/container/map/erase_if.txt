std::erase_if (std::map) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: erase_if (std::map) From cppreference.com < cpp ‎ | container ‎ | map [edit template] C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::map Member functions map::map map::~map map::operator= map::get_allocator Element access map::at map::operator[] Iterators map::begin map::cbegin (C++11) map::end map::cend (C++11) map::rbegin map::crbegin (C++11) map::rend map::crend (C++11) Capacity map::size map::max_size map::empty Observers map::key_comp map::value_comp Modifiers map::clear map::insert map::erase map::swap map::extract (C++17) map::merge (C++17) map::insert_range (C++23) map::insert_or_assign (C++17) map::emplace (C++11) map::emplace_hint (C++11) map::try_emplace (C++17) Lookup map::count map::find map::contains (C++20) map::equal_range map::lower_bound map::upper_bound Non-member functions operator== operator<=> (C++20) std::swap (std::map) erase_if (std::map) (C++20) operator!= operator< operator> operator<= operator>= (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) Deduction guides (C++17) [edit] Defined in header <map> template < class Key, class T, class Compare, class Alloc, class Pred > std:: map < Key, T, Compare, Alloc > :: size_type erase_if ( std:: map < Key, T, Compare, Alloc > & c, Pred pred ) ; (since C++20) (constexpr since C++26) Erases all elements that satisfy the predicate pred from c . Equivalent to auto old_size = c. size ( ) ; for ( auto first = c. begin ( ) , last = c. end ( ) ; first ! = last ; ) { if ( pred ( * first ) ) first = c. erase ( first ) ; else ++ first ; } return old_size - c. size ( ) ; Contents 1 Parameters 2 Return value 3 Complexity 4 Example 5 See also [ edit ] Parameters c - container from which to erase pred - predicate that returns true if the element should be erased [ edit ] Return value The number of erased elements. [ edit ] Complexity Linear. [ edit ] Example Run this code #include <iostream> #include <map> void println ( auto rem, const auto & container ) { std:: cout << rem << '{' ; for ( char sep [ ] { 0 , ' ' , 0 } ; const auto & [ key, value ] : container ) std:: cout << sep << '{' << key << ", " << value << '}' , * sep = ',' ; std:: cout << "} \n " ; } int main ( ) { std:: map < int , char > data { { 1 , 'a' } , { 2 , 'b' } , { 3 , 'c' } , { 4 , 'd' } , { 5 , 'e' } , { 4 , 'f' } , { 5 , 'g' } , { 5 , 'g' } , } ; println ( "Original: \n " , data ) ; const auto count = std:: erase_if ( data, [ ] ( const auto & item ) { const auto & [ key, value ] = item ; return ( key & 1 ) == 1 ; } ) ; println ( "Erase items with odd keys: \n " , data ) ; std:: cout << count << " items removed. \n " ; } Output: Original: {{1, a}, {2, b}, {3, c}, {4, d}, {5, e}} Erase items with odd keys: {{2, b}, {4, d}} 3 items removed. [ edit ] See also remove remove_if removes elements satisfying specific criteria (function template) [edit] ranges::remove ranges::remove_if (C++20) (C++20) removes elements satisfying specific criteria (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/map/erase_if&oldid=135253 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 14 November 2021, at 13:42. Privacy policy About cppreference.com Disclaimers