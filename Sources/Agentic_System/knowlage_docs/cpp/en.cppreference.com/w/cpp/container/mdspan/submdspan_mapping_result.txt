std::submdspan_mapping_result - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: submdspan_mapping_result From cppreference.com < cpp ‎ | container ‎ | mdspan C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::mdspan Member functions mdspan::mdspan mdspan::operator= Element access mdspan::operator[] Observers mdspan::rank mdspan::rank_dynamic mdspan::static_extent mdspan::extent mdspan::size mdspan::empty mdspan::stride mdspan::extents mdspan::data_handle mdspan::mapping mdspan::accessor mdspan::is_unique mdspan::is_exhaustive mdspan::is_strided mdspan::is_always_unique mdspan::is_always_exhaustive mdspan::is_always_strided Non-member functions swap (std::mdspan) Subviews submdspan (C++26) submdspan_extents (C++26) Helper types and templates extents dextents dims (C++26) default_accessor aligned_accessor (C++26) Layout mapping policies layout_left layout_right layout_stride layout_left_padded (C++26) layout_right_padded (C++26) Subviews helpers full_extent (C++26) strided_slice (C++26) submdspan_mapping_result (C++26) Deduction guides [edit] Defined in header <mdspan> template < class LayoutMapping > struct submdspan_mapping_result ; (since C++26) Specializations of submdspan_mapping_result are result types returned by overloads of submdspan_mapping . This class template has no base classes or declared members other than those shown below. [ edit ] Template parameters LayoutMapping - a layout mapping type that meets the requirements of LayoutMapping [ edit ] Data members Member name Definition mapping calculated mapping of type LayoutMapping . It is declared with [[ no_unique_address ]] attribute. (public member object) offset calculated offset of type std::size_t . (public member object) All these members have default member initializers where each data member is value initialized. [ edit ] See also submdspan (C++26) returns a view of a subset of an existing mdspan (function template) [edit] submdspan_mapping (std::layout_left::mapping) (C++26) calculates the mapping and data handle offset used for subdmspan (public member function of std::layout_left::mapping<Extents> ) [edit] submdspan_mapping (std::layout_right::mapping) (C++26) calculates the mapping and data handle offset used for subdmspan (public member function of std::layout_right::mapping<Extents> ) [edit] submdspan_mapping (std::layout_stride::mapping) (C++26) calculates the mapping and data handle offset used for subdmspan (public member function of std::layout_stride::mapping<Extents> ) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/mdspan/submdspan_mapping_result&oldid=172212 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 3 June 2024, at 11:20. Privacy policy About cppreference.com Disclaimers