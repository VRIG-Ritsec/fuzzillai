std::multimap - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: multimap From cppreference.com < cpp ‎ | container C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::multimap Member functions multimap::multimap multimap::~multimap multimap::operator= multimap::get_allocator Iterators multimap::begin multimap::cbegin (C++11) multimap::end multimap::cend (C++11) multimap::rbegin multimap::crbegin (C++11) multimap::rend multimap::crend (C++11) Capacity multimap::size multimap::max_size multimap::empty Observers multimap::key_comp multimap::value_comp Modifiers multimap::clear multimap::insert multimap::erase multimap::swap multimap::merge (C++17) multimap::insert_range (C++23) multimap::emplace (C++11) multimap::emplace_hint (C++11) multimap::extract (C++17) Lookup multimap::count multimap::find multimap::contains (C++20) multimap::equal_range multimap::lower_bound multimap::upper_bound Non-member functions operator== operator<=> (C++20) std::swap (std::multimap) erase_if (std::multimap) (C++20) operator!= operator< operator> operator<= operator>= (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) Deduction guides (C++17) [edit] Defined in header <map> template < class Key, class T, class Compare = std:: less < Key > , class Allocator = std:: allocator < std:: pair < const Key, T >> > class multimap ; (1) namespace pmr { template < class Key, class T, class Compare = std:: less < Key > > using multimap = std :: multimap < Key, T, Compare, std:: pmr :: polymorphic_allocator < std:: pair < const Key, T >>> ; } (2) (since C++17) std::multimap is an associative container that contains a sorted list of key-value pairs, while permitting multiple entries with the same key. Sorting is done according to the comparison function Compare , applied to the keys. Search, insertion, and removal operations have logarithmic complexity. Iterators of std::multimap iterate in non-descending order of keys, where non-descending is defined by the comparison that was used for construction. That is, given m , a std::multimap it_l and it_r , dereferenceable iterators to m , with it_l < it_r . m. value_comp ( ) ( * it_r, * it_l ) == false (least to greatest if using the default comparison). The order of the key-value pairs whose keys compare equivalent is the order of insertion and does not change. (since C++11) Everywhere the standard library uses the Compare requirements, equivalence is determined by using the equivalence relation as described on Compare . In imprecise terms, two objects a and b are considered equivalent if neither compares less than the other: ! comp ( a, b ) && ! comp ( b, a ) . std::multimap meets the requirements of Container , AllocatorAwareContainer , AssociativeContainer and ReversibleContainer . All member functions of std::multimap are constexpr : it is possible to create and use std::multimap objects in the evaluation of a constant expression. However, std::multimap objects generally cannot be constexpr , because any dynamically allocated storage must be released in the same evaluation of constant expression. (since C++26) Contents 1 Template parameters 2 Member types 3 Member classes 4 Member functions 4.1 Iterators 4.2 Capacity 4.3 Modifiers 4.4 Lookup 4.5 Observers 5 Non-member functions 6 Deduction guides 7 Notes 8 Example 9 Defect reports 10 See also [ edit ] Template parameters This section is incomplete Reason: Add descriptions of the template parameters. [ edit ] Member types Type Definition key_type Key [edit] mapped_type T [edit] value_type std:: pair < const Key, T > [edit] size_type Unsigned integer type (usually std::size_t ) [edit] difference_type Signed integer type (usually std::ptrdiff_t ) [edit] key_compare Compare [edit] allocator_type Allocator [edit] reference value_type & [edit] const_reference const value_type & [edit] pointer Allocator::pointer (until C++11) std:: allocator_traits < Allocator > :: pointer (since C++11) [edit] const_pointer Allocator::const_pointer (until C++11) std:: allocator_traits < Allocator > :: const_pointer (since C++11) [edit] iterator LegacyBidirectionalIterator and ConstexprIterator (since C++26) to value_type [edit] const_iterator LegacyBidirectionalIterator and ConstexprIterator (since C++26) to const value_type [edit] reverse_iterator std:: reverse_iterator < iterator > [edit] const_reverse_iterator std:: reverse_iterator < const_iterator > [edit] node_type (since C++17) a specialization of node handle representing a container node [edit] [ edit ] Member classes value_compare compares objects of type value_type (class) [edit] [ edit ] Member functions (constructor) constructs the multimap (public member function) [edit] (destructor) destructs the multimap (public member function) [edit] operator= assigns values to the container (public member function) [edit] get_allocator returns the associated allocator (public member function) [edit] Iterators begin cbegin (C++11) returns an iterator to the beginning (public member function) [edit] end cend (C++11) returns an iterator to the end (public member function) [edit] rbegin crbegin (C++11) returns a reverse iterator to the beginning (public member function) [edit] rend crend (C++11) returns a reverse iterator to the end (public member function) [edit] Capacity empty checks whether the container is empty (public member function) [edit] size returns the number of elements (public member function) [edit] max_size returns the maximum possible number of elements (public member function) [edit] Modifiers clear clears the contents (public member function) [edit] insert inserts elements or nodes (since C++17) (public member function) [edit] insert_range (C++23) inserts a range of elements (public member function) [edit] emplace (C++11) constructs element in-place (public member function) [edit] emplace_hint (C++11) constructs elements in-place using a hint (public member function) [edit] erase erases elements (public member function) [edit] swap swaps the contents (public member function) [edit] extract (C++17) extracts nodes from the container (public member function) [edit] merge (C++17) splices nodes from another container (public member function) [edit] Lookup count returns the number of elements matching specific key (public member function) [edit] find finds element with specific key (public member function) [edit] contains (C++20) checks if the container contains element with specific key (public member function) [edit] equal_range returns range of elements matching a specific key (public member function) [edit] lower_bound returns an iterator to the first element not less than the given key (public member function) [edit] upper_bound returns an iterator to the first element greater than the given key (public member function) [edit] Observers key_comp returns the function that compares keys (public member function) [edit] value_comp returns the function that compares keys in objects of type value_type (public member function) [edit] [ edit ] Non-member functions operator== operator!= operator< operator<= operator> operator>= operator<=> (removed in C++20) (removed in C++20) (removed in C++20) (removed in C++20) (removed in C++20) (C++20) lexicographically compares the values of two multimap s (function template) [edit] std::swap (std::multimap) specializes the std::swap algorithm (function template) [edit] erase_if (std::multimap) (C++20) erases all elements satisfying specific criteria (function template) [edit] Deduction guides (since C++17) [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_containers_ranges 202202L (C++23) Ranges construction and insertion for containers __cpp_lib_constexpr_map 202502L (C++26) constexpr std::multimap [ edit ] Example This section is incomplete Reason: no example [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 230 C++98 Key was not required to be CopyConstructible (a key of type Key might not be able to be constructed) Key is also required to be CopyConstructible [ edit ] See also map collection of key-value pairs, sorted by keys, keys are unique (class template) [edit] unordered_multimap (C++11) collection of key-value pairs, hashed by keys (class template) [edit] flat_multimap (C++23) adapts two containers to provide a collection of key-value pairs, sorted by keys (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/multimap&oldid=182866 " Categories : Todo with reason Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Polski Português Русский 中文 This page was last modified on 26 April 2025, at 15:19. Privacy policy About cppreference.com Disclaimers