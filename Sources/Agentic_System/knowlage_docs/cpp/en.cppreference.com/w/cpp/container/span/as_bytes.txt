std::as_bytes, std::as_writable_bytes - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: as_bytes, std:: as_writable_bytes From cppreference.com < cpp ‎ | container ‎ | span C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Containers library node-handle (C++17) Sequence array (C++11) vector vector <bool> inplace_vector (C++26) hive (C++26) deque forward_list (C++11) list Associative set multiset map multimap Unordered associative unordered_set (C++11) unordered_multiset (C++11) unordered_map (C++11) unordered_multimap (C++11) Adaptors stack queue priority_queue flat_set (C++23) flat_multiset (C++23) flat_map (C++23) flat_multimap (C++23) Views span (C++20) mdspan (C++23) Tables Iterator invalidation Member function table Non-member function table [edit] std::span Member functions span::span span::operator= Element access span::front span::back span::at (C++26) span::operator[] span::data Iterators span::begin span::cbegin (C++23) span::end span::cend (C++23) span::rbegin span::crbegin (C++23) span::rend span::crend (C++23) Observers span::empty span::size span::size_bytes Subviews span::first span::last span::subspan Non-member functions as_bytes as_writable_bytes Non-member constant dynamic_extent Deduction guides [edit] Defined in header <span> template < class T, std:: size_t N > std:: span < const std:: byte , S /* see below */ > as_bytes ( std:: span < T, N > s ) noexcept ; (1) (since C++20) template < class T, std:: size_t N > std:: span < std:: byte , S /* see below */ > as_writable_bytes ( std:: span < T, N > s ) noexcept ; (2) (since C++20) Obtains a view to the object representation of the elements of the span s . If N is std::dynamic_extent , the extent of the returned span S is also std::dynamic_extent ; otherwise it is sizeof ( T ) * N . as_writable_bytes only participates in overload resolution if std:: is_const_v < T > is false . [ edit ] Return value 1) A span constructed with { reinterpret_cast < const std:: byte * > ( s. data ( ) ) , s. size_bytes ( ) } . 2) A span constructed with { reinterpret_cast < std:: byte * > ( s. data ( ) ) , s. size_bytes ( ) } . [ edit ] Example Run this code #include <cstddef> #include <iomanip> #include <iostream> #include <span> void print ( float const x, std:: span < const std:: byte > const bytes ) { std:: cout << std:: setprecision ( 6 ) << std:: setw ( 8 ) << x << " = { " << std:: hex << std:: uppercase << std:: setfill ( '0' ) ; for ( auto const b : bytes ) std:: cout << std:: setw ( 2 ) << std:: to_integer < int > ( b ) << ' ' ; std:: cout << std:: dec << "} \n " ; } int main ( ) { /* mutable */ float data [ 1 ] { 3.141592f } ; auto const const_bytes = std :: as_bytes ( std:: span { data } ) ; print ( data [ 0 ] , const_bytes ) ; auto const writable_bytes = std :: as_writable_bytes ( std:: span { data } ) ; // Change the sign bit that is the MSB (IEEE 754 Floating-Point Standard). writable_bytes [ 3 ] | = std:: byte { 0B1000 '0000}; print(data[0], const_bytes); } Possible output: 3.14159 = { D8 0F 49 40 } -3.14159 = { D8 0F 49 C0 } [ edit ] See also start_lifetime_as start_lifetime_as_array (C++23) implicitly creates objects in given storage with the object representation reused (function template) [edit] byte (C++17) the byte type (enum) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/container/span/as_bytes&oldid=159753 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 28 September 2023, at 01:01. Privacy policy About cppreference.com Disclaimers