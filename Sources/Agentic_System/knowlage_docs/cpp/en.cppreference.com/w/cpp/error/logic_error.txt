std::logic_error - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: logic_error From cppreference.com < cpp ‎ | error C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Diagnostics library Exception handling exception uncaught_exception uncaught_exceptions ( until C++20* ) (C++17) exception_ptr (C++11) make_exception_ptr (C++11) current_exception (C++11) rethrow_exception (C++11) nested_exception (C++11) throw_with_nested (C++11) rethrow_if_nested (C++11) Exception handling failures terminate terminate_handler get_terminate (C++11) set_terminate bad_exception unexpected ( until C++17* ) unexpected_handler ( until C++17* ) get_unexpected ( until C++17* ) set_unexpected ( until C++17* ) Error numbers Error codes errno Assertions assert Exception categories logic_error invalid_argument domain_error length_error out_of_range runtime_error range_error overflow_error underflow_error tx_exception (TM TS) System error error_category (C++11) generic_category (C++11) system_category (C++11) error_condition (C++11) errc (C++11) error_code (C++11) system_error (C++11) Stacktrace stacktrace_entry (C++23) basic_stacktrace (C++23) Debugging support is_debugger_present (C++26) breakpoint_if_debugging (C++26) breakpoint (C++26) [edit] Defined in header <stdexcept> class logic_error ; Defines a type of object to be thrown as exception. It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable. No standard library components throw this exception directly, but the exception types std::invalid_argument , std::domain_error , std::length_error , std::out_of_range , std::future_error , and std::experimental::bad_optional_access are derived from std::logic_error . All member functions of std::logic_error are constexpr : it is possible to create and use std::logic_error objects in the evaluation of a constant expression. However, std::logic_error objects generally cannot be constexpr , because any dynamically allocated storage must be released in the same evaluation of constant expression. (since C++26) Inheritance diagram Contents 1 Member functions 2 std::logic_error:: logic_error 2.1 Parameters 2.2 Exceptions 2.3 Notes 3 std::logic_error:: operator= 3.1 Parameters 3.2 Return value 3.3 Notes 4 Inherited from std:: exception 4.1 Member functions 4.2 Notes 4.3 Defect reports [ edit ] Member functions (constructor) constructs a new logic_error object with the given message (public member function) operator= replaces the logic_error object (public member function) std::logic_error:: logic_error logic_error ( const std:: string & what_arg ) ; (1) (constexpr since C++26) logic_error ( const char * what_arg ) ; (2) (constexpr since C++26) logic_error ( const logic_error & other ) ; (3) (noexcept since C++11) (constexpr since C++26) 1) Constructs the exception object with what_arg as explanatory string. After construction, std:: strcmp ( what ( ) , what_arg. c_str ( ) ) == 0 . 2) Constructs the exception object with what_arg as explanatory string. After construction, std:: strcmp ( what ( ) , what_arg ) == 0 . 3) Copy constructor. If * this and other both have dynamic type std::logic_error then std:: strcmp ( what ( ) , other. what ( ) ) == 0 . No exception can be thrown from the copy constructor. Parameters what_arg - explanatory string other - another exception object to copy Exceptions 1,2) May throw std::bad_alloc . Notes Because copying std::logic_error is not permitted to throw exceptions, this message is typically stored internally as a separately-allocated reference-counted string. This is also why there is no constructor taking std::string&& : it would have to copy the content anyway. Before the resolution of LWG issue 254 , the non-copy constructor can only accept std::string . It makes dynamic allocation mandatory in order to construct a std::string object. After the resolution of LWG issue 471 , a derived standard exception class must have a publicly accessible copy constructor. It can be implicitly defined as long as the explanatory strings obtained by what() are the same for the original object and the copied object. std::logic_error:: operator= logic_error & operator = ( const logic_error & other ) ; (noexcept since C++11) (constexpr since C++26) Assigns the contents with those of other . If * this and other both have dynamic type std::logic_error then std:: strcmp ( what ( ) , other. what ( ) ) == 0 after assignment. No exception can be thrown from the copy assignment operator. Parameters other - another exception object to assign with Return value * this Notes After the resolution of LWG issue 471 , a derived standard exception class must have a publicly accessible copy assignment operator. It can be implicitly defined as long as the explanatory strings obtained by what() are the same for the original object and the copied object. Inherited from std:: exception Member functions (destructor) [virtual] destroys the exception object (virtual public member function of std::exception ) [edit] what [virtual] returns an explanatory string (virtual public member function of std::exception ) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_constexpr_exceptions 202502L (C++26) constexpr exception types [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 254 C++98 the constructor accepting const char * was missing added LWG 471 C++98 the explanatory strings of std::logic_error 's copies were implementation-defined they are the same as that of the original std::logic_error object Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/error/logic_error&oldid=182948 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 1 May 2025, at 10:06. Privacy policy About cppreference.com Disclaimers