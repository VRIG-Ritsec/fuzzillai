std::execution::read_env - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std::execution:: read_env From cppreference.com < cpp ‎ | execution C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Execution control library Execution concepts scheduler receiver receiver_of operation_state sender sender_in sender_to Execution components Execution contexts run_loop Execution domains default_domain Forward progress guarantee forward_progress_guarantee Environments empty_env get_env env_of_t Queries std::stop_token_of_t std::get_stop_token std::get_allocator std::forwarding_query get_scheduler get_domain get_forward_progress_guarantee get_delegation_scheduler get_completion_scheduler Completion signatures completion_signatures completion_signatures_of_t transform_completion_signatures transform_completion_signatures_of value_types_of_t error_types_of_t tag_of_t sends_stopped Sender adaptor closures sender_adaptor_closure Coroutine utility as_awaitable with_awaitable_senders Core operations Operation state connect connect_result_t start Completion set_value set_error set_stopped Transformation transform_env transform_sender apply_sender Sender algorithms Sender factories just just_error just_stopped read_env schedule schedule_result_t Sender adaptors starts_on continues_on on then upon_error upon_stopped let_value let_error let_stopped schedule_from when_all when_all_with_variant into_variant stopped_as_optional stopped_as_error bulk split Sender consumers this_thread::sync_wait this_thread::sync_wait_with_variant [edit] Defined in header <execution> inline constexpr /*unspecified*/ read_env { } ; (since C++26) (customization point object) Call signature execution :: sender auto read_env ( auto && query ) ; (since C++26) A sender factory that returns a sender that reaches into a receiver’s environment and pulls out the current value associated with a given query object . For any query object q , the expression read_env ( q ) is expression-equivalent to /*make-sender*/ ( read_env, q ) . Customization point objects The name execution::read_env denotes a customization point object , which is a const function object of a literal semiregular class type. See CustomizationPointObject for details. [ edit ] Example An example usage of this factory is to schedule dependent work on the receiver's scheduler, which can be obtained with read_env ( get_scheduler ) : std :: execution :: sender auto task = std :: execution :: read_env ( std :: execution :: get_scheduler ) | std :: execution :: let_value ( [ ] ( auto sched ) { return std :: execution :: starts_on ( sched, /*some nested work here*/ ) ; } ) ; std :: this_thread :: sync_wait ( std :: move ( task ) ) ; // wait for it to finish Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/execution/read_env&oldid=176811 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 4 October 2024, at 17:49. Privacy policy About cppreference.com Disclaimers