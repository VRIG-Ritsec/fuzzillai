Extensions for networking - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions Extensions for networking From cppreference.com < cpp â€Ž | experimental C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Experimental Technical Specification Filesystem library (filesystem TS) Library fundamentals (library fundamentals TS) Library fundamentals 2 (library fundamentals TS v2) Library fundamentals 3 (library fundamentals TS v3) Extensions for parallelism (parallelism TS) Extensions for parallelism 2 (parallelism TS v2) Extensions for concurrency (concurrency TS) Extensions for concurrency 2 (concurrency TS v2) Concepts (concepts TS) Ranges (ranges TS) Reflection (reflection TS) Mathematical special functions (special functions TR) Experimental Non-TS Pattern Matching Linear Algebra std::execution Contracts 2D Graphics [edit] Networking Template:cpp/experimental/networking/navbar content [edit] The C++ Extensions for Networking, ISO/IEC TS 19216:2018, defines new components for the C++ standard library listed on this page. The Networking TS is based on the C++14 standard as modified by version 1 of the Library Fundamentals TS . Its design is based on the Asio library . Contents 1 Library named requirements 2 Convenience headers 3 Asynchronous model 3.1 Asynchronous result 3.2 Execution context and services 3.3 Executors 3.4 Dispatch/post/defer 3.5 Strand 3.6 std::future interop 4 Basic I/O services 5 Buffers and buffer-oriented streams 5.1 Stream error codes 5.2 Buffers 5.2.1 Buffer type traits 5.2.2 Buffer sequence access 5.2.3 Buffer operations 5.2.4 Dynamic buffers 5.3 Buffer I/O 6 Sockets and socket streams 6.1 Socket error codes 6.2 Sockets 6.3 Socket streams 6.4 Connect operations 7 Internet protocol 7.1 Resolver error codes 7.2 IP addresses 7.2.1 Address iteration 7.3 Networks 7.4 Endpoints 7.5 Name resolution 7.6 Host name 7.7 TCP and UDP sockets 7.7.1 Socket options [ edit ] Library named requirements The following named requirements are used in the normative text of the Networking TS to define the expectations of the library. The burden is on the programmer to ensure that library templates are instantiated with template arguments that satisfy these requirements. Failure to do so may result in very complex compiler diagnostics or in undefined behavior at runtime. AcceptableProtocol (named requirement) [edit] AsyncReadStream (named requirement) [edit] AsyncWriteStream (named requirement) [edit] CompletionCondition (named requirement) [edit] CompletionToken (named requirement) [edit] ConnectCondition (named requirement) [edit] ConstBufferSequence represents a set of memory regions that may be used as input to an operation (named requirement) [edit] DynamicBuffer (named requirement) [edit] EndpointSequence (named requirement) [edit] ExecutionContext (named requirement) [edit] Executor (named requirement) [edit] GettableSocketOption (named requirement) [edit] InternetProtocol (named requirement) [edit] IoControlCommand (named requirement) [edit] MutableBufferSequence (named requirement) [edit] ProtoAllocator (named requirement) [edit] Protocol (named requirement) [edit] Service (named requirement) [edit] SettableSocketOption (named requirement) [edit] Signature (named requirement) [edit] SyncReadStream (named requirement) [edit] SyncWriteStream (named requirement) [edit] WaitTraits (named requirement) [edit] [ edit ] Convenience headers <experimental/net> convenience header that includes every other Networking TS header <experimental/netfwd> contains forward declarations of major Networking TS components [ edit ] Asynchronous model Defined in header <experimental/executor> Defined in namespace std::experimental::net Asynchronous result async_result (class template) [edit] async_completion (class template) [edit] associated_allocator (class template) [edit] get_associated_allocator (function template) [edit] Execution context and services execution_context (class) [edit] use_service (function template) [edit] make_service (function template) [edit] has_service (function template) [edit] service_already_exists (class) [edit] Executors is_executor (class template) [edit] executor_arg_t (class) [edit] uses_executor (class template) [edit] associated_executor (class template) [edit] get_associated_executor (function template) [edit] executor_binder (class template) [edit] bind_executor (function template) [edit] executor_work_guard (class template) [edit] system_executor (class) [edit] system_context (class) [edit] executor (class) [edit] bad_executor (class) [edit] Dispatch/post/defer dispatch (function template) [edit] post (function template) [edit] defer (function template) [edit] Strand strand (class template) [edit] std::future interop use_future_t (class template) [edit] [ edit ] Basic I/O services Defined in header <experimental/io_context> Defined in namespace std::experimental::net io_context (class) [edit] [ edit ] Buffers and buffer-oriented streams Defined in header <experimental/buffer> Defined in namespace std::experimental::net Stream error codes stream_errc (function) [edit] stream_category (enum) [edit] Buffers mutable_buffer (class) [edit] const_buffer (class) [edit] buffer (function template) [edit] Buffer type traits is_mutable_buffer_sequence (class template) [edit] is_const_buffer_sequence (class template) [edit] is_dynamic_buffer (class template) [edit] Buffer sequence access buffer_sequence_begin (function template) [edit] buffer_sequence_end (function template) [edit] Buffer operations buffer_size (function template) [edit] buffer_copy (function template) [edit] Dynamic buffers dynamic_vector_buffer (class template) [edit] dynamic_string_buffer (class template) [edit] dynamic_buffer (function template) [edit] Buffer I/O transfer_all (class) [edit] transfer_at_least (class) [edit] transfer_exactly (class) [edit] read (function template) [edit] read_until (function template) [edit] async_read (function template) [edit] async_read_until (function template) [edit] write (function template) [edit] async_write (function template) [edit] [ edit ] Sockets and socket streams Defined in header <experimental/socket> Defined in namespace std::experimental::net Socket error codes socket_errc (enum) [edit] socket_category (function) [edit] Sockets socket_base (class) [edit] basic_socket (class template) [edit] basic_datagram_socket (class template) [edit] basic_stream_socket (class template) [edit] basic_socket_acceptor (class template) [edit] Socket streams basic_socket_streambuf (class template) [edit] basic_socket_iostream (class template) [edit] Connect operations connect (function template) [edit] async_connect (function template) [edit] [ edit ] Internet protocol Defined in header <experimental/internet> Defined in namespace std::experimental::net::ip Resolver error codes resolver_errc (enum) [edit] resolver_category (function) [edit] IP addresses address_v4 (class) [edit] make_address_v4 (function template) [edit] address_v6 (class) [edit] make_address_v6 (function template) [edit] address (class) [edit] bad_address_cast (class) [edit] make_address (function template) [edit] Address iteration basic_address_iterator (class template) [edit] basic_address_range (class template) [edit] Networks network_v4 (class) [edit] make_network_v4 (function template) [edit] network_v6 (class) [edit] make_network_v6 (function template) [edit] Endpoints basic_endpoint (class template) [edit] Name resolution basic_resolver_entry (class template) [edit] basic_resolver_results (class template) [edit] resolver_base (class) [edit] basic_resolver (class template) [edit] Host name host_name (function template) [edit] TCP and UDP sockets tcp (class) [edit] udp (class) [edit] Socket options Defined in namespace std::experimental::net::ip v6_only (class) [edit] Defined in namespace std::experimental::net::ip::unicast hops (class) [edit] Defined in namespace std::experimental::net::ip::multicast join_group (class) [edit] leave_group (class) [edit] outbound_interface (class) [edit] hops (class) [edit] enable_loopback (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/networking&oldid=158791 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information This page was last modified on 11 September 2023, at 11:28. Privacy policy About cppreference.com Disclaimers