std::println(std::ostream) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: println (std::ostream) From cppreference.com < cpp ‎ | io ‎ | basic ostream C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Input/output library I/O manipulators Print functions (C++23) C-style I/O Buffers basic_streambuf basic_filebuf basic_stringbuf basic_spanbuf (C++23) strstreambuf ( C++98/26* ) basic_syncbuf (C++20) Streams Abstractions ios_base basic_ios basic_istream basic_ostream basic_iostream File I/O basic_ifstream basic_ofstream basic_fstream String I/O basic_istringstream basic_ostringstream basic_stringstream Array I/O basic_ispanstream (C++23) basic_ospanstream (C++23) basic_spanstream (C++23) istrstream ( C++98/26* ) ostrstream ( C++98/26* ) strstream ( C++98/26* ) Synchronized Output basic_osyncstream (C++20) Types streamoff streamsize fpos Error category interface iostream_category (C++11) io_errc (C++11) [edit] std::basic_ostream Global objects cout wcout cerr wcerr clog wclog Member functions basic_ostream::basic_ostream basic_ostream::~basic_ostream basic_ostream::operator= (C++11) Formatted output basic_ostream::operator<< Unformatted output basic_ostream::put basic_ostream::write Positioning basic_ostream::tellp basic_ostream::seekp Miscellaneous basic_ostream::flush basic_ostream::swap (C++11) Member classes basic_ostream::sentry Non-member functions operator<< (std::basic_ostream) print (std::ostream) (C++23) println (std::ostream) (C++23) vprint_unicode (std::ostream) (C++23) vprint_nonunicode (std::ostream) (C++23) [edit] Defined in header <ostream> template < class ... Args > void println ( std:: ostream & os, std:: format_string < Args... > fmt, Args && ... args ) ; (1) (since C++23) void println ( std:: ostream & os ) ; (2) (since C++26) Formats args according to the format string fmt with appended ' \n ' (which means that each output ends with a new-line), and inserts the result into os stream. 1) Equivalent to: std::print ( os, "{} \n " , std:: format ( os. getloc ( ) , fmt, args... ) ) ; 2) Equivalent to: std::print ( os, " \n " ) ; The behavior is undefined if std:: formatter < Ti, char > does not meet the BasicFormatter requirements for any Ti in Args (as required by std:: make_format_args ). Contents 1 Parameters 2 Exceptions 3 Notes 4 Example 5 Defect reports 6 See also [ edit ] Parameters os - output stream to insert data into fmt - [edit] an object that represents the format string. The format string consists of ordinary characters (except { and } ), which are copied unchanged to the output, escape sequences { { and } } , which are replaced with { and } respectively in the output, and replacement fields. Each replacement field has the following format: { arg-id (optional) } (1) { arg-id (optional) : format-spec } (2) 1) replacement field without a format specification 2) replacement field with a format specification arg-id - specifies the index of the argument in args whose value is to be used for formatting; if it is omitted, the arguments are used in order. The arg-id ﻿s in a format string must all be present or all be omitted. Mixing manual and automatic indexing is an error. format-spec - the format specification defined by the std::formatter specialization for the corresponding argument. Cannot start with } . For basic types and standard string types, the format specification is interpreted as standard format specification . For chrono types, the format specification is interpreted as chrono format specification . For range types, the format specification is interpreted as range format specification . For std::pair and std::tuple , the format specification is interpreted as tuple format specification . For std::thread::id and std::stacktrace_entry , see thread id format specification and stacktrace entry format specification . For std::basic_stacktrace , no format specifier is allowed. (since C++23) For std::filesystem::path , see path format specification . (since C++26) For other formattable types, the format specification is determined by user-defined formatter specializations. args... - arguments to be formatted [ edit ] Exceptions std::bad_alloc on allocation failure. Propagate any exception thrown by any formatter , e.g. std::format_error , without regard to the value of os. exceptions ( ) and without turning on ios_base::badbit in the error state of os . May throw ios_base::failure caused by os. setstate ( ios_base :: badbit ) which is called if an insertion into os fails. [ edit ] Notes Although overload ( 2 ) is added in C++26, all known implementations make it available in C++23 mode. Feature-test macro Value Std Feature __cpp_lib_print 202207L (C++23) Formatted output __cpp_lib_format 202207L (C++23) Exposing std::basic_format_string [ edit ] Example This section is incomplete Reason: no example [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 4088 C++23 ( 1 ) ignored the locale imbued in os in formatting arguments such locale is used [ edit ] See also print (std::ostream) (C++23) outputs formatted representation of the arguments (function template) [edit] println (C++23) same as std::print except that each print is terminated by additional new line (function template) [edit] format (C++20) stores formatted representation of the arguments in a new string (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/io/basic_ostream/println&oldid=180555 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français 日本語 Русский 中文 This page was last modified on 12 February 2025, at 02:37. Privacy policy About cppreference.com Disclaimers