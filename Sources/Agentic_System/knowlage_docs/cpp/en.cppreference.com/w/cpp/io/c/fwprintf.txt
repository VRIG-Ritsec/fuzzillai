std::wprintf, std::fwprintf, std::swprintf - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: wprintf, std:: fwprintf, std:: swprintf From cppreference.com < cpp ‎ | io ‎ | c C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Input/output library I/O manipulators Print functions (C++23) C-style I/O Buffers basic_streambuf basic_filebuf basic_stringbuf basic_spanbuf (C++23) strstreambuf ( C++98/26* ) basic_syncbuf (C++20) Streams Abstractions ios_base basic_ios basic_istream basic_ostream basic_iostream File I/O basic_ifstream basic_ofstream basic_fstream String I/O basic_istringstream basic_ostringstream basic_stringstream Array I/O basic_ispanstream (C++23) basic_ospanstream (C++23) basic_spanstream (C++23) istrstream ( C++98/26* ) ostrstream ( C++98/26* ) strstream ( C++98/26* ) Synchronized Output basic_osyncstream (C++20) Types streamoff streamsize fpos Error category interface iostream_category (C++11) io_errc (C++11) [edit] C-style I/O Types and objects FILE fpos_t stdin stdout stderr Functions File access fopen freopen fclose fflush fwide setbuf setvbuf Direct input/output fread fwrite Unformatted input/output fgetc getc fgets fputc putc fputs getchar gets (until C++14) putchar puts ungetc fgetwc getwc fgetws fputwc putwc fputws getwchar putwchar ungetwc Formatted input scanf fscanf sscanf vscanf vfscanf vsscanf (C++11) (C++11) (C++11) wscanf fwscanf swscanf vwscanf vfwscanf vswscanf (C++11) (C++11) (C++11) Formatted output printf fprintf sprintf snprintf (C++11) vprintf vfprintf vsprintf vsnprintf (C++11) wprintf fwprintf swprintf vwprintf vfwprintf vswprintf File positioning ftell fgetpos fseek fsetpos rewind Error handling clearerr feof ferror perror Operations on files remove rename tmpfile tmpnam [edit] Defined in header <cwchar> int wprintf ( const wchar_t * format, ... ) ; (1) int fwprintf ( std:: FILE * stream, const wchar_t * format, ... ) ; (2) int swprintf ( wchar_t * buffer, std:: size_t size, const wchar_t * format, ... ) ; (3) Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks. 1) Writes the results to stdout . 2) Writes the results to a file stream stream . 3) Writes the results to a wide string buffer . At most size - 1 wide characters are written followed by null wide character. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters stream - output file stream to write to buffer - pointer to a wide character string to write to size - up to size - 1 characters may be written, plus the null terminator format - pointer to a null-terminated wide string specifying how to interpret the data ... - arguments specifying data to print. If any argument after default conversions is not the type expected by the corresponding conversion specifier, or if there are fewer arguments than required by format , the behavior is undefined. If there are more arguments than required by format , the extraneous arguments are evaluated and ignored The format string consists of ordinary wide characters (except % ), which are copied unchanged into the output stream, and conversion specifications. Each conversion specification has the following format: introductory % character. (optional) one or more flags that modify the behavior of the conversion: - : the result of the conversion is left-justified within the field (by default it is right-justified). + : the sign of signed conversions is always prepended to the result of the conversion (by default the result is preceded by minus only when it is negative). space : if the result of a signed conversion does not start with a sign character, or is empty, space is prepended to the result. It is ignored if + flag is present. # : alternative form of the conversion is performed. See the table below for exact effects otherwise the behavior is undefined. 0 : for integer and floating-point number conversions, leading zeros are used to pad the field instead of space characters. For integer numbers it is ignored if the precision is explicitly specified. For other conversions using this flag results in undefined behavior. It is ignored if - flag is present. (optional) integer value or * that specifies minimum field width. The result is padded with space characters (by default), if required, on the left when right-justified, or on the right if left-justified. In the case when * is used, the width is specified by an additional argument of type int , which appears before the argument to be converted and the argument supplying precision if one is supplied. If the value of the argument is negative, it results with the - flag specified and positive field width (Note: This is the minimum width: The value is never truncated.). (optional) . followed by integer number or * , or neither that specifies precision of the conversion. In the case when * is used, the precision is specified by an additional argument of type int , which appears before the argument to be converted, but after the argument supplying minimum field width if one is supplied. If the value of this argument is negative, it is ignored. If neither a number nor * is used, the precision is taken as zero. See the table below for exact effects of precision . (optional) length modifier that specifies the size of the argument (in combination with the conversion format specifier, it specifies the type of the corresponding argument). conversion format specifier. The following format specifiers are available: Conversion Specifier Explanation Expected Argument Type Length Modifier→ hh h none l ll j z t L Only available since C++11→ Yes Yes Yes Yes Yes % Writes literal % . The full conversion specification must be %% . N/A N/A N/A N/A N/A N/A N/A N/A N/A c Writes a single character . The argument is first converted to wchar_t as if by calling std::btowc . If the l modifier is used, the std::wint_t argument is first converted to wchar_t . N/A N/A int std::wint_t N/A N/A N/A N/A N/A s Writes a character string . The argument must be a pointer to the initial element of a character array containing a multibyte character sequence beginning in the initial shift state, which is converted to wide character array as if by a call to std::mbrtowc with zero-initialized conversion state. Precision specifies the maximum number of wide characters to be written. If Precision is not specified, writes every wide characters up to and not including the first null terminator. If the l specifier is used, the argument must be a pointer to the initial element of an array of wchar_t . N/A N/A char * wchar_t * N/A N/A N/A N/A N/A d i Converts a signed integer into decimal representation [-]dddd . Precision specifies the minimum number of digits to appear. The default precision is 1 . If both the converted value and the precision are ​ 0 ​ the conversion results in no characters. For the z modifier, the expected argument type is the signed version of std::size_t . signed char short int long long long std::intmax_t ※ std::ptrdiff_t N/A o Converts an unsigned integer into octal representation oooo . Precision specifies the minimum number of digits to appear. The default precision is 1 . If both the converted value and the precision are ​ 0 ​ the conversion results in no characters. In the alternative implementation precision is increased if necessary, to write one leading zero. In that case if both the converted value and the precision are ​ 0 ​ , single ​ 0 ​ is written. unsigned char unsigned short unsigned int unsigned long unsigned long long std::uintmax_t std::size_t unsigned version of std::ptrdiff_t N/A x X Converts an unsigned integer into hexadecimal representation hhhh . For the x conversion letters abcdef are used. For the X conversion letters ABCDEF are used. Precision specifies the minimum number of digits to appear. The default precision is 1 . If both the converted value and the precision are ​ 0 ​ the conversion results in no characters. In the alternative implementation 0x or 0X is prefixed to results if the converted value is nonzero. N/A u Converts an unsigned integer into decimal representation dddd . Precision specifies the minimum number of digits to appear. The default precision is 1 . If both the converted value and the precision are ​ 0 ​ the conversion results in no characters. N/A f F (C++11) Converts floating-point number to the decimal notation in the style [-]ddd.ddd . Precision specifies the exact number of digits to appear after the decimal point character. The default precision is 6 . In the alternative implementation decimal point character is written even if no digits follow it. For infinity and not-a-number conversion style see notes . N/A N/A double double (C++11) N/A N/A N/A N/A long double e E Converts floating-point number to the decimal exponent notation. For the e conversion style [-]d.ddd ﻿ e ±dd is used. For the E conversion style [-]d.ddd ﻿ E ±dd is used. The exponent contains at least two digits, more digits are used only if necessary. If the value is ​ 0 ​ , the exponent is also ​ 0 ​ . Precision specifies the exact number of digits to appear after the decimal point character. The default precision is 6 . In the alternative implementation decimal point character is written even if no digits follow it. For infinity and not-a-number conversion style see notes . N/A N/A N/A N/A N/A N/A a A (C++11) Converts floating-point number to the hexadecimal exponent notation. For the a conversion style [-] ﻿ 0x h.hhh ﻿ p ±d is used. For the A conversion style [-] ﻿ 0X h.hhh ﻿ P ±d is used. The first hexadecimal digit is not 0 if the argument is a normalized floating-point value. If the value is ​ 0 ​ , the exponent is also ​ 0 ​ . Precision specifies the exact number of digits to appear after the hexadecimal point character. The default precision is sufficient for exact representation of the value. In the alternative implementation decimal point character is written even if no digits follow it. For infinity and not-a-number conversion style see notes . N/A N/A N/A N/A N/A N/A g G Converts floating-point number to decimal or decimal exponent notation depending on the value and the precision . For the g conversion style conversion with style e or f will be performed. For the G conversion style conversion with style E or f (until C++11) F (since C++11) will be performed. Let P equal the precision if nonzero, 6 if the precision is not specified, or 1 if the precision is ​ 0 ​ . Then, if a conversion with style E would have an exponent of X : If P > X ≥ −4 , the conversion is with style f or F (since C++11) and precision P − 1 − X . Otherwise, the conversion is with style e or E and precision P − 1 . Unless alternative representation is requested the trailing zeros are removed, also the decimal point character is removed if no fractional part is left. For infinity and not-a-number conversion style see notes . N/A N/A N/A N/A N/A N/A n Returns the number of characters written so far by this call to the function. The result is written to the value pointed to by the argument. The specification may not contain any flag , field width , or precision . For the z modifier, the expected argument type is S * , where S is the signed version of std:: size_t . signed char * short * int * long * long long * std::intmax_t * ※ std::ptrdiff_t * N/A p Writes an implementation defined character sequence defining a pointer . N/A N/A void * N/A N/A N/A N/A N/A N/A Notes The floating-point conversion functions convert infinity to inf or infinity . Which one is used is implementation defined. Not-a-number is converted to nan or nan( char_sequence ) . Which one is used is implementation defined. The conversions F , E , G , A output INF , INFINITY , NAN instead. The conversion specifier used to print char , unsigned char , signed char , short , and unsigned short expects promoted types of default argument promotions , but before printing its value will be converted to char , unsigned char , signed char , short , and unsigned short . It is safe to pass values of these types because of the promotion that takes place when a variadic function is called. The correct conversion specifications for the fixed-width character types ( std::int8_t , etc) are defined in the header <cinttypes> (although PRIdMAX , PRIuMAX , etc is synonymous with %jd , %ju , etc). The memory-writing conversion specifier %n is a common target of security exploits where format strings depend on user input. There is a sequence point after the action of each conversion specifier; this permits storing multiple %n results in the same variable or, as an edge case, printing a string modified by an earlier %n within the same call. If a conversion specification is invalid, the behavior is undefined. [ edit ] Return value 1,2) Number of wide characters written if successful or negative value if an error occurred. 3) Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than size (including when size is zero). [ edit ] Notes While narrow strings provide std::snprintf , which makes it possible to determine the required output buffer size, there is no equivalent for wide strings, and in order to determine the buffer size, the program may need to call std::swprintf , check the result value, and reallocate a larger buffer, trying again until successful. [ edit ] Example Run this code #include <clocale> #include <cwchar> #include <iostream> #include <locale> int main ( ) { char narrow_str [ ] = "z \u00df \u6c34 \U0001f34c " ; // or "zß水🍌"; // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9f\x8d\x8c"; wchar_t warr [ 29 ] ; // the expected string is 28 characters plus 1 null terminator std:: setlocale ( LC_ALL , "en_US.utf8" ) ; std :: swprintf ( warr, sizeof warr / sizeof * warr, L "Converted from UTF-8: '%s'" , narrow_str ) ; std:: wcout . imbue ( std:: locale ( "en_US.utf8" ) ) ; std:: wcout << warr << ' \n ' ; } Output: Converted from UTF-8: 'zß水🍌' [ edit ] See also printf fprintf sprintf snprintf (C++11) prints formatted output to stdout , a file stream or a buffer (function) [edit] vwprintf vfwprintf vswprintf prints formatted wide character output to stdout , a file stream or a buffer using variable argument list (function) [edit] fputws writes a wide string to a file stream (function) [edit] C documentation for wprintf , fwprintf , swprintf Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/io/c/fwprintf&oldid=158706 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 10 September 2023, at 11:56. Privacy policy About cppreference.com Disclaimers