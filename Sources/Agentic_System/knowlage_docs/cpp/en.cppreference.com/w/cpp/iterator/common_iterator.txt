std::common_iterator - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: common_iterator From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] std::common_iterator Member functions common_iterator::common_iterator common_iterator::operator= common_iterator::operator* common_iterator::operator-> common_iterator::operator++ common_iterator::operator++(int) Non-member functions operator== (C++20) operator- (C++20) iter_move (C++20) iter_swap (C++20) Helper classes incrementable_traits <std::common_iterator> (C++20) iterator_traits <std::common_iterator> (C++20) [edit] Defined in header <iterator> template < std:: input_or_output_iterator I, std:: sentinel_for < I > S > requires ( ! std:: same_as < I, S > && std:: copyable < I > ) class common_iterator ; (since C++20) std::common_iterator is an iterator I / sentinel S adaptor that may represent a non-common range (where the types of I and S differ) as a common_range , by containing either an iterator or a sentinel, and defining the appropriate equality comparison operators operator == . std::common_iterator can be used as a "bridge" between sequences represented by iterator/sentinel pair and legacy functions that expect common_range -like sequences. Contents 1 Data members 2 Member functions 3 Non-member functions 4 Helper classes 5 Example 6 References 7 See also [ edit ] Data members Member name Definition var an object of type std:: variant < I, S > ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs a new common_iterator (public member function) [edit] operator= assigns another common_iterator (public member function) [edit] operator* operator-> accesses the pointed-to element (public member function) [edit] operator++ operator++ (int) advances the common_iterator (public member function) [edit] [ edit ] Non-member functions operator== (C++20) compares the underlying iterators or sentinels (function template) [edit] operator- (C++20) computes the distance between two iterator adaptors (function template) [edit] iter_move (C++20) casts the result of dereferencing the underlying iterator to its associated rvalue reference type (function) [edit] iter_swap (C++20) swaps the objects pointed to by two underlying iterators (function template) [edit] [ edit ] Helper classes std::incrementable_traits <std::common_iterator> (C++20) computes the associated difference type of the std::common_iterator type (class template specialization) [edit] std::iterator_traits <std::common_iterator> (C++20) provides uniform interface to the properties of the std::common_iterator type (class template specialization) [edit] [ edit ] Example Run this code #include <algorithm> #include <iostream> #include <iterator> #include <list> #include <string> template < class ForwardIter > void fire ( ForwardIter first, ForwardIter last ) { std:: copy ( first, last, std:: ostream_iterator < std:: string > { std:: cout , " " } ) ; } int main ( ) { std:: list < std:: string > stars { "Pollux" , "Arcturus" , "Mira" , "Aldebaran" , "Sun" } ; using IT = std :: common_iterator < std:: counted_iterator < std:: list < std:: string > :: iterator > , std:: default_sentinel_t > ; fire ( IT ( std:: counted_iterator ( stars. begin ( ) , stars. size ( ) - 1 ) ) , IT ( std:: default_sentinel ) ) ; } Output: Pollux Arcturus Mira Aldebaran [ edit ] References C++23 standard (ISO/IEC 14882:2024): 23.5.5 Common iterators [iterators.common] C++20 standard (ISO/IEC 14882:2020): 23.5.4 Common iterators [iterators.common] [ edit ] See also ranges::common_range (C++20) specifies that a range has identical iterator and sentinel types (concept) [edit] ranges::common_view views::common (C++20) converts a view into a common_range (class template) (range adaptor object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_iterator&oldid=172571 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Česky Deutsch Español Français Italiano 日本語 한국어 Polski Português Русский 中文 This page was last modified on 20 June 2024, at 13:19. Privacy policy About cppreference.com Disclaimers