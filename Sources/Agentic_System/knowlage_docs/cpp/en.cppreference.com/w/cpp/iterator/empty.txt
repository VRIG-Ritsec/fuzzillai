std::empty - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: empty From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] Defined in header <array> Defined in header <deque> Defined in header <flat_map> Defined in header <flat_set> Defined in header <forward_list> Defined in header <inplace_vector> Defined in header <iterator> Defined in header <list> Defined in header <map> Defined in header <regex> Defined in header <set> Defined in header <span> Defined in header <string> Defined in header <string_view> Defined in header <unordered_map> Defined in header <unordered_set> Defined in header <vector> template < class C > constexpr auto empty ( const C & c ) - > decltype ( c. empty ( ) ) ; (1) (since C++17) template < class T, std:: size_t N > constexpr bool empty ( const T ( & array ) [ N ] ) noexcept ; (2) (since C++17) template < class E > constexpr bool empty ( std:: initializer_list < E > il ) noexcept ; (3) (since C++17) Returns whether the given range is empty. 1) Returns c. empty ( ) . 2) Returns false . 3) Returns il. size ( ) == 0 . Contents 1 Parameters 2 Return value 3 Exceptions 4 Notes 5 Possible implementation 6 Example 7 See also [ edit ] Parameters c - a container or view with an empty member function array - an array of arbitrary type il - an std::initializer_list [ edit ] Return value 1) c. empty ( ) 2) false 3) il. size ( ) == 0 [ edit ] Exceptions 1) May throw implementation-defined exceptions. [ edit ] Notes The overload for std::initializer_list is necessary because it does not have a member function empty . Feature-test macro Value Std Feature __cpp_lib_nonmember_container_access 201411L (C++17) std::size() , std::data() , and std::empty() [ edit ] Possible implementation First version template < class C > [ [ nodiscard ] ] constexpr auto empty ( const C & c ) - > decltype ( c. empty ( ) ) { return c. empty ( ) ; } Second version template < class T, std:: size_t N > [ [ nodiscard ] ] constexpr bool empty ( const T ( & array ) [ N ] ) noexcept { return false ; } Third version template < class E > [ [ nodiscard ] ] constexpr bool empty ( std:: initializer_list < E > il ) noexcept { return il. size ( ) == 0 ; } [ edit ] Example Run this code #include <iostream> #include <vector> template < class T > void print ( const T & container ) { if ( std :: empty ( container ) ) std:: cout << "Empty \n " ; else { std:: cout << "Elements:" ; for ( const auto & element : container ) std:: cout << ' ' << element ; std:: cout << ' \n ' ; } } int main ( ) { std:: vector < int > c = { 1 , 2 , 3 } ; print ( c ) ; c. clear ( ) ; print ( c ) ; int array [ ] = { 4 , 5 , 6 } ; print ( array ) ; auto il = { 7 , 8 , 9 } ; print ( il ) ; } Output: Elements: 1 2 3 Empty Elements: 4 5 6 Elements: 7 8 9 [ edit ] See also ranges::empty (C++20) checks whether a range is empty (customization point object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/empty&oldid=173011 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 1 July 2024, at 02:57. Privacy policy About cppreference.com Disclaimers