std::indirect_result_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: indirect_result_t From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] Defined in header <iterator> template < class F, class ... Is > requires ( std:: indirectly_readable < Is > && ... ) && std:: invocable < F, std:: iter_reference_t < Is > ... > using indirect_result_t = std:: invoke_result_t < F, std:: iter_reference_t < Is > ... > ; (since C++20) The alias template indirect_result_t obtains the result type of invoking an invocable type F on the result of dereferencing indirectly_readable types Is... . [ edit ] Template parameters F - an invocable type Is - indirectly readable types that are dereferenced to arguments [ edit ] Example Run this code #include <iterator> #include <type_traits> struct Fn { long operator ( ) ( const int & ) ; int operator ( ) ( int && ) ; short operator ( ) ( int , int ) const ; auto operator ( ) ( const float ) - > int & ; void operator ( ) ( int [ 8 ] ) ; } ; static_assert ( std:: is_same_v < std :: indirect_result_t < Fn, const int * > , long > and std:: is_same_v < std :: indirect_result_t < Fn, std:: move_iterator < int * >> , int > and std:: is_same_v < std :: indirect_result_t < const Fn, int * , int * > , short > and std:: is_same_v < std :: indirect_result_t < Fn, float * > , int & > and std:: is_same_v < std :: indirect_result_t < Fn, int ** > , void > ) ; int main ( ) { } [ edit ] See also result_of invoke_result (C++11) (removed in C++20) (C++17) deduces the result type of invoking a callable object with a set of arguments (class template) [edit] projected_value_t (C++26) computes the value type of an indirectly_readable type by projection (alias template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/indirect_result_t&oldid=175441 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 中文 This page was last modified on 22 August 2024, at 21:03. Privacy policy About cppreference.com Disclaimers