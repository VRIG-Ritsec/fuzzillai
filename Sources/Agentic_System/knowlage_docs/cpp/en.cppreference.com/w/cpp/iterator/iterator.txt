std::iterator - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: iterator From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] Defined in header <iterator> template < class Category, class T, class Distance = std:: ptrdiff_t , class Pointer = T * , class Reference = T & > struct iterator ; (deprecated in C++17) std::iterator is the base class provided to simplify definitions of the required types for iterators. Contents 1 Template parameters 2 Member types 3 Example 4 See also [ edit ] Template parameters Category - the category of the iterator. Must be one of iterator category tags . T - the type of the values that can be obtained by dereferencing the iterator. This type should be void for output iterators. Distance - a type that can be used to identify distance between iterators Pointer - defines a pointer to the type iterated over ( T ) Reference - defines a reference to the type iterated over ( T ) [ edit ] Member types Member type Definition iterator_category Category value_type T difference_type Distance pointer Pointer reference Reference [ edit ] Example The following example shows how to implement an input iterator by inheriting from std::iterator Run this code #include <algorithm> #include <iostream> template < long FROM, long TO > class Range { public : // member typedefs provided through inheriting from std::iterator class iterator : public std :: iterator < std:: input_iterator_tag , // iterator_category long , // value_type long , // difference_type const long * , // pointer long // reference > { long num = FROM ; public : explicit iterator ( long _num = 0 ) : num ( _num ) { } iterator & operator ++ ( ) { num = TO >= FROM ? num + 1 : num - 1 ; return * this ; } iterator operator ++ ( int ) { iterator retval = * this ; ++ ( * this ) ; return retval ; } bool operator == ( iterator other ) const { return num == other. num ; } bool operator ! = ( iterator other ) const { return ! ( * this == other ) ; } reference operator * ( ) const { return num ; } } ; iterator begin ( ) { return iterator ( FROM ) ; } iterator end ( ) { return iterator ( TO >= FROM ? TO + 1 : TO - 1 ) ; } } ; int main ( ) { // std::find requires an input iterator auto range = Range < 15 , 25 > ( ) ; auto itr = std:: find ( range. begin ( ) , range. end ( ) , 18 ) ; std:: cout << * itr << ' \n ' ; // 18 // Range::iterator also satisfies range-based for requirements for ( long l : Range < 3 , 5 > ( ) ) std:: cout << l << ' ' ; // 3 4 5 std:: cout << ' \n ' ; } Output: 18 3 4 5 [ edit ] See also iterator_traits provides uniform interface to the properties of an iterator (class template) [edit] input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) empty class types used to indicate iterator categories (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/iterator&oldid=159921 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 1 October 2023, at 01:14. Privacy policy About cppreference.com Disclaimers