std::sortable - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: sortable From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] Defined in header <iterator> template < class I, class Comp = ranges:: less , class Proj = std:: identity > concept sortable = std:: permutable < I > && std:: indirect_strict_weak_order < Comp, std :: projected < I, Proj >> ; (since C++20) The sortable concept specifies the requirements for algorithms that permute a range into an ordered range according to Comp . [ edit ] Semantic requirements std :: sortable < I, Comp, Proj > is modeled only if all concepts it subsumes are modeled. [ edit ] See also ranges::sort (C++20) sorts a range into ascending order (algorithm function object) [edit] ranges::stable_sort (C++20) sorts a range of elements while preserving order between equal elements (algorithm function object) [edit] ranges::partial_sort (C++20) sorts the first N elements of a range (algorithm function object) [edit] ranges::nth_element (C++20) partially sorts the given range making sure that it is partitioned by the given element (algorithm function object) [edit] ranges::inplace_merge (C++20) merges two ordered ranges in-place (algorithm function object) [edit] ranges::push_heap (C++20) adds an element to a max heap (algorithm function object) [edit] ranges::pop_heap (C++20) removes the largest element from a max heap (algorithm function object) [edit] ranges::make_heap (C++20) creates a max heap out of a range of elements (algorithm function object) [edit] ranges::sort_heap (C++20) turns a max heap into a range of elements sorted in ascending order (algorithm function object) [edit] ranges::next_permutation (C++20) generates the next greater lexicographic permutation of a range of elements (algorithm function object) [edit] ranges::prev_permutation (C++20) generates the next smaller lexicographic permutation of a range of elements (algorithm function object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/sortable&oldid=134041 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 中文 This page was last modified on 3 October 2021, at 16:41. Privacy policy About cppreference.com Disclaimers