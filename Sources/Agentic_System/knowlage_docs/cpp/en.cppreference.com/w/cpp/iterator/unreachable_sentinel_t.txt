std::unreachable_sentinel_t, std::unreachable_sentinel - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: unreachable_sentinel_t, std:: unreachable_sentinel From cppreference.com < cpp ‎ | iterator C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Iterator library Iterator concepts indirectly_readable (C++20) indirectly_writable (C++20) weakly_incrementable (C++20) incrementable (C++20) is-integer-like is-signed-integer-like (C++20) (C++20) sentinel_for (C++20) sized_sentinel_for (C++20) input_iterator (C++20) output_iterator (C++20) input_or_output_iterator (C++20) forward_iterator (C++20) bidirectional_iterator (C++20) random_access_iterator (C++20) contiguous_iterator (C++20) Iterator primitives input_iterator_tag output_iterator_tag forward_iterator_tag bidirectional_iterator_tag random_access_iterator_tag contiguous_iterator_tag (C++20) iter_value_t iter_difference_t iter_reference_t iter_const_reference_t iter_rvalue_reference_t iter_common_reference_t (C++20) (C++20) (C++20) (C++23) (C++20) (C++20) iterator (deprecated in C++17) iterator_traits incrementable_traits (C++20) indirectly_readable_traits (C++20) Algorithm concepts and utilities Indirect callable concepts indirectly_unary_invocable indirectly_regular_unary_invocable (C++20) (C++20) indirect_unary_predicate (C++20) indirect_binary_predicate (C++20) indirect_equivalence_relation (C++20) indirect_strict_weak_order (C++20) Common algorithm requirements indirectly_movable (C++20) indirectly_movable_storable (C++20) indirectly_copyable (C++20) indirectly_copyable_storable (C++20) indirectly_swappable (C++20) indirectly_comparable (C++20) permutable (C++20) mergeable (C++20) sortable (C++20) Utilities indirect_result_t (C++20) projected (C++20) projected_value_t (C++26) Iterator adaptors reverse_iterator make_reverse_iterator (C++14) move_iterator (C++11) make_move_iterator (C++11) default_sentinel_t default_sentinel (C++20) (C++20) unreachable_sentinel_t unreachable_sentinel (C++20) (C++20) front_insert_iterator back_insert_iterator inserter insert_iterator front_inserter back_inserter move_sentinel (C++20) common_iterator (C++20) counted_iterator (C++20) basic_const_iterator (C++23) const_iterator (C++23) const_sentinel (C++23) make_const_iterator (C++23) make_const_sentinel (C++23) Stream iterators istream_iterator ostream_iterator istreambuf_iterator ostreambuf_iterator Iterator customization points ranges::iter_move (C++20) ranges::iter_swap (C++20) Iterator operations advance distance prev (C++11) next (C++11) ranges::advance (C++20) ranges::distance (C++20) ranges::prev (C++20) ranges::next (C++20) Range access begin cbegin (C++11) (C++14) rbegin crbegin (C++14) (C++14) end cend (C++11) (C++14) rend crend (C++14) (C++14) size ssize (C++17) (C++20) empty (C++17) data (C++17) [edit] Defined in header <iterator> struct unreachable_sentinel_t ; (1) (since C++20) inline constexpr unreachable_sentinel_t unreachable_sentinel { } ; (2) (since C++20) 1) unreachable_sentinel_t is an empty class type that can be used to denote the “upper bound” of an unbounded interval. 2) unreachable_sentinel is a constant of type unreachable_sentinel_t . Contents 1 Non-member functions 2 operator== (std::unreachable_sentinel_t) 2.1 Example 2.2 See also [ edit ] Non-member functions operator== (C++20) compares an unreachable_sentinel_t with a value of any weakly_incrementable type (function template) operator== (std::unreachable_sentinel_t) template < std:: weakly_incrementable I > friend constexpr bool operator == ( unreachable_sentinel_t, const I & ) noexcept { return false ; } (since C++20) unreachable_sentinel_t can be compared with any weakly_incrementable type and the result is always false . This function template is not visible to ordinary unqualified or qualified lookup , and can only be found by argument-dependent lookup when std::unreachable_sentinel_t is an associated class of the arguments. [ edit ] Example Run this code #include <concepts> #include <cstddef> #include <iterator> #include <ranges> #include <utility> namespace ranges = std :: ranges ; // never checks “iter != r.end()” template < ranges:: random_access_range R > constexpr std:: size_t trivial_strlen ( R && r ) { auto iter = r. begin ( ) ; while ( * iter ! = ranges:: range_value_t < R > { } ) ++ iter ; return iter - r. begin ( ) ; } template < ranges:: random_access_range R > constexpr std:: size_t my_strlen ( R && r ) { if constexpr ( std:: same_as < ranges:: sentinel_t < R > , std :: unreachable_sentinel_t > ) return trivial_strlen ( std:: forward < R > ( r ) ) ; else return ranges:: find ( std:: forward < R > ( r ) , ranges:: range_value_t < R > { } ) - ranges:: begin ( r ) ; } int main ( ) { constexpr static char str [ ] = "The quick brown fox jumps over a lazy dog." ; static_assert ( my_strlen ( str ) == 42 ) ; // finds the length of the string faster, but UB if “str” is not null-terminated constexpr auto unsafe_str = ranges:: subrange { str, std :: unreachable_sentinel } ; static_assert ( my_strlen ( unsafe_str ) == 42 ) ; } [ edit ] See also ranges::iota_view views::iota (C++20) a view consisting of a sequence generated by repeatedly incrementing an initial value (class template) (customization point object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/unreachable_sentinel_t&oldid=182924 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages 日本語 中文 This page was last modified on 30 April 2025, at 00:26. Privacy policy About cppreference.com Disclaimers