std::numpunct - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: numpunct From cppreference.com < cpp ‎ | locale C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Text processing library Localization library Regular expressions library (C++11) Formatting library (C++20) Null-terminated sequence utilities Byte strings Multibyte strings Wide strings Primitive numeric conversions to_chars (C++17) to_chars_result (C++17) from_chars (C++17) from_chars_result (C++17) chars_format (C++17) Text encoding identifications text_encoding (C++26) [edit] Localization library Locales and facets Locales has_facet use_facet locale Facet category base classes ctype_base codecvt_base messages_base time_base money_base ctype facets ctype ctype <char> ctype_byname codecvt codecvt_byname numeric facets num_get num_put numpunct numpunct_byname collate facets collate collate_byname time facets time_get time_put time_get_byname time_put_byname monetary facets money_get money_put moneypunct moneypunct_byname messages facets messages messages_byname Character classification and conversion Character classification isspace iscntrl isupper islower isalpha ispunct isdigit isxdigit isalnum isblank (C++11) isprint isgraph Character conversions toupper tolower String and stream conversions wstring_convert ( C++11/17/26* ) wbuffer_convert ( C++11/17/26* ) Unicode conversion facets codecvt_utf8 ( C++11/17/26* ) codecvt_utf16 ( C++11/17/26* ) codecvt_utf8_utf16 ( C++11/17/26* ) codecvt_mode ( C++11/17/26* ) C library locales LC_ALL LC_COLLATE LC_CTYPE LC_MONETARY LC_NUMERIC LC_TIME setlocale localeconv lconv [edit] std::numpunct Member functions numpunct::numpunct numpunct::~numpunct numpunct::decimal_point numpunct::do_decimal_point numpunct::thousands_sep numpunct::do_thousands_sep numpunct::grouping numpunct::do_grouping numpunct::truename numpunct::do_truename numpunct::falsename numpunct::do_falsename [edit] Defined in header <locale> template < class CharT > class numpunct ; The facet std::numpunct encapsulates numeric punctuation preferences. Stream I/O operations use std::numpunct through std::num_get and std::num_put for parsing numeric input and formatting numeric output. The numbers that are supported by std::numpunct have the format described below. Here digit represents the radix set specified by the fmtflags argument value, thousands-sep and decimal-point are the results of thousands_sep() and decimal_point() functions respectively. The format of integer values is as follows: integer ::= [sign] units sign ::= plusminus plusminus ::= '+' | '-' units ::= digits [thousands-sep units] digits ::= digit [digits] The number of digits between the thousand-sep s (maximum size of digits ) is specified by the result of grouping() . The format of floating-point values is as follows: floatval ::= [sign] units [decimal-point [digits]] [e [sign] digits] | [sign] decimal-point digits [e [sign] digits] e ::= 'e' | 'E' Inheritance diagram Contents 1 Specializations 2 Nested types 3 Data members 4 Member functions 5 Protected member functions 6 Example 7 Defect reports 8 See also [ edit ] Specializations The standard library is guaranteed to provide the following specializations (they are required to be implemented by any locale object ): Defined in header <locale> std :: numpunct < char > provides equivalents of the "C" locale preferences std :: numpunct < wchar_t > provides wide character equivalents of the "C" locale preferences [ edit ] Nested types Type Definition char_type CharT string_type std:: basic_string < CharT > [ edit ] Data members Member Description std::locale::id id [static] the identifier of the facet [ edit ] Member functions (constructor) constructs a new numpunct facet (public member function) [edit] (destructor) destructs a numpunct facet (protected member function) [edit] decimal_point invokes do_decimal_point (public member function) [edit] thousands_sep invokes do_thousands_sep (public member function) [edit] grouping invokes do_grouping (public member function) [edit] truename falsename invokes do_truename or do_falsename (public member function) [edit] [ edit ] Protected member functions do_decimal_point [virtual] provides the character to use as decimal point (virtual protected member function) [edit] do_thousands_sep [virtual] provides the character to use as thousands separator (virtual protected member function) [edit] do_grouping [virtual] provides the numbers of digits between each pair of thousands separators (virtual protected member function) [edit] do_truename do_falsename [virtual] provides the string to use as the name of the boolean true and false (virtual protected member function) [edit] [ edit ] Example The following example changes the string representations of true and false : Run this code #include <iostream> #include <locale> struct french_bool : std :: numpunct < char > { string_type do_truename ( ) const override { return "vrai" ; } string_type do_falsename ( ) const override { return "faux" ; } } ; int main ( ) { std:: cout << "default locale: " << std:: boolalpha << true << ", " << false << ' \n ' ; std:: cout . imbue ( std:: locale ( std:: cout . getloc ( ) , new french_bool ) ) ; std:: cout << "locale with modified numpunct: " << std:: boolalpha << true << ", " << false << ' \n ' ; } Output: default locale: true, false locale with modified numpunct: vrai, faux [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 338 C++98 the sign token allowed an optional whitespace following + or - removed the whitespace [ edit ] See also numpunct_byname creates a numpunct facet for the named locale (class template) Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/locale/numpunct&oldid=179744 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 17 January 2025, at 07:05. Privacy policy About cppreference.com Disclaimers