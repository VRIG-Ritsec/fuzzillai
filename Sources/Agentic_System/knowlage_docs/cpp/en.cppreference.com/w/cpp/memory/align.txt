std::align - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: align From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] Defined in header <memory> void * align ( std:: size_t alignment, std:: size_t size, void * & ptr, std:: size_t & space ) ; (since C++11) Given a pointer ptr to a buffer of size space , returns a pointer aligned by the specified alignment for size number of bytes and decreases space argument by the number of bytes used for alignment. The first aligned address is returned. The function modifies the pointer only if it would be possible to fit the wanted number of bytes aligned by the given alignment into the buffer. If the buffer is too small, the function does nothing and returns nullptr . The behavior is undefined if alignment is not a power of two. Contents 1 Parameters 2 Return value 3 Example 4 Defect reports 5 See also [ edit ] Parameters alignment - the desired alignment size - the size of the storage to be aligned ptr - pointer to contiguous storage (a buffer) of at least space bytes space - the size of the buffer in which to operate [ edit ] Return value The adjusted value of ptr , or null pointer value if the space provided is too small. [ edit ] Example Demonstrates the use of std::align to place objects of different type in memory. Run this code #include <iostream> #include <memory> #include <new> template < std:: size_t N > struct MyAllocator { std:: byte data [ N ] ; std:: size_t sz { N } ; void * p { data } ; MyAllocator ( ) = default ; // Note: only well-defined for implicit-lifetime types template < typename T > T * implicit_aligned_alloc ( std:: size_t a = alignof ( T ) ) { if ( std :: align ( a, sizeof ( T ) , p, sz ) ) { T * result = std:: launder ( reinterpret_cast < T * > ( p ) ) ; p = static_cast < std:: byte * > ( p ) + sizeof ( T ) ; sz - = sizeof ( T ) ; return result ; } return nullptr ; } } ; int main ( ) { MyAllocator < 64 > a ; std:: cout << "allocated a.data at " << ( void * ) a. data << " (" << sizeof a. data << " bytes) \n " ; // Allocate a char if ( char * p = a. implicit_aligned_alloc < char > ( ) ) { * p = 'a' ; std:: cout << "allocated a char at " << ( void * ) p << ' \n ' ; } // Allocate an int if ( int * p = a. implicit_aligned_alloc < int > ( ) ) { * p = 1 ; std:: cout << "allocated an int at " << ( void * ) p << ' \n ' ; } // Allocate an int, aligned at a 32-byte boundary if ( int * p = a. implicit_aligned_alloc < int > ( 32 ) ) { * p = 2 ; std:: cout << "allocated an int at " << ( void * ) p << " (32-byte alignment) \n " ; } } Possible output: allocated a.data at 0x7ffc654e8530 (64 bytes) allocated a char at 0x7ffc654e8530 allocated an int at 0x7ffc654e8534 allocated an int at 0x7ffc654e8540 (32-byte alignment) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2377 C++11 alignment required to be a fundamental or supported extended alignment value only need to be a power of two [ edit ] See also alignof (C++11) queries alignment requirements of a type (operator) [edit] alignas (C++11) specifies that the storage for the variable should be aligned by specific amount (specifier) [edit] aligned_storage (since C++11) (deprecated in C++23) defines the type suitable for use as uninitialized storage for types of given size (class template) [edit] assume_aligned (C++20) informs the compiler that a pointer is aligned (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/align&oldid=181870 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 14 March 2025, at 06:24. Privacy policy About cppreference.com Disclaimers