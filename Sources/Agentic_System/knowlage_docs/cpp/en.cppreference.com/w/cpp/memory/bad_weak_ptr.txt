std::bad_weak_ptr - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: bad_weak_ptr From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] Defined in header <memory> class bad_weak_ptr ; (since C++11) std::bad_weak_ptr is the type of the object thrown as exceptions by the constructors of std::shared_ptr that take std::weak_ptr as the argument, when the std::weak_ptr refers to an already deleted object. Inheritance diagram Contents 1 Member functions 2 std::bad_weak_ptr:: bad_weak_ptr 2.1 Parameters 3 std::bad_weak_ptr:: operator= 3.1 Parameters 3.2 Return value 4 std::bad_weak_ptr:: what 4.1 Return value 4.2 Notes 5 Inherited from std:: exception 5.1 Member functions 5.2 Example 5.3 Defect reports 5.4 See also [ edit ] Member functions (constructor) constructs a new bad_weak_ptr object (public member function) operator= replaces the bad_weak_ptr object (public member function) what returns the explanatory string (public member function) std::bad_weak_ptr:: bad_weak_ptr bad_weak_ptr ( ) noexcept ; (1) (since C++11) bad_weak_ptr ( const bad_weak_ptr & other ) noexcept ; (2) (since C++11) Constructs a new bad_weak_ptr object with an implementation-defined null-terminated byte string which is accessible through what() . 1) Default constructor. 2) Copy constructor. If * this and other both have dynamic type std::bad_weak_ptr then std:: strcmp ( what ( ) , other. what ( ) ) == 0 . Parameters other - another exception object to copy std::bad_weak_ptr:: operator= bad_weak_ptr & operator = ( const bad_weak_ptr & other ) noexcept ; (since C++11) Assigns the contents with those of other . If * this and other both have dynamic type std::bad_weak_ptr then std:: strcmp ( what ( ) , other. what ( ) ) == 0 after assignment. Parameters other - another exception object to assign with Return value * this std::bad_weak_ptr:: what virtual const char * what ( ) const noexcept ; (since C++11) Returns the explanatory string. Return value Pointer to an implementation-defined null-terminated string with explanatory information. The string is suitable for conversion and display as a std::wstring . The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function (e.g. copy assignment operator) on the exception object is called. Notes Implementations are allowed but not required to override what() . Inherited from std:: exception Member functions (destructor) [virtual] destroys the exception object (virtual public member function of std::exception ) [edit] what [virtual] returns an explanatory string (virtual public member function of std::exception ) [edit] [ edit ] Example Run this code #include <iostream> #include <memory> int main ( ) { std:: shared_ptr < int > p1 ( new int ( 42 ) ) ; std:: weak_ptr < int > wp ( p1 ) ; p1. reset ( ) ; try { std:: shared_ptr < int > p2 ( wp ) ; } catch ( const std :: bad_weak_ptr & e ) { std:: cout << e. what ( ) << ' \n ' ; } } Possible output: std::bad_weak_ptr [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2376 C++11 calling what on a default-constructed bad_weak_ptr was required to return "bad_weak_ptr" the return value is implementation-defined [ edit ] See also shared_ptr (C++11) smart pointer with shared object ownership semantics (class template) [edit] weak_ptr (C++11) weak reference to an object managed by std::shared_ptr (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/bad_weak_ptr&oldid=153222 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 12 June 2023, at 11:55. Privacy policy About cppreference.com Disclaimers