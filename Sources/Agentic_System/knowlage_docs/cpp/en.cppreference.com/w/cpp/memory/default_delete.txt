std::default_delete - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: default_delete From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] Defined in header <memory> template < class T > struct default_delete ; (1) (since C++11) template < class T > struct default_delete < T [ ] > ; (2) (since C++11) std::default_delete is the default destruction policy used by std::unique_ptr when no deleter is specified. Specializations of default_delete are empty classes on typical implementations, and used in the empty base class optimization . 1) The non-specialized default_delete uses delete to deallocate memory for a single object. 2) A partial specialization for array types that uses delete [ ] is also provided. Contents 1 Member functions 2 std::default_delete:: default_delete 2.1 Parameters 2.2 Notes 3 std::default_delete:: operator() 3.1 Parameters 3.2 Exceptions 3.3 Invoking over Incomplete Types 3.4 Notes 3.5 Example 3.6 Defect reports 3.7 See also [ edit ] Member functions (constructor) constructs a default_delete object (public member function) [edit] operator() deletes the object or array (public member function) [edit] std::default_delete:: default_delete constexpr default_delete ( ) noexcept = default ; (1) Primary template specializations template < class U > default_delete ( const default_delete < U > & d ) noexcept ; (2) (since C++11) (constexpr since C++23) Array specializations template < class U > default_delete ( const default_delete < U [ ] > & d ) noexcept ; (3) (since C++11) (constexpr since C++23) 1) Constructs a std::default_delete object. 2) Constructs a std::default_delete<T> object from another std::default_delete object. This overload participates in overload resolution only if U* is implicitly convertible to T* . 3) Constructs a std::default_delete<T[]> object from another std::default_delete<U[]> object. This overload participates in overload resolution only if U(*)[] is implicitly convertible to T(*)[] . Parameters d - a deleter to copy from Notes The converting constructor template of std::default_delete makes possible the implicit conversion from std:: unique_ptr < Derived > to std:: unique_ptr < Base > . std::default_delete:: operator() Primary template specializations void operator ( ) ( T * ptr ) const ; (1) (since C++11) (constexpr since C++23) Array specializations template < class U > void operator ( ) ( U * ptr ) const ; (2) (since C++11) (constexpr since C++23) 1) Calls delete on ptr . 2) Calls delete [ ] on ptr . This overload participates in overload resolution only if U(*)[] is implicitly convertible to T(*)[] . If U is an incomplete type, the program is ill-formed. Parameters ptr - an object or array to delete Exceptions No exception guarantees. [ edit ] Invoking over Incomplete Types At the point in the code the operator ( ) is called, the type must be complete. In some implementations a static_assert is used to make sure this is the case. The reason for this requirement is that calling delete on an incomplete type is undefined behavior in C++ if the complete class type has a nontrivial destructor or a deallocation function, as the compiler has no way of knowing whether such functions exist and must be invoked. [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_constexpr_memory 202202L (C++23) constexpr constructor and operator ( ) [ edit ] Example Run this code #include <algorithm> #include <memory> #include <vector> int main ( ) { // { // std::shared_ptr<int> shared_bad(new int[10]); // } // the destructor calls delete, undefined behavior { std:: shared_ptr < int > shared_good ( new int [ 10 ] , std :: default_delete < int [ ] > ( ) ) ; } // OK: the destructor calls delete[] { std:: unique_ptr < int > ptr ( new int ( 5 ) ) ; } // unique_ptr<int> uses default_delete<int> { std:: unique_ptr < int [ ] > ptr ( new int [ 10 ] ) ; } // unique_ptr<int[]> uses default_delete<int[]> // default_delete can be used anywhere a delete functor is needed std:: vector < int * > v ; for ( int n = 0 ; n < 100 ; ++ n ) v. push_back ( new int ( n ) ) ; std:: for_each ( v. begin ( ) , v. end ( ) , std :: default_delete < int > ( ) ) ; } [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2118 C++11 member functions of the array specializations rejected qualification conversions accept [ edit ] See also unique_ptr (C++11) smart pointer with unique object ownership semantics (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/default_delete&oldid=179177 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 3 January 2025, at 04:13. Privacy policy About cppreference.com Disclaimers