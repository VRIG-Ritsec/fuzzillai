std::enable_shared_from_this - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: enable_shared_from_this From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] std::enable_shared_from_this Protected member functions enable_shared_from_this::enable_shared_from_this enable_shared_from_this::~enable_shared_from_this enable_shared_from_this::operator= Public member functions enable_shared_from_this::shared_from_this enable_shared_from_this::weak_from_this (C++17) [edit] Defined in header <memory> template < class T > class enable_shared_from_this ; (since C++11) std::enable_shared_from_this allows an object t that is currently managed by a std::shared_ptr named pt to safely generate additional std::shared_ptr instances pt1 , pt2 etc. that all share ownership of t with pt . Publicly inheriting from std::enable_shared_from_this<T> provides the type T with a member function shared_from_this . If an object t of type T is managed by a std:: shared_ptr < T > named pt , then calling T::shared_from_this will return a new std:: shared_ptr < T > that shares ownership of t with pt . Contents 1 Data members 2 Member functions 3 Notes 4 Example 5 Defect reports 6 See also [ edit ] Data members Member Description mutable std:: weak_ptr < T > weak_this the object tracking the control block of the first shared owner of * this ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs an enable_shared_from_this object (protected member function) (destructor) destroys an enable_shared_from_this object (protected member function) operator= returns a reference to * this (protected member function) shared_from_this returns a std::shared_ptr which shares ownership of * this (public member function) weak_from_this (C++17) returns a std::weak_ptr which shares ownership of * this (public member function) [ edit ] Notes The constructors of std::shared_ptr detect the presence of an unambiguous and accessible (i.e. public inheritance is mandatory) enable_shared_from_this base and assign the newly created std::shared_ptr to weak_this if not already owned by a live std::shared_ptr . Constructing a std::shared_ptr for an object that is already managed by another std::shared_ptr will not consult weak_this and thus will lead to undefined behavior. It is permitted to call shared_from_this only on a previously shared object, i.e. on an object managed by std:: shared_ptr < T > . Otherwise, std::bad_weak_ptr is thrown (by the std::shared_ptr constructor from a default-constructed weak_this ﻿). enable_shared_from_this provides the safe alternative to an expression like std:: shared_ptr < T > ( this ) , which is likely to result in this being destructed more than once by multiple owners that are unaware of each other (see example below). [ edit ] Example Run this code #include <iostream> #include <memory> class Good : public std :: enable_shared_from_this < Good > { public : std:: shared_ptr < Good > getptr ( ) { return shared_from_this ( ) ; } } ; class Best : public std :: enable_shared_from_this < Best > { struct Private { explicit Private ( ) = default ; } ; public : // Constructor is only usable by this class Best ( Private ) { } // Everyone else has to use this factory function // Hence all Best objects will be contained in shared_ptr static std:: shared_ptr < Best > create ( ) { return std:: make_shared < Best > ( Private ( ) ) ; } std:: shared_ptr < Best > getptr ( ) { return shared_from_this ( ) ; } } ; struct Bad { std:: shared_ptr < Bad > getptr ( ) { return std:: shared_ptr < Bad > ( this ) ; } ~Bad ( ) { std:: cout << "Bad::~Bad() called \n " ; } } ; void testGood ( ) { // Good: the two shared_ptr's share the same object std:: shared_ptr < Good > good0 = std:: make_shared < Good > ( ) ; std:: shared_ptr < Good > good1 = good0 - > getptr ( ) ; std:: cout << "good1.use_count() = " << good1. use_count ( ) << ' \n ' ; } void misuseGood ( ) { // Bad: shared_from_this is called without having std::shared_ptr owning the caller try { Good not_so_good ; std:: shared_ptr < Good > gp1 = not_so_good. getptr ( ) ; } catch ( std:: bad_weak_ptr & e ) { // undefined behavior (until C++17) and std::bad_weak_ptr thrown (since C++17) std:: cout << e. what ( ) << ' \n ' ; } } void testBest ( ) { // Best: Same but cannot stack-allocate it: std:: shared_ptr < Best > best0 = Best :: create ( ) ; std:: shared_ptr < Best > best1 = best0 - > getptr ( ) ; std:: cout << "best1.use_count() = " << best1. use_count ( ) << ' \n ' ; // Best stackBest; // <- Will not compile because Best::Best() is private. } void testBad ( ) { // Bad, each shared_ptr thinks it is the only owner of the object std:: shared_ptr < Bad > bad0 = std:: make_shared < Bad > ( ) ; std:: shared_ptr < Bad > bad1 = bad0 - > getptr ( ) ; std:: cout << "bad1.use_count() = " << bad1. use_count ( ) << ' \n ' ; } // UB: double-delete of Bad int main ( ) { testGood ( ) ; misuseGood ( ) ; testBest ( ) ; testBad ( ) ; } Possible output: good1.use_count() = 2 bad_weak_ptr best1.use_count() = 2 bad1.use_count() = 1 Bad::~Bad() called Bad::~Bad() called *** glibc detected *** ./test: double free or corruption [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2179 ( P0033R1 ) C++11 given type T derived from enable_shared_from_this , the behavior of constructing two std:: shared_ptr < T > s from the same T * object was unclear the behavior is undefined in this case LWG 2529 ( P0033R1 ) C++11 it was unclear how the underlying std::weak_ptr is updated made clear [ edit ] See also shared_ptr (C++11) smart pointer with shared object ownership semantics (class template) [edit] make_shared make_shared_for_overwrite (C++20) creates a shared pointer that manages a new object (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/enable_shared_from_this&oldid=177226 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 22 October 2024, at 01:19. Privacy policy About cppreference.com Disclaimers