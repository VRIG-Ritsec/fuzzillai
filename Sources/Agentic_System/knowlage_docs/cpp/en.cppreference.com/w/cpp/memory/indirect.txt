std::indirect - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: indirect From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] std::indirect Member functions indirect::indirect indirect::~indirect indirect::operator= Observers indirect::operator-> indirect::operator* indirect::valueless_after_move indirect::get_allocator Modifiers indirect::swap Non-member functions operator== operator<=> swap (std::indirect) Deduction guides Helper classes hash <std::indirect> [edit] Defined in header <memory> template < class T, class Allocator = std:: allocator < T > > class indirect ; (1) (since C++26) namespace pmr { template < class T > using indirect = std :: indirect < T, std:: pmr :: polymorphic_allocator < T >> ; } (2) (since C++26) 1) std::indirect is a wrapper containing dynamically-allocated object with value-like semantics. 2) std::pmr::indirect is an alias template that uses a polymorphic allocator . An std::indirect object manages the lifetime of an owned object. An std::indirect object can only have no owned object after it has been moved from, in this case it is valueless ﻿ . Every object of type std::indirect<T, Allocator> uses an object of type Allocator to allocate and free storage for the owned object as needed. If a program declares an explicit or partial specialization of std::indirect , the behavior is undefined. Contents 1 Template parameters 2 Nested types 3 Data members 4 Member functions 4.1 Observers 4.2 Modifiers 5 Non-member functions 6 Helper classes 7 Deduction guides 8 Notes 9 Example 10 See also [ edit ] Template parameters T - the type of the owned object Allocator - the type of the associated allocator Type requirements - T may be an incomplete type . - If T is one of the following types, the program is ill-formed: a non- object type an array type std::in_place_t a specialization of std::in_place_type_t a cv-qualified type - If Allocator does not satisfy the requirements of Allocator , the program is ill-formed. - If std:: allocator_traits < Allocator > :: value_type is not the same type as T , the program is ill-formed. [ edit ] Nested types Type Definition value_type T allocator_type Allocator pointer typename std:: allocator_traits < Allocator > :: pointer const_pointer typename std:: allocator_traits < Allocator > :: const_pointer [ edit ] Data members Member Description pointer p a pointer to the owned value ( exposition-only member object* ) Allocator alloc the asociated allocator ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs the indirect object (public member function) [edit] (destructor) destroys the owned value, if there is one (public member function) [edit] operator= assigns contents (public member function) [edit] Observers operator-> operator* accesses the owned value (public member function) [edit] valueless_after_move checks if the indirect is valueless (public member function) [edit] get_allocator returns the associated allocator (public member function) [edit] Modifiers swap exchanges the contents (public member function) [edit] [ edit ] Non-member functions operator== operator<=> (C++26) (C++26) compares indirect objects (function template) [edit] std::swap (std::indirect) (C++26) specializes the std::swap algorithm (function template) [edit] [ edit ] Helper classes std::hash <std::indirect> (C++26) hash support for std::indirect (class template specialization) [edit] [ edit ] Deduction guides [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_indirect 202502L (C++26) std::indirect [ edit ] Example This section is incomplete Reason: no example [ edit ] See also polymorphic (C++26) a polymorphic wrapper containing dynamically-allocated object with value-like semantics (class template) [edit] unique_ptr (C++11) smart pointer with unique object ownership semantics (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/indirect&oldid=182560 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 8 April 2025, at 09:35. Privacy policy About cppreference.com Disclaimers