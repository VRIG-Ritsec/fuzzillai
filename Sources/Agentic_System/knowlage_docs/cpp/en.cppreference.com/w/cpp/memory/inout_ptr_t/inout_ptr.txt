std::inout_ptr - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: inout_ptr From cppreference.com < cpp ‎ | memory ‎ | inout ptr t C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] std::inout_ptr_t Member functions inout_ptr_t::inout_ptr_t inout_ptr_t::~inout_ptr_t inout_ptr_t::operator Pointer* inout_ptr_t::operator void** Non-member functions inout_ptr [edit] Defined in header <memory> template < class Pointer = void , class Smart, class ... Args > auto inout_ptr ( Smart & s, Args && ... args ) ; (since C++23) Returns an inout_ptr_t with deduced template arguments that captures arguments for resetting by reference. The program is ill-formed if construction of the return value (see below) is ill-formed. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters s - the object (typically a smart pointer) to adapt args... - the arguments for resetting to capture [ edit ] Return value std:: inout_ptr_t < Smart, P, Args && > ( s, std:: forward < Args > ( args ) ... ) , where P is Pointer , if Pointer is not a void type, otherwise, Smart :: pointer , if it is valid and denotes a type, otherwise, Smart :: element_type * , if Smart :: element_type is valid and denotes a type, otherwise, std:: pointer_traits < Smart > :: element_type * . [ edit ] Notes Users may specify the template argument for the template parameter Pointer , in order to interoperate with foreign functions that take a Pointer * . As all arguments for resetting are captured by reference, the returned inout_ptr_t should be a temporary object destroyed at the end of the full-expression containing the call to the foreign function, in order to avoid dangling references. Feature-test macro Value Std Feature __cpp_lib_out_ptr 202106L (C++23) std::out_ptr , std::inout_ptr 202311L (C++26) freestanding std::out_ptr and std::inout_ptr [ edit ] Example This section is incomplete Reason: no example [ edit ] See also out_ptr (C++23) creates an out_ptr_t with an associated smart pointer and resetting arguments (function template) [edit] make_unique make_unique_for_overwrite (C++14) (C++20) creates a unique pointer that manages a new object (function template) [edit] make_shared make_shared_for_overwrite (C++20) creates a shared pointer that manages a new object (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/inout_ptr_t/inout_ptr&oldid=182904 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 28 April 2025, at 19:28. Privacy policy About cppreference.com Disclaimers