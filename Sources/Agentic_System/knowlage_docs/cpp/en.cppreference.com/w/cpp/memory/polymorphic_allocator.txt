std::pmr::polymorphic_allocator - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std::pmr:: polymorphic_allocator From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] std::pmr::polymorphic_allocator Member functions polymorphic_allocator::polymorphic_allocator polymorphic_allocator::allocate polymorphic_allocator::deallocate polymorphic_allocator::construct polymorphic_allocator::destroy ( C++20/26* ) polymorphic_allocator::allocate_bytes (C++20) polymorphic_allocator::deallocate_bytes (C++20) polymorphic_allocator::allocate_object (C++20) polymorphic_allocator::deallocate_object (C++20) polymorphic_allocator::new_object (C++20) polymorphic_allocator::delete_object (C++20) polymorphic_allocator::select_on_container_copy_construction polymorphic_allocator::resource Non-member functions operator== operator!= (until C++20) [edit] Defined in header <memory_resource> template < class T > class polymorphic_allocator ; (since C++17) (until C++20) template < class T = std:: byte > class polymorphic_allocator ; (since C++20) The class template std::pmr::polymorphic_allocator is an Allocator which exhibits different allocation behavior depending upon the std::pmr::memory_resource from which it is constructed. Since memory_resource uses runtime polymorphism to manage allocations, different container instances with polymorphic_allocator as their static allocator type are interoperable, but can behave as if they had different allocator types. All specializations of polymorphic_allocator meet the allocator completeness requirements . The polymorphic_allocator::construct member function does uses-allocator construction , so that the elements of a container using a polymorphic_allocator will use that same allocator for their own allocations. For example, a std:: pmr :: vector < std:: pmr :: string > will use the same memory_resource for the vector 's storage and each string 's storage. For non-polymorphic allocators, similar propagation can be achieved with the help of std::scoped_allocator_adaptor . Contents 1 Member types 2 Member functions 2.1 Public member functions 3 Non-member functions 4 Notes 5 See also [ edit ] Member types Member type definition value_type T [ edit ] Member functions (constructor) constructs a polymorphic_allocator (public member function) [edit] (destructor) (implicitly declared) implicitly declared destructor (public member function) [edit] operator= [deleted] copy assignment operator is deleted (public member function) [edit] Public member functions allocate allocate memory (public member function) [edit] deallocate deallocate memory (public member function) [edit] construct constructs an object in allocated storage (public member function) [edit] destroy (deprecated in C++20) (undeprecated in C++26) destroys an object in allocated storage (public member function) [edit] allocate_bytes (C++20) allocate raw aligned memory from the underlying resource (public member function) [edit] deallocate_bytes (C++20) free raw memory obtained from allocate_bytes (public member function) [edit] allocate_object (C++20) allocates raw memory suitable for an object or an array (public member function) [edit] deallocate_object (C++20) frees raw memory obtained by allocate_object (public member function) [edit] new_object (C++20) allocates and constructs an object (public member function) [edit] delete_object (C++20) destroys and deallocates an object (public member function) [edit] select_on_container_copy_construction create a new polymorphic_allocator for use by a container's copy constructor (public member function) [edit] resource returns a pointer to the underlying memory resource (public member function) [edit] [ edit ] Non-member functions operator== operator!= (removed in C++20) compare two polymorphic_allocator s (function) [edit] [ edit ] Notes polymorphic_allocator does not propagate on container copy assignment, move assignment, or swap. As a result, move assignment of a polymorphic_allocator -using container can throw, and swapping two polymorphic_allocator -using containers whose allocators do not compare equal results in undefined behavior. Feature-test macro Value Std Feature __cpp_lib_polymorphic_allocator 201902L (C++20) std::pmr::polymorphic_allocator<> as a vocabulary type [ edit ] See also memory_resource (C++17) an abstract interface for classes that encapsulate memory resources (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/polymorphic_allocator&oldid=161351 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 25 October 2023, at 09:18. Privacy policy About cppreference.com Disclaimers