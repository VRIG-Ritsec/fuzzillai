no-throw-input-iterator, no-throw-forward-iterator, no-throw-sentinel-for, no-throw-input-range, no-throw-forward-range - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions no-throw-input-iterator , no-throw-forward-iterator , no-throw-sentinel-for , no-throw-input-range , no-throw-forward-range From cppreference.com < cpp ‎ | memory C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Memory management library voidify ( exposition only* ) Allocators allocator allocator_traits (C++11) allocation_result (C++23) scoped_allocator_adaptor (C++11) pmr::polymorphic_allocator (C++17) allocator_arg (C++11) uses_allocator (C++11) uses_allocator_construction_args (C++20) make_obj_using_allocator (C++20) uninitialized_construct_using_allocator (C++20) Uninitialized memory algorithms uninitialized_copy uninitialized_fill uninitialized_move (C++17) uninitialized_copy_n (C++11) uninitialized_fill_n uninitialized_move_n (C++17) construct_at (C++20) uninitialized_default_construct (C++17) uninitialized_value_construct (C++17) destroy (C++17) uninitialized_default_construct_n (C++17) uninitialized_value_construct_n (C++17) destroy_n (C++17) destroy_at (C++17) Constrained uninitialized memory algorithms ranges::uninitialized_copy (C++20) ranges::uninitialized_fill (C++20) ranges::uninitialized_move (C++20) ranges::uninitialized_copy_n (C++20) ranges::uninitialized_fill_n (C++20) ranges::uninitialized_move_n (C++20) ranges::construct_at (C++20) ranges::uninitialized_default_construct (C++20) ranges::uninitialized_value_construct (C++20) ranges::destroy (C++20) ranges::uninitialized_default_construct_n (C++20) ranges::uninitialized_value_construct_n (C++20) ranges::destroy_n (C++20) ranges::destroy_at (C++20) Memory resources pmr::memory_resource (C++17) pmr::get_default_resource (C++17) pmr::set_default_resource (C++17) pmr::new_delete_resource (C++17) pmr::pool_options (C++17) pmr::null_memory_resource (C++17) pmr::synchronized_pool_resource (C++17) pmr::unsynchronized_pool_resource (C++17) pmr::monotonic_buffer_resource (C++17) Explicit lifetime management start_lifetime_as (C++23) start_lifetime_as_array (C++23) Types for composite class design indirect (C++26) polymorphic (C++26) Uninitialized storage (until C++20) raw_storage_iterator ( until C++20* ) get_temporary_buffer ( until C++20* ) return_temporary_buffer ( until C++20* ) Garbage collector support (until C++23) declare_reachable (C++11) (until C++23) declare_no_pointers (C++11) (until C++23) pointer_safety (C++11) (until C++23) undeclare_reachable (C++11) (until C++23) undeclare_no_pointers (C++11) (until C++23) get_pointer_safety (C++11) (until C++23) Low level memory management operator new operator new[] operator delete operator delete[] nothrow_t nothrow new_handler set_new_handler get_new_handler (C++11) bad_alloc bad_array_new_length (C++11) align_val_t (C++17) destroying_delete_t (C++20) launder (C++17) Smart pointers unique_ptr (C++11) shared_ptr (C++11) weak_ptr (C++11) auto_ptr ( until C++17* ) owner_less (C++11) owner_less<void> (C++17) owner_hash (C++26) owner_equal (C++26) enable_shared_from_this (C++11) bad_weak_ptr (C++11) default_delete (C++11) out_ptr_t (C++23) inout_ptr_t (C++23) Miscellaneous pointer_traits (C++11) to_address (C++20) addressof (C++11) align (C++11) assume_aligned (C++20) is_sufficiently_aligned (C++26) C Library malloc calloc realloc free aligned_alloc (C++17) [edit] template < class I > concept no - throw - input - iterator = std:: input_iterator < I > && std:: is_lvalue_reference_v < std:: iter_reference_t < I >> && std:: same_as < std:: remove_cvref_t < std:: iter_reference_t < I >> , std:: iter_value_t < I >> ; (1) ( exposition only* ) template < class I > concept no - throw - forward - iterator = no - throw - input - iterator < I > && std:: forward_iterator < I > && no - throw - sentinel - for < I, I > ; (2) ( exposition only* ) template < class S, class I > concept no - throw - sentinel - for = std:: sentinel_for < S, I > ; (3) ( exposition only* ) template < class R > concept no - throw - input - range = ranges:: range < R > && no - throw - input - iterator < ranges:: iterator_t < R >> && no - throw - sentinel - for < ranges:: sentinel_t < R > , ranges:: iterator_t < R >> ; (4) ( exposition only* ) template < class R > concept no - throw - forward - range = no - throw - input - range < R > && no - throw - forward - iterator < ranges:: iterator_t < R >> ; (5) ( exposition only* ) These exposition-only concepts specify that no exceptions are thrown from operations required by algorithms on iterators, sentinels, and ranges. 1) The no-throw-input-iterator concept requires that dereferencing the iterator yields an lvalue, like contiguous_iterator and LegacyForwardIterator . [ edit ] Semantic requirements Like all standard concepts, every concept listed here is modeled only if all concepts it subsumes are modeled. 1) A type I models no-throw-input-iterator only if no exceptions are thrown from increment, copy construction, move construction, copy assignment, move assignment, or indirection through valid iterators. 3) Types S and I model no-throw-sentinel-for only if no exceptions are thrown from copy construction, move construction, copy assignment, move assignment, or comparisons between valid values of type I and S . 4) A type R models no-throw-input-range only if no exceptions are thrown from calls to ranges:: begin and ranges:: end on an object of type R . [ edit ] Notes These concepts allow some operations on iterators and sentinels to throw exceptions, e.g. operations on invalid values. [ edit ] See also input_iterator (C++20) specifies that a type is an input iterator, that is, its referenced values can be read and it can be both pre- and post-incremented (concept) [edit] forward_iterator (C++20) specifies that an input_iterator is a forward iterator, supporting equality comparison and multi-pass (concept) [edit] sentinel_for (C++20) specifies a type is a sentinel for an input_or_output_iterator type (concept) [edit] ranges::input_range (C++20) specifies a range whose iterator type satisfies input_iterator (concept) [edit] ranges::forward_range (C++20) specifies a range whose iterator type satisfies forward_iterator (concept) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/nothrow_concepts&oldid=156065 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 1 August 2023, at 23:19. Privacy policy About cppreference.com Disclaimers