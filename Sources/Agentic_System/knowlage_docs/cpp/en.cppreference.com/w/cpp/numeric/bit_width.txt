std::bit_width - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: bit_width From cppreference.com < cpp ‎ | numeric C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Bit manipulation bit_cast (C++20) byteswap (C++23) Integral powers of 2 has_single_bit (C++20) bit_ceil (C++20) bit_floor (C++20) bit_width (C++20) Rotating rotl (C++20) rotr (C++20) Counting countl_zero (C++20) countl_one (C++20) countr_zero (C++20) countr_one (C++20) popcount (C++20) Endian endian (C++20) [edit] Defined in header <bit> template < class T > constexpr int bit_width ( T x ) noexcept ; (since C++20) If x is not zero, calculates the number of bits needed to store the value x , that is, \(1 + \lfloor \log_2(x) \rfloor\) 1 + floor(log 2 (x)) . If x is zero, returns zero. This overload participates in overload resolution only if T is an unsigned integer type (that is, unsigned char , unsigned short , unsigned int , unsigned long , unsigned long long , or an extended unsigned integer type). Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 Defect reports 6 See also [ edit ] Parameters x - unsigned integer value [ edit ] Return value Zero if x is zero; otherwise, one plus the base-2 logarithm of x , with any fractional part discarded. [ edit ] Notes This function is equivalent to return std:: numeric_limits < T > :: digits - std:: countl_zero ( x ) ; . Feature-test macro Value Std Feature __cpp_lib_int_pow2 202002L (C++20) Integral power-of- 2 operations [ edit ] Example Run this code #include <bit> #include <bitset> #include <iostream> int main ( ) { for ( unsigned x { } ; x ! = 010 ; ++ x ) std:: cout << "bit_width( " << std:: bitset < 4 > { x } << " ) = " << std :: bit_width ( x ) << ' \n ' ; } Output: bit_width( 0000 ) = 0 bit_width( 0001 ) = 1 bit_width( 0010 ) = 2 bit_width( 0011 ) = 2 bit_width( 0100 ) = 3 bit_width( 0101 ) = 3 bit_width( 0110 ) = 3 bit_width( 0111 ) = 3 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 3656 C++20 the return type of bit_width is the same as the type of its function argument made it int [ edit ] See also countl_zero (C++20) counts the number of consecutive ​ 0 ​ bits, starting from the most significant bit (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/bit_width&oldid=182063 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 19 March 2025, at 15:22. Privacy policy About cppreference.com Disclaimers