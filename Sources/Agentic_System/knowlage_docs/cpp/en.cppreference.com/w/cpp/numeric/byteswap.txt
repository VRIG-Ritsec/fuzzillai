std::byteswap - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: byteswap From cppreference.com < cpp ‎ | numeric C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Bit manipulation bit_cast (C++20) byteswap (C++23) Integral powers of 2 has_single_bit (C++20) bit_ceil (C++20) bit_floor (C++20) bit_width (C++20) Rotating rotl (C++20) rotr (C++20) Counting countl_zero (C++20) countl_one (C++20) countr_zero (C++20) countr_one (C++20) popcount (C++20) Endian endian (C++20) [edit] Defined in header <bit> template < class T > constexpr T byteswap ( T n ) noexcept ; (since C++23) Reverses the bytes in the given integer value n . std::byteswap participates in overload resolution only if T satisfies integral , i.e., T is an integer type. The program is ill-formed if T has padding bits. Contents 1 Parameters 2 Return value 3 Notes 4 Possible implementation 5 Example 6 See also [ edit ] Parameters n - integer value [ edit ] Return value An integer value of type T whose object representation comprises the bytes of that of n in reversed order. [ edit ] Notes This function is useful for processing data of different endianness. Feature-test macro Value Std Feature __cpp_lib_byteswap 202110L (C++23) std::byteswap [ edit ] Possible implementation template < std:: integral T > constexpr T byteswap ( T value ) noexcept { static_assert ( std:: has_unique_object_representations_v < T > , "T may not have padding bits" ) ; auto value_representation = std:: bit_cast < std:: array < std:: byte , sizeof ( T ) >> ( value ) ; std :: ranges:: reverse ( value_representation ) ; return std:: bit_cast < T > ( value_representation ) ; } [ edit ] Example Run this code #include <bit> #include <concepts> #include <cstdint> #include <iomanip> #include <iostream> template < std:: integral T > void dump ( T v, char term = ' \n ' ) { std:: cout << std:: hex << std:: uppercase << std:: setfill ( '0' ) << std:: setw ( sizeof ( T ) * 2 ) << v << " : " ; for ( std:: size_t i { } ; i ! = sizeof ( T ) ; ++ i, v >>= 8 ) std:: cout << std:: setw ( 2 ) << static_cast < unsigned > ( T ( 0xFF ) & v ) << ' ' ; std:: cout << std:: dec << term ; } int main ( ) { static_assert ( std :: byteswap ( 'a' ) == 'a' ) ; std:: cout << "byteswap for U16: \n " ; constexpr auto x = std:: uint16_t ( 0xCAFE ) ; dump ( x ) ; dump ( std :: byteswap ( x ) ) ; std:: cout << " \n byteswap for U32: \n " ; constexpr auto y = std:: uint32_t ( 0xDEADBEEFu ) ; dump ( y ) ; dump ( std :: byteswap ( y ) ) ; std:: cout << " \n byteswap for U64: \n " ; constexpr auto z = std:: uint64_t { 0x0123456789ABCDEFull } ; dump ( z ) ; dump ( std :: byteswap ( z ) ) ; } Possible output: byteswap for U16: CAFE : FE CA FECA : CA FE byteswap for U32: DEADBEEF : EF BE AD DE EFBEADDE : DE AD BE EF byteswap for U64: 0123456789ABCDEF : EF CD AB 89 67 45 23 01 EFCDAB8967452301 : 01 23 45 67 89 AB CD EF [ edit ] See also endian (C++20) indicates the endianness of scalar types (enum) [edit] rotl (C++20) computes the result of bitwise left-rotation (function template) [edit] rotr (C++20) computes the result of bitwise right-rotation (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/byteswap&oldid=178981 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 2 January 2025, at 10:00. Privacy policy About cppreference.com Disclaimers