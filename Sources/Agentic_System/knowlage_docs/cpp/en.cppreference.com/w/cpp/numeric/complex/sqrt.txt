std::sqrt(std::complex) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: sqrt (std::complex) From cppreference.com < cpp ‎ | numeric ‎ | complex C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] std::complex Member functions complex::complex complex::operator= complex::real complex::imag complex::operator+= complex::operator-= complex::operator*= complex::operator/= Non-member functions operator+ operator- operator+ operator- operator* operator/ operator== operator!= (until C++20) operator<< operator>> get (std::complex) (C++26) real imag abs arg norm conj proj (C++11) polar operator""i operator""if operator""il (C++14) (C++14) (C++14) Exponential functions log log10 exp Power functions pow sqrt Trigonometric functions sin cos tan asin (C++11) acos (C++11) atan (C++11) Hyperbolic functions sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Helper types tuple_size <std::complex> (C++26) tuple_element <std::complex> (C++26) [edit] Defined in header <complex> template < class T > std:: complex < T > sqrt ( const std:: complex < T > & z ) ; Computes the square root of the complex number z with a branch cut along the negative real axis. Contents 1 Parameters 2 Return value 3 Error handling and special values 4 Notes 5 Example 6 Defect reports 7 See also [ edit ] Parameters z - complex number to take the square root of [ edit ] Return value If no errors occur, returns the square root of z , in the range of the right half-plane, including the imaginary axis ( [0; +∞) along the real axis and (−∞; +∞) along the imaginary axis). [ edit ] Error handling and special values Errors are reported consistent with math_errhandling . If the implementation supports IEEE floating-point arithmetic, The function is continuous onto the branch cut taking into account the sign of imaginary part std:: sqrt ( std:: conj ( z ) ) == std:: conj ( std:: sqrt ( z ) ) If z is (±0,+0) , the result is (+0,+0) If z is (x,+∞) , the result is (+∞,+∞) even if x is NaN If z is (x,NaN) , the result is (NaN,NaN) (unless x is ±∞) and FE_INVALID may be raised If z is (-∞,y) , the result is (+0,+∞) for finite positive y If z is (+∞,y) , the result is (+∞,+0) for finite positive y If z is (-∞,NaN) , the result is (NaN,∞) (sign of imaginary part unspecified) If z is (+∞,NaN) , the result is (+∞,NaN) If z is (NaN,y) , the result is (NaN,NaN) and FE_INVALID may be raised If z is (NaN,NaN) , the result is (NaN,NaN) [ edit ] Notes The semantics of this function are intended to be consistent with the C function csqrt . [ edit ] Example Run this code #include <complex> #include <iostream> int main ( ) { std:: cout << "Square root of -4 is " << std:: sqrt ( std:: complex < double > ( - 4.0 , 0.0 ) ) << ' \n ' << "Square root of (-4,-0) is " << std:: sqrt ( std:: complex < double > ( - 4.0 , - 0.0 ) ) << " (the other side of the cut) \n " ; } Output: Square root of -4 is (0,2) Square root of (-4,-0) is (0,-2) (the other side of the cut) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2597 C++98 specification mishandles signed zero imaginary parts erroneous requirement removed [ edit ] See also pow (std::complex) complex power, one or both arguments may be a complex number (function template) [edit] sqrt sqrtf sqrtl (C++11) (C++11) computes square root ( \(\small{\sqrt{x}}\) √ x ) (function) [edit] sqrt (std::valarray) applies the function std::sqrt to each element of valarray (function template) [edit] C documentation for csqrt Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/sqrt&oldid=150872 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 22 April 2023, at 08:27. Privacy policy About cppreference.com Disclaimers