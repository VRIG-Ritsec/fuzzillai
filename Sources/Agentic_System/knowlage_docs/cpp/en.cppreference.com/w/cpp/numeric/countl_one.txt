std::countl_one - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: countl_one From cppreference.com < cpp ‎ | numeric C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Bit manipulation bit_cast (C++20) byteswap (C++23) Integral powers of 2 has_single_bit (C++20) bit_ceil (C++20) bit_floor (C++20) bit_width (C++20) Rotating rotl (C++20) rotr (C++20) Counting countl_zero (C++20) countl_one (C++20) countr_zero (C++20) countr_one (C++20) popcount (C++20) Endian endian (C++20) [edit] Defined in header <bit> template < class T > constexpr int countl_one ( T x ) noexcept ; (since C++20) Returns the number of consecutive 1 (“one”) bits in the value of x , starting from the most significant bit (“left”). This overload participates in overload resolution only if T is an unsigned integer type (that is, unsigned char , unsigned short , unsigned int , unsigned long , unsigned long long , or an extended unsigned integer type). Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters x - value of unsigned integer type [ edit ] Return value The number of consecutive 1 bits in the value of x , starting from the most significant bit. [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_bitops 201907L (C++20) Bit operations [ edit ] Example Run this code #include <bit> #include <bitset> #include <cstdint> #include <iostream> int main ( ) { for ( const std:: uint8_t i : { 0 , 0b11111111 , 0b01111111 , 0b11100011 } ) std:: cout << "countl_one( " << std:: bitset < 8 > ( i ) << " ) = " << std :: countl_one ( i ) << ' \n ' ; } Output: countl_one( 00000000 ) = 0 countl_one( 11111111 ) = 8 countl_one( 01111111 ) = 0 countl_one( 11100011 ) = 3 [ edit ] See also countl_zero (C++20) counts the number of consecutive ​ 0 ​ bits, starting from the most significant bit (function template) [edit] countr_zero (C++20) counts the number of consecutive ​ 0 ​ bits, starting from the least significant bit (function template) [edit] countr_one (C++20) counts the number of consecutive 1 bits, starting from the least significant bit (function template) [edit] popcount (C++20) counts the number of 1 bits in an unsigned integer (function template) [edit] has_single_bit (C++20) checks if a number is an integral power of 2 (function template) [edit] count returns the number of bits set to true (public member function of std::bitset<N> ) [edit] all any none checks if all, any or none of the bits are set to true (public member function of std::bitset<N> ) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/countl_one&oldid=182059 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 19 March 2025, at 15:17. Privacy policy About cppreference.com Disclaimers