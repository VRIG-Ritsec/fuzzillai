std::has_single_bit - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: has_single_bit From cppreference.com < cpp ‎ | numeric C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Bit manipulation bit_cast (C++20) byteswap (C++23) Integral powers of 2 has_single_bit (C++20) bit_ceil (C++20) bit_floor (C++20) bit_width (C++20) Rotating rotl (C++20) rotr (C++20) Counting countl_zero (C++20) countl_one (C++20) countr_zero (C++20) countr_one (C++20) popcount (C++20) Endian endian (C++20) [edit] Defined in header <bit> template < class T > constexpr bool has_single_bit ( T x ) noexcept ; (since C++20) Checks if x is an integral power of two. This overload participates in overload resolution only if T is an unsigned integer type (that is, unsigned char , unsigned short , unsigned int , unsigned long , unsigned long long , or an extended unsigned integer type). Contents 1 Parameters 2 Return value 3 Notes 4 Possible implementation 5 Example 6 See also [ edit ] Parameters x - value of unsigned integer type [ edit ] Return value true if x is an integral power of two; otherwise false . [ edit ] Notes Prior to P1956R1 , the proposed name for this function template was ispow2 . Feature-test macro Value Std Feature __cpp_lib_int_pow2 202002L (C++20) Integral power-of- 2 operations [ edit ] Possible implementation template < typename T, typename ... U > concept neither = ( ! std:: same_as < T, U > && ... ) ; template < typename T > concept strict_unsigned_integral = std:: unsigned_integral < T > && neither < T, bool , char , char8_t, char16_t , char32_t , wchar_t > ; // First version constexpr bool has_single_bit ( strict_unsigned_integral auto x ) noexcept { return x && ! ( x & ( x - 1 ) ) ; } // Second version constexpr bool has_single_bit ( strict_unsigned_integral auto x ) noexcept { return std:: popcount ( x ) == 1 ; } [ edit ] Example Run this code #include <bit> #include <bitset> #include <cmath> #include <iostream> int main ( ) { for ( auto u { 0u } ; u ! = 0B1010 ; ++ u ) { std:: cout << "u = " << u << " = " << std:: bitset < 4 > ( u ) ; if ( std :: has_single_bit ( u ) ) std:: cout << " = 2^" << std:: log2 ( u ) << " (is power of two)" ; std:: cout << ' \n ' ; } } Output: u = 0 = 0000 u = 1 = 0001 = 2^0 (is power of two) u = 2 = 0010 = 2^1 (is power of two) u = 3 = 0011 u = 4 = 0100 = 2^2 (is power of two) u = 5 = 0101 u = 6 = 0110 u = 7 = 0111 u = 8 = 1000 = 2^3 (is power of two) u = 9 = 1001 [ edit ] See also popcount (C++20) counts the number of 1 bits in an unsigned integer (function template) [edit] count returns the number of bits set to true (public member function of std::bitset<N> ) [edit] test accesses specific bit (public member function of std::bitset<N> ) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/has_single_bit&oldid=182066 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 19 March 2025, at 15:23. Privacy policy About cppreference.com Disclaimers