std::fpclassify - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: fpclassify From cppreference.com < cpp ‎ | numeric ‎ | math C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Common mathematical functions Functions Basic operations abs(int) labs llabs imaxabs (C++11) abs(float) fabs div ldiv lldiv imaxdiv (C++11) fmod remainder (C++11) remquo (C++11) fma (C++11) fmax (C++11) fmin (C++11) fdim (C++11) nan nanf nanl (C++11) (C++11) (C++11) Exponential functions exp exp2 (C++11) expm1 (C++11) log log10 log1p (C++11) log2 (C++11) Power functions sqrt cbrt (C++11) hypot (C++11) pow Trigonometric and hyperbolic functions sin cos tan asin acos atan atan2 sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Error and gamma functions erf (C++11) erfc (C++11) lgamma (C++11) tgamma (C++11) Nearest integer floating point operations ceil floor round lround llround (C++11) (C++11) (C++11) trunc (C++11) nearbyint (C++11) rint lrint llrint (C++11) (C++11) (C++11) Floating point manipulation functions ldexp scalbn scalbln (C++11) (C++11) ilogb (C++11) logb (C++11) frexp modf nextafter nexttoward (C++11) (C++11) copysign (C++11) Classification and comparison fpclassify (C++11) isfinite (C++11) isinf (C++11) isnan (C++11) isnormal (C++11) signbit (C++11) isgreater (C++11) isgreaterequal (C++11) isless (C++11) islessequal (C++11) islessgreater (C++11) isunordered (C++11) Types div_t ldiv_t lldiv_t (C++11) imaxdiv_t (C++11) float_t (C++11) double_t (C++11) Macro constants HUGE_VALF HUGE_VAL HUGE_VALL (C++11) (C++11) math_errhandling MATH_ERRNO MATH_ERREXCEPT (C++11) INFINITY (C++11) NAN (C++11) Classification FP_NORMAL FP_SUBNORMAL FP_ZERO FP_INFINITE FP_NAN (C++11) (C++11) (C++11) (C++11) (C++11) [edit] Defined in header <cmath> (1) int fpclassify ( float num ) ; int fpclassify ( double num ) ; int fpclassify ( long double num ) ; (since C++11) (until C++23) constexpr int fpclassify ( /* floating-point-type */ num ) ; (since C++23) Additional overloads Defined in header <cmath> template < class Integer > int fpclassify ( Integer num ) ; (A) (since C++11) (constexpr since C++23) 1) Categorizes floating point value num into the following categories: zero, subnormal, normal, infinite, NAN, or implementation-defined category. The library provides overloads of std::fpclassify for all cv-unqualified floating-point types as the type of the parameter num . (since C++23) A) Additional overloads are provided for all integer types, which are treated as double . Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters num - floating-point or integer value [ edit ] Return value one of FP_INFINITE , FP_NAN , FP_NORMAL , FP_SUBNORMAL , FP_ZERO or implementation-defined type, specifying the category of num . [ edit ] Notes The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their argument num of integer type, std :: fpclassify ( num ) has the same effect as std :: fpclassify ( static_cast < double > ( num ) ) . [ edit ] Example Run this code #include <cfloat> #include <cmath> #include <iostream> auto show_classification ( double x ) { switch ( std :: fpclassify ( x ) ) { case FP_INFINITE : return "Inf" ; case FP_NAN : return "NaN" ; case FP_NORMAL : return "normal" ; case FP_SUBNORMAL : return "subnormal" ; case FP_ZERO : return "zero" ; default : return "unknown" ; } } int main ( ) { std:: cout << "1.0/0.0 is " << show_classification ( 1 / 0.0 ) << ' \n ' << "0.0/0.0 is " << show_classification ( 0.0 / 0.0 ) << ' \n ' << "DBL_MIN/2 is " << show_classification ( DBL_MIN / 2 ) << ' \n ' << "-0.0 is " << show_classification ( - 0.0 ) << ' \n ' << "1.0 is " << show_classification ( 1.0 ) << ' \n ' ; } Output: 1.0/0.0 is Inf 0.0/0.0 is NaN DBL_MIN/2 is subnormal -0.0 is zero 1.0 is normal [ edit ] See also isfinite (C++11) checks if the given number has finite value (function) [edit] isinf (C++11) checks if the given number is infinite (function) [edit] isnan (C++11) checks if the given number is NaN (function) [edit] isnormal (C++11) checks if the given number is normal (function) [edit] numeric_limits provides an interface to query properties of all fundamental numeric types (class template) [edit] C documentation for fpclassify Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/fpclassify&oldid=177741 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 20 November 2024, at 08:47. Privacy policy About cppreference.com Disclaimers