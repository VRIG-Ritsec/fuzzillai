std::isnormal - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: isnormal From cppreference.com < cpp ‎ | numeric ‎ | math C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Common mathematical functions Functions Basic operations abs(int) labs llabs imaxabs (C++11) abs(float) fabs div ldiv lldiv imaxdiv (C++11) fmod remainder (C++11) remquo (C++11) fma (C++11) fmax (C++11) fmin (C++11) fdim (C++11) nan nanf nanl (C++11) (C++11) (C++11) Exponential functions exp exp2 (C++11) expm1 (C++11) log log10 log1p (C++11) log2 (C++11) Power functions sqrt cbrt (C++11) hypot (C++11) pow Trigonometric and hyperbolic functions sin cos tan asin acos atan atan2 sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Error and gamma functions erf (C++11) erfc (C++11) lgamma (C++11) tgamma (C++11) Nearest integer floating point operations ceil floor round lround llround (C++11) (C++11) (C++11) trunc (C++11) nearbyint (C++11) rint lrint llrint (C++11) (C++11) (C++11) Floating point manipulation functions ldexp scalbn scalbln (C++11) (C++11) ilogb (C++11) logb (C++11) frexp modf nextafter nexttoward (C++11) (C++11) copysign (C++11) Classification and comparison fpclassify (C++11) isfinite (C++11) isinf (C++11) isnan (C++11) isnormal (C++11) signbit (C++11) isgreater (C++11) isgreaterequal (C++11) isless (C++11) islessequal (C++11) islessgreater (C++11) isunordered (C++11) Types div_t ldiv_t lldiv_t (C++11) imaxdiv_t (C++11) float_t (C++11) double_t (C++11) Macro constants HUGE_VALF HUGE_VAL HUGE_VALL (C++11) (C++11) math_errhandling MATH_ERRNO MATH_ERREXCEPT (C++11) INFINITY (C++11) NAN (C++11) Classification FP_NORMAL FP_SUBNORMAL FP_ZERO FP_INFINITE FP_NAN (C++11) (C++11) (C++11) (C++11) (C++11) [edit] Defined in header <cmath> (1) bool isnormal ( float num ) ; bool isnormal ( double num ) ; bool isnormal ( long double num ) ; (since C++11) (until C++23) constexpr bool isnormal ( /*floating-point-type*/ num ) ; (since C++23) SIMD overload (since C++26) Defined in header <simd> template < /*math-floating-point*/ V > constexpr typename /*deduced-simd-t*/ < V > :: mask_type isnormal ( const V & v_num ) ; (S) (since C++26) Additional overloads Defined in header <cmath> template < class Integer > bool isnormal ( Integer num ) ; (A) (since C++11) (constexpr since C++23) 1) Determines if the given floating point number num is normal, i.e. is neither zero, subnormal, infinite, nor NaN. The library provides overloads for all cv-unqualified floating-point types as the type of the parameter num . (since C++23) S) The SIMD overload performs an element-wise std::isnormal on v_num . (See math-floating-point and deduced-simd-t for their definitions.) (since C++26) A) Additional overloads are provided for all integer types, which are treated as double . Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters num - floating-point or integer value v_num - a data-parallel object of std::basic_simd specialization where its element type is a floating-point type [ edit ] Return value 1) true if num is normal, false otherwise. S) A data-parallel mask object where the i th element equals true if v_num [ i ] is normal or false otherwise for all i in the range [ ​ 0 ​ , v_num. size ( ) ) . [ edit ] Notes The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their argument num of integer type, std :: isnormal ( num ) has the same effect as std :: isnormal ( static_cast < double > ( num ) ) . [ edit ] Example Run this code #include <cfloat> #include <cmath> #include <iostream> int main ( ) { std:: cout << std:: boolalpha << "isnormal(NaN) = " << std :: isnormal ( NAN ) << ' \n ' << "isnormal(Inf) = " << std :: isnormal ( INFINITY ) << ' \n ' << "isnormal(0.0) = " << std :: isnormal ( 0.0 ) << ' \n ' << "isnormal(DBL_MIN/2.0) = " << std :: isnormal ( DBL_MIN / 2.0 ) << ' \n ' << "isnormal(1.0) = " << std :: isnormal ( 1.0 ) << ' \n ' ; } Output: isnormal(NaN) = false isnormal(Inf) = false isnormal(0.0) = false isnormal(DBL_MIN/2.0) = false isnormal(1.0) = true [ edit ] See also fpclassify (C++11) categorizes the given floating-point value (function) [edit] isfinite (C++11) checks if the given number has finite value (function) [edit] isinf (C++11) checks if the given number is infinite (function) [edit] isnan (C++11) checks if the given number is NaN (function) [edit] C documentation for isnormal Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/isnormal&oldid=149457 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 20 March 2023, at 18:58. Privacy policy About cppreference.com Disclaimers