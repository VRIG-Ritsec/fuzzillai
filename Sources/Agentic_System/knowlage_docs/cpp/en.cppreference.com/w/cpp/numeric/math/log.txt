std::log, std::logf, std::logl - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: log, std:: logf, std:: logl From cppreference.com < cpp ‎ | numeric ‎ | math C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Common mathematical functions Functions Basic operations abs(int) labs llabs imaxabs (C++11) abs(float) fabs div ldiv lldiv imaxdiv (C++11) fmod remainder (C++11) remquo (C++11) fma (C++11) fmax (C++11) fmin (C++11) fdim (C++11) nan nanf nanl (C++11) (C++11) (C++11) Exponential functions exp exp2 (C++11) expm1 (C++11) log log10 log1p (C++11) log2 (C++11) Power functions sqrt cbrt (C++11) hypot (C++11) pow Trigonometric and hyperbolic functions sin cos tan asin acos atan atan2 sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Error and gamma functions erf (C++11) erfc (C++11) lgamma (C++11) tgamma (C++11) Nearest integer floating point operations ceil floor round lround llround (C++11) (C++11) (C++11) trunc (C++11) nearbyint (C++11) rint lrint llrint (C++11) (C++11) (C++11) Floating point manipulation functions ldexp scalbn scalbln (C++11) (C++11) ilogb (C++11) logb (C++11) frexp modf nextafter nexttoward (C++11) (C++11) copysign (C++11) Classification and comparison fpclassify (C++11) isfinite (C++11) isinf (C++11) isnan (C++11) isnormal (C++11) signbit (C++11) isgreater (C++11) isgreaterequal (C++11) isless (C++11) islessequal (C++11) islessgreater (C++11) isunordered (C++11) Types div_t ldiv_t lldiv_t (C++11) imaxdiv_t (C++11) float_t (C++11) double_t (C++11) Macro constants HUGE_VALF HUGE_VAL HUGE_VALL (C++11) (C++11) math_errhandling MATH_ERRNO MATH_ERREXCEPT (C++11) INFINITY (C++11) NAN (C++11) Classification FP_NORMAL FP_SUBNORMAL FP_ZERO FP_INFINITE FP_NAN (C++11) (C++11) (C++11) (C++11) (C++11) [edit] Defined in header <cmath> (1) float log ( float num ) ; double log ( double num ) ; long double log ( long double num ) ; (until C++23) /*floating-point-type*/ log ( /*floating-point-type*/ num ) ; (since C++23) (constexpr since C++26) float logf ( float num ) ; (2) (since C++11) (constexpr since C++26) long double logl ( long double num ) ; (3) (since C++11) (constexpr since C++26) SIMD overload (since C++26) Defined in header <simd> template < /*math-floating-point*/ V > constexpr /*deduced-simd-t*/ < V > log ( const V & v_num ) ; (S) (since C++26) Additional overloads (since C++11) Defined in header <cmath> template < class Integer > double log ( Integer num ) ; (A) (constexpr since C++26) 1-3) Computes the natural (base- e ) logarithm of num . The library provides overloads of std::log for all cv-unqualified floating-point types as the type of the parameter. (since C++23) S) The SIMD overload performs an element-wise std::log on v_num . (See math-floating-point and deduced-simd-t for their definitions.) (since C++26) A) Additional overloads are provided for all integer types, which are treated as double . (since C++11) Contents 1 Parameters 2 Return value 3 Error handling 4 Notes 5 Example 6 See also [ edit ] Parameters num - floating-point or integer value [ edit ] Return value If no errors occur, the natural (base- e ) logarithm of num ( ln(num) or log e (num) ) is returned. If a domain error occurs, an implementation-defined value is returned (NaN where supported). If a pole error occurs, -HUGE_VAL , -HUGE_VALF , or -HUGE_VALL is returned. [ edit ] Error handling Errors are reported as specified in math_errhandling . Domain error occurs if num is less than zero. Pole error may occur if num is zero. If the implementation supports IEEE floating-point arithmetic (IEC 60559), If the argument is ±0, -∞ is returned and FE_DIVBYZERO is raised. If the argument is 1, +0 is returned. If the argument is negative, NaN is returned and FE_INVALID is raised. If the argument is +∞, +∞ is returned. If the argument is NaN, NaN is returned. [ edit ] Notes The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their argument num of integer type, std :: log ( num ) has the same effect as std :: log ( static_cast < double > ( num ) ) . [ edit ] Example Run this code #include <cerrno> #include <cfenv> #include <cmath> #include <cstring> #include <iostream> // #pragma STDC FENV_ACCESS ON int main ( ) { std:: cout << "log(1) = " << std :: log ( 1 ) << ' \n ' << "base-5 logarithm of 125 = " << std :: log ( 125 ) / std :: log ( 5 ) << ' \n ' ; // special values std:: cout << "log(1) = " << std :: log ( 1 ) << ' \n ' << "log(+Inf) = " << std :: log ( INFINITY ) << ' \n ' ; // error handling errno = 0 ; std:: feclearexcept ( FE_ALL_EXCEPT ) ; std:: cout << "log(0) = " << std :: log ( 0 ) << ' \n ' ; if ( errno == ERANGE ) std:: cout << " errno == ERANGE: " << std:: strerror ( errno ) << ' \n ' ; if ( std:: fetestexcept ( FE_DIVBYZERO ) ) std:: cout << " FE_DIVBYZERO raised \n " ; } Possible output: log(1) = 0 base-5 logarithm of 125 = 3 log(1) = 0 log(+Inf) = inf log(0) = -inf errno == ERANGE: Numerical result out of range FE_DIVBYZERO raised [ edit ] See also log10 log10f log10l (C++11) (C++11) computes common (base 10 ) logarithm ( \({\small\log_{10}{x}}\) log 10 (x) ) (function) [edit] log2 log2f log2l (C++11) (C++11) (C++11) base 2 logarithm of the given number ( \({\small\log_{2}{x}}\) log 2 (x) ) (function) [edit] log1p log1pf log1pl (C++11) (C++11) (C++11) natural logarithm (to base e ) of 1 plus the given number ( \({\small\ln{(1+x)}}\) ln(1+x) ) (function) [edit] exp expf expl (C++11) (C++11) returns e raised to the given power ( \({\small e^x}\) e x ) (function) [edit] log (std::complex) complex natural logarithm with the branch cuts along the negative real axis (function template) [edit] log (std::valarray) applies the function std::log to each element of valarray (function template) [edit] C documentation for log Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/log&oldid=180293 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Polski Português Русский 中文 This page was last modified on 9 February 2025, at 10:48. Privacy policy About cppreference.com Disclaimers