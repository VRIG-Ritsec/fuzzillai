std::logb, std::logbf, std::logbl - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: logb, std:: logbf, std:: logbl From cppreference.com < cpp ‎ | numeric ‎ | math C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Common mathematical functions Functions Basic operations abs(int) labs llabs imaxabs (C++11) abs(float) fabs div ldiv lldiv imaxdiv (C++11) fmod remainder (C++11) remquo (C++11) fma (C++11) fmax (C++11) fmin (C++11) fdim (C++11) nan nanf nanl (C++11) (C++11) (C++11) Exponential functions exp exp2 (C++11) expm1 (C++11) log log10 log1p (C++11) log2 (C++11) Power functions sqrt cbrt (C++11) hypot (C++11) pow Trigonometric and hyperbolic functions sin cos tan asin acos atan atan2 sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Error and gamma functions erf (C++11) erfc (C++11) lgamma (C++11) tgamma (C++11) Nearest integer floating point operations ceil floor round lround llround (C++11) (C++11) (C++11) trunc (C++11) nearbyint (C++11) rint lrint llrint (C++11) (C++11) (C++11) Floating point manipulation functions ldexp scalbn scalbln (C++11) (C++11) ilogb (C++11) logb (C++11) frexp modf nextafter nexttoward (C++11) (C++11) copysign (C++11) Classification and comparison fpclassify (C++11) isfinite (C++11) isinf (C++11) isnan (C++11) isnormal (C++11) signbit (C++11) isgreater (C++11) isgreaterequal (C++11) isless (C++11) islessequal (C++11) islessgreater (C++11) isunordered (C++11) Types div_t ldiv_t lldiv_t (C++11) imaxdiv_t (C++11) float_t (C++11) double_t (C++11) Macro constants HUGE_VALF HUGE_VAL HUGE_VALL (C++11) (C++11) math_errhandling MATH_ERRNO MATH_ERREXCEPT (C++11) INFINITY (C++11) NAN (C++11) Classification FP_NORMAL FP_SUBNORMAL FP_ZERO FP_INFINITE FP_NAN (C++11) (C++11) (C++11) (C++11) (C++11) [edit] Defined in header <cmath> (1) float logb ( float num ) ; double logb ( double num ) ; long double logb ( long double num ) ; (until C++23) constexpr /*floating-point-type*/ logb ( /*floating-point-type*/ num ) ; (since C++23) float logbf ( float num ) ; (2) (since C++11) (constexpr since C++23) long double logbl ( long double num ) ; (3) (since C++11) (constexpr since C++23) SIMD overload (since C++26) Defined in header <simd> template < /*math-floating-point*/ V > constexpr /*deduced-simd-t*/ < V > logb ( const V & v_num ) ; (S) (since C++26) Additional overloads (since C++11) Defined in header <cmath> template < class Integer > double logb ( Integer num ) ; (A) (constexpr since C++23) 1-3) Extracts the value of the unbiased radix-independent exponent from the floating-point argument num , and returns it as a floating-point value. The library provides overloads of std::logb for all cv-unqualified floating-point types as the type of the parameter. (since C++23) S) The SIMD overload performs an element-wise std::logb on v_num . (See math-floating-point and deduced-simd-t for their definitions.) (since C++26) A) Additional overloads are provided for all integer types, which are treated as double . (since C++11) Formally, the unbiased exponent is the signed integral part of log r |num| (returned by this function as a floating-point value), for non-zero num , where r is std:: numeric_limits < T > :: radix and T is the floating-point type of num . If num is subnormal, it is treated as though it was normalized. Contents 1 Parameters 2 Return value 3 Error handling 4 Notes 5 Example 6 See also [ edit ] Parameters num - floating-point or integer value [ edit ] Return value If no errors occur, the unbiased exponent of num is returned as a signed floating-point value. If a domain error occurs, an implementation-defined value is returned. If a pole error occurs, -HUGE_VAL , -HUGE_VALF , or -HUGE_VALL is returned. [ edit ] Error handling Errors are reported as specified in math_errhandling . Domain or range error may occur if num is zero. If the implementation supports IEEE floating-point arithmetic (IEC 60559), If num is ±0, -∞ is returned and FE_DIVBYZERO is raised. If num is ±∞, +∞ is returned. If num is NaN, NaN is returned. In all other cases, the result is exact ( FE_INEXACT is never raised) and the current rounding mode is ignored. [ edit ] Notes POSIX requires that a pole error occurs if num is ±0. The value of the exponent returned by std::logb is always 1 less than the exponent returned by std::frexp because of the different normalization requirements: for the exponent e returned by std::logb , |num*r -e | is between 1 and r (typically between 1 and 2 ), but for the exponent e returned by std::frexp , |num*2 -e | is between 0.5 and 1 . The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their argument num of integer type, std :: logb ( num ) has the same effect as std :: logb ( static_cast < double > ( num ) ) . [ edit ] Example Compares different floating-point decomposition functions: Run this code #include <cfenv> #include <cmath> #include <iostream> #include <limits> // #pragma STDC FENV_ACCESS ON int main ( ) { double f = 123.45 ; std:: cout << "Given the number " << f << " or " << std:: hexfloat << f << std:: defaultfloat << " in hex, \n " ; double f3 ; double f2 = std:: modf ( f, & f3 ) ; std:: cout << "modf() makes " << f3 << " + " << f2 << ' \n ' ; int i ; f2 = std:: frexp ( f, & i ) ; std:: cout << "frexp() makes " << f2 << " * 2^" << i << ' \n ' ; i = std:: ilogb ( f ) ; std:: cout << "logb()/ilogb() make " << f / std:: scalbn ( 1.0 , i ) << " * " << std:: numeric_limits < double > :: radix << "^" << std:: ilogb ( f ) << ' \n ' ; // error handling std:: feclearexcept ( FE_ALL_EXCEPT ) ; std:: cout << "logb(0) = " << std :: logb ( 0 ) << ' \n ' ; if ( std:: fetestexcept ( FE_DIVBYZERO ) ) std:: cout << " FE_DIVBYZERO raised \n " ; } Possible output: Given the number 123.45 or 0x1.edccccccccccdp+6 in hex, modf() makes 123 + 0.45 frexp() makes 0.964453 * 2^7 logb()/ilogb() make 1.92891 * 2^6 logb(0) = -Inf FE_DIVBYZERO raised [ edit ] See also frexp frexpf frexpl (C++11) (C++11) decomposes a number into significand and base- 2 exponent (function) [edit] ilogb ilogbf ilogbl (C++11) (C++11) (C++11) extracts exponent of the number (function) [edit] scalbn scalbnf scalbnl scalbln scalblnf scalblnl (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) multiplies a number by FLT_RADIX raised to a power (function) [edit] C documentation for logb Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/logb&oldid=160772 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 15 October 2023, at 22:46. Privacy policy About cppreference.com Disclaimers