std::sinh, std::sinhf, std::sinhl - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: sinh, std:: sinhf, std:: sinhl From cppreference.com < cpp ‎ | numeric ‎ | math C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Common mathematical functions Functions Basic operations abs(int) labs llabs imaxabs (C++11) abs(float) fabs div ldiv lldiv imaxdiv (C++11) fmod remainder (C++11) remquo (C++11) fma (C++11) fmax (C++11) fmin (C++11) fdim (C++11) nan nanf nanl (C++11) (C++11) (C++11) Exponential functions exp exp2 (C++11) expm1 (C++11) log log10 log1p (C++11) log2 (C++11) Power functions sqrt cbrt (C++11) hypot (C++11) pow Trigonometric and hyperbolic functions sin cos tan asin acos atan atan2 sinh cosh tanh asinh (C++11) acosh (C++11) atanh (C++11) Error and gamma functions erf (C++11) erfc (C++11) lgamma (C++11) tgamma (C++11) Nearest integer floating point operations ceil floor round lround llround (C++11) (C++11) (C++11) trunc (C++11) nearbyint (C++11) rint lrint llrint (C++11) (C++11) (C++11) Floating point manipulation functions ldexp scalbn scalbln (C++11) (C++11) ilogb (C++11) logb (C++11) frexp modf nextafter nexttoward (C++11) (C++11) copysign (C++11) Classification and comparison fpclassify (C++11) isfinite (C++11) isinf (C++11) isnan (C++11) isnormal (C++11) signbit (C++11) isgreater (C++11) isgreaterequal (C++11) isless (C++11) islessequal (C++11) islessgreater (C++11) isunordered (C++11) Types div_t ldiv_t lldiv_t (C++11) imaxdiv_t (C++11) float_t (C++11) double_t (C++11) Macro constants HUGE_VALF HUGE_VAL HUGE_VALL (C++11) (C++11) math_errhandling MATH_ERRNO MATH_ERREXCEPT (C++11) INFINITY (C++11) NAN (C++11) Classification FP_NORMAL FP_SUBNORMAL FP_ZERO FP_INFINITE FP_NAN (C++11) (C++11) (C++11) (C++11) (C++11) [edit] Defined in header <cmath> (1) float sinh ( float num ) ; double sinh ( double num ) ; long double sinh ( long double num ) ; (until C++23) /*floating-point-type*/ sinh ( /*floating-point-type*/ num ) ; (since C++23) (constexpr since C++26) float sinhf ( float num ) ; (2) (since C++11) (constexpr since C++26) long double sinhl ( long double num ) ; (3) (since C++11) (constexpr since C++26) SIMD overload (since C++26) Defined in header <simd> template < /*math-floating-point*/ V > constexpr /*deduced-simd-t*/ < V > sinh ( const V & v_num ) ; (S) (since C++26) Additional overloads (since C++11) Defined in header <cmath> template < class Integer > double sinh ( Integer num ) ; (A) (constexpr since C++26) 1-3) Computes the hyperbolic sine of num . The library provides overloads of std::sinh for all cv-unqualified floating-point types as the type of the parameter. (since C++23) S) The SIMD overload performs an element-wise std::sinh on v_num . (See math-floating-point and deduced-simd-t for their definitions.) (since C++26) A) Additional overloads are provided for all integer types, which are treated as double . (since C++11) Contents 1 Parameters 2 Return value 3 Error handling 4 Notes 5 Example 6 See also [ edit ] Parameters num - floating-point or integer value [ edit ] Return value If no errors occur, the hyperbolic sine of num ( sinh(num) , or e num -e -num 2 ) is returned. If a range error due to overflow occurs, ±HUGE_VAL , ±HUGE_VALF , or ±HUGE_VALL is returned. If a range error occurs due to underflow, the correct result (after rounding) is returned. [ edit ] Error handling Errors are reported as specified in math_errhandling . If the implementation supports IEEE floating-point arithmetic (IEC 60559), if the argument is ±0 or ±∞, it is returned unmodified. if the argument is NaN, NaN is returned. [ edit ] Notes POSIX specifies that in case of underflow, num is returned unmodified, and if that is not supported, and implementation-defined value no greater than DBL_MIN , FLT_MIN , and LDBL_MIN is returned. The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their argument num of integer type, std :: sinh ( num ) has the same effect as std :: sinh ( static_cast < double > ( num ) ) . [ edit ] Example Run this code #include <cerrno> #include <cfenv> #include <cmath> #include <cstring> #include <iostream> // #pragma STDC FENV_ACCESS ON int main ( ) { const double x = 42 ; std:: cout << "sinh(1) = " << std :: sinh ( 1 ) << ' \n ' << "sinh(-1) = " << std :: sinh ( - 1 ) << ' \n ' << "log(sinh(" << x << ")+cosh(" << x << ")) = " << std:: log ( std :: sinh ( x ) + std:: cosh ( x ) ) << ' \n ' ; // special values std:: cout << "sinh(+0) = " << std :: sinh ( 0.0 ) << ' \n ' << "sinh(-0) = " << std :: sinh ( - 0.0 ) << ' \n ' ; // error handling errno = 0 ; std:: feclearexcept ( FE_ALL_EXCEPT ) ; std:: cout << "sinh(710.5) = " << std :: sinh ( 710.5 ) << ' \n ' ; if ( errno == ERANGE ) std:: cout << " errno == ERANGE: " << std:: strerror ( errno ) << ' \n ' ; if ( std:: fetestexcept ( FE_OVERFLOW ) ) std:: cout << " FE_OVERFLOW raised \n " ; } Output: sinh(1) = 1.1752 sinh(-1) = -1.1752 log(sinh(42)+cosh(42)) = 42 sinh(+0) = 0 sinh(-0) = -0 sinh(710.5) = inf errno == ERANGE: Numerical result out of range FE_OVERFLOW raised [ edit ] See also cosh coshf coshl (C++11) (C++11) computes hyperbolic cosine ( \({\small\cosh{x}}\) cosh(x) ) (function) [edit] tanh tanhf tanhl (C++11) (C++11) computes hyperbolic tangent ( \({\small\tanh{x}}\) tanh(x) ) (function) [edit] asinh asinhf asinhl (C++11) (C++11) (C++11) computes the inverse hyperbolic sine ( \({\small\operatorname{arsinh}{x}}\) arsinh(x) ) (function) [edit] sinh (std::complex) computes hyperbolic sine of a complex number ( \({\small\sinh{z}}\) sinh(z) ) (function template) [edit] sinh (std::valarray) applies the function std::sinh to each element of valarray (function template) [edit] C documentation for sinh Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/sinh&oldid=160747 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Polski Português Русский 中文 This page was last modified on 15 October 2023, at 10:47. Privacy policy About cppreference.com Disclaimers