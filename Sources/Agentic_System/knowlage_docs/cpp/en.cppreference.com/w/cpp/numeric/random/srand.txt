std::srand - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: srand From cppreference.com < cpp ‎ | numeric ‎ | random C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Pseudo-random number generation Uniform random bit generators uniform_random_bit_generator (C++20) Random number engines linear_congruential_engine (C++11) mersenne_twister_engine (C++11) subtract_with_carry_engine (C++11) philox_engine (C++26) Random number engine adaptors discard_block_engine (C++11) independent_bits_engine (C++11) shuffle_order_engine (C++11) Predefined random number generators Non-deterministic random numbers random_device (C++11) Utilities generate_canonical (C++11) seed_seq (C++11) Random number algorithms ranges::generate_random (C++26) C random library rand srand RAND_MAX Random number distributions Uniform distributions uniform_int_distribution (C++11) uniform_real_distribution (C++11) generate_canonical (C++11) Bernoulli distributions bernoulli_distribution (C++11) binomial_distribution (C++11) negative_binomial_distribution (C++11) geometric_distribution (C++11) Poisson distributions poisson_distribution (C++11) exponential_distribution (C++11) gamma_distribution (C++11) weibull_distribution (C++11) extreme_value_distribution (C++11) Normal distributions normal_distribution (C++11) lognormal_distribution (C++11) chi_squared_distribution (C++11) cauchy_distribution (C++11) fisher_f_distribution (C++11) student_t_distribution (C++11) Sampling distributions discrete_distribution (C++11) piecewise_constant_distribution (C++11) piecewise_linear_distribution (C++11) [edit] Defined in header <cstdlib> void srand ( unsigned seed ) ; Seeds the pseudo-random number generator used by std::rand() with the value seed . If std::rand() is used before any calls to srand() , std::rand() behaves as if it was seeded with srand ( 1 ) . Each time std::rand() is seeded with the same seed , it must produce the same sequence of values. srand() is not guaranteed to be thread-safe. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters seed - the seed value [ edit ] Return value (none) [ edit ] Notes Generally speaking, the pseudo-random number generator should only be seeded once, before any calls to rand() , at the start of the program. It should not be repeatedly seeded, or reseeded every time you wish to generate a new batch of pseudo-random numbers. Standard practice is to use the result of a call to std:: time ( 0 ) as the seed. However, std::time returns a std:: time_t value, and std:: time_t is not guaranteed to be an integral type. In practice, though, every major implementation defines std:: time_t to be an integral type, and this is also what POSIX requires. [ edit ] Example Run this code #include <cstdlib> #include <ctime> #include <iostream> int main ( ) { std :: srand ( std:: time ( 0 ) ) ; // use current time as seed for random generator std:: cout << "Random value on [0, " << RAND_MAX << "]: " << std:: rand ( ) << ' \n ' ; } Possible output: Random value on [0, 2147483647]: 1373858591 [ edit ] See also rand generates a pseudo-random number (function) [edit] RAND_MAX maximum possible value generated by std::rand (macro constant) [edit] reseed reseeds the per-thread random engine (function) [edit] C documentation for srand Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/srand&oldid=151436 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 6 May 2023, at 05:22. Privacy policy About cppreference.com Disclaimers