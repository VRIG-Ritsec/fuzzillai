std::ellint_3, std::ellint_3f, std::ellint_3l - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: ellint_3, std:: ellint_3f, std:: ellint_3l From cppreference.com < cpp ‎ | numeric ‎ | special functions C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] Mathematical special functions assoc_laguerre assoc_laguerref assoc_laguerrel assoc_legendre assoc_legendref assoc_legendrel beta betaf betal comp_ellint_1 comp_ellint_1f comp_ellint_1l comp_ellint_2 comp_ellint_2f comp_ellint_2l comp_ellint_3 comp_ellint_3f comp_ellint_3l cyl_bessel_i cyl_bessel_if cyl_bessel_il cyl_bessel_j cyl_bessel_jf cyl_bessel_jl cyl_bessel_k cyl_bessel_kf cyl_bessel_kl cyl_neumann cyl_neumannf cyl_neumannl ellint_1 ellint_1f ellint_1l ellint_2 ellint_2f ellint_2l ellint_3 ellint_3f ellint_3l expint expintf expintl hermite hermitef hermitel laguerre laguerref laguerrel legendre legendref legendrel riemann_zeta riemann_zetaf riemann_zetal sph_bessel sph_besself sph_bessell sph_legendre sph_legendref sph_legendrel sph_neumann sph_neumannf sph_neumannl [edit] Defined in header <cmath> (1) float ellint_3 ( float k, float nu, float phi ) ; double ellint_3 ( double k, double nu, double phi ) ; long double ellint_3 ( long double k, long double nu, long double phi ) ; (since C++17) (until C++23) /* floating-point-type */ ellint_3 ( /* floating-point-type */ k, /* floating-point-type */ nu, /* floating-point-type */ phi ) ; (since C++23) float ellint_3f ( float k, float nu, float phi ) ; (2) (since C++17) long double ellint_3l ( long double k, long double nu, long double phi ) ; (3) (since C++17) Additional overloads Defined in header <cmath> template < class Arithmetic1, class Arithmetic2, class Arithmetic3 > /* common-floating-point-type */ ellint_3 ( Arithmetic1 k, Arithmetic2 nu, Arithmetic3 phi ) ; (A) (since C++17) 1-3) Computes the incomplete elliptic integral of the third kind of k , nu , and phi . The library provides overloads of std::ellint_3 for all cv-unqualified floating-point types as the type of the parameters k , nu and phi . (since C++23) A) Additional overloads are provided for all other combinations of arithmetic types. Contents 1 Parameters 2 Return value 3 Error handling 4 Notes 5 Example 6 See also 7 External links [ edit ] Parameters k - elliptic modulus or eccentricity (a floating-point or integer value) nu - elliptic characteristic (a floating-point or integer value) phi - Jacobi amplitude (a floating-point or integer value, measured in radians) [ edit ] Return value If no errors occur, value of the incomplete elliptic integral of the third kind of k , nu , and phi , that is ∫ phi 0 dθ (1-nusin 2 θ) √ 1-k 2 sin 2 θ , is returned. [ edit ] Error handling Errors may be reported as specified in math_errhandling : If the argument is NaN, NaN is returned and domain error is not reported. If |k|>1 , a domain error may occur. [ edit ] Notes Implementations that do not support C++17, but support ISO 29124:2010 , provide this function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before including any standard library headers. Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1), provide this function in the header tr1/cmath and namespace std::tr1 . An implementation of this function is also available in boost.math . The additional overloads are not required to be provided exactly as (A) . They only need to be sufficient to ensure that for their first argument num1 , second argument num2 and third argument num3 : If num1 , num2 or num3 has type long double , then std :: ellint_3 ( num1, num2, num3 ) has the same effect as std :: ellint_3 ( static_cast < long double > ( num1 ) , static_cast < long double > ( num2 ) , static_cast < long double > ( num3 ) ) . Otherwise, if num1 , num2 and/or num3 has type double or an integer type, then std :: ellint_3 ( num1, num2, num3 ) has the same effect as std :: ellint_3 ( static_cast < double > ( num1 ) , static_cast < double > ( num2 ) , static_cast < double > ( num3 ) ) . Otherwise, if num1 , num2 or num3 has type float , then std :: ellint_3 ( num1, num2, num3 ) has the same effect as std :: ellint_3 ( static_cast < float > ( num1 ) , static_cast < float > ( num2 ) , static_cast < float > ( num3 ) ) . (until C++23) If num1 , num2 and num3 have arithmetic types, then std :: ellint_3 ( num1, num2, num3 ) has the same effect as std :: ellint_3 ( static_cast < /* common-floating-point-type */ > ( num1 ) , static_cast < /* common-floating-point-type */ > ( num2 ) , static_cast < /* common-floating-point-type */ > ( num3 ) ) , where /* common-floating-point-type */ is the floating-point type with the greatest floating-point conversion rank and greatest floating-point conversion subrank among the types of num1 , num2 and num3 , arguments of integer type are considered to have the same floating-point conversion rank as double . If no such floating-point type with the greatest rank and subrank exists, then overload resolution does not result in a usable candidate from the overloads provided. (since C++23) [ edit ] Example Run this code #include <cmath> #include <iostream> #include <numbers> int main ( ) { const double hpi = std:: numbers :: pi / 2 ; std:: cout << "Π(0,0,π/2) = " << std :: ellint_3 ( 0 , 0 , hpi ) << ' \n ' << "π/2 = " << hpi << ' \n ' ; } Output: Π(0,0,π/2) = 1.5708 π/2 = 1.5708 This section is incomplete Reason: this and other elliptic integrals deserve better examples.. perhaps calculate elliptic arc length? [ edit ] See also comp_ellint_3 comp_ellint_3f comp_ellint_3l (C++17) (C++17) (C++17) (complete) elliptic integral of the third kind (function) [edit] [ edit ] External links Weisstein, Eric W. "Elliptic Integral of the Third Kind." From MathWorld — A Wolfram Web Resource. Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/special_functions/ellint_3&oldid=149517 " Category : Todo with reason Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 22 March 2023, at 01:21. Privacy policy About cppreference.com Disclaimers