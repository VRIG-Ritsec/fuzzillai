std::valarray - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: valarray From cppreference.com < cpp ‎ | numeric C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Numerics library Common mathematical functions Mathematical special functions (C++17) Mathematical constants (C++20) Basic linear algebra algorithms (C++26) Data-parallel types (SIMD) (C++26) Floating-point environment (C++11) Complex numbers Numeric array ( valarray ) Pseudo-random number generation Bit manipulation (C++20) Saturation arithmetic (C++26) Factor operations gcd (C++17) lcm (C++17) Interpolations midpoint (C++20) lerp (C++20) Generic numeric operations iota (C++11) ranges::iota (C++23) accumulate inner_product adjacent_difference partial_sum reduce (C++17) transform_reduce (C++17) inclusive_scan (C++17) exclusive_scan (C++17) transform_inclusive_scan (C++17) transform_exclusive_scan (C++17) C-style checked integer arithmetic ckd_add (C++26) ckd_sub (C++26) ckd_mul (C++26) [edit] std::valarray Member functions valarray::valarray valarray::~valarray valarray::operator= valarray::operator[] valarray::swap valarray::size valarray::resize valarray::sum valarray::min valarray::max valarray::shift valarray::cshift valarray::apply valarray::operator+ valarray::operator- valarray::operator~ valarray::operator! valarray::operator+= valarray::operator-= valarray::operator*= valarray::operator/= valarray::operator%= valarray::operator&= valarray::operator|= valarray::operator^= valarray::operator<<= valarray::operator>>= Non-member functions swap (std::valarray) (C++11) begin (std::valarray) (C++11) end (std::valarray) (C++11) abs exp log log10 pow sqrt sin cos tan asin acos atan atan2 sinh cosh tanh operator* operator/ operator% operator+ operator- operator^ operator& operator| operator<< operator>> operator&& operator|| operator== operator!= operator< operator> operator<= operator>= Helper classes slice_array gslice_array indirect_array slice gslice mask_array Deduction guides (C++17) [edit] Defined in header <valarray> template < class T > class valarray ; std::valarray is the class for representing and manipulating arrays of values. It supports element-wise mathematical operations and various forms of generalized subscript operators, slicing and indirect access. Contents 1 Notes 2 Template parameters 3 Member types 4 Member functions 5 Non-member functions 5.1 Exponential functions 5.2 Power functions 5.3 Trigonometric functions 5.4 Hyperbolic functions 6 Helper classes 7 Deduction guides (since C++17) 8 See also [ edit ] Notes std::valarray and helper classes are defined to be free of certain forms of aliasing, thus allowing operations on these classes to be optimized similar to the effect of the keyword restrict in the C programming language. In addition, functions and operators that take valarray arguments are allowed to return proxy objects to make it possible for the compiler to optimize an expression such as v1 = a * v2 + v3 ; as a single loop that executes v1 [ i ] = a * v2 [ i ] + v3 [ i ] ; avoiding any temporaries or multiple passes. However, expression templates make the same optimization technique available for any C++ container, and the majority of numeric libraries prefer expression templates to valarrays for flexibility. Some C++ standard library implementations use expression templates to implement efficient operations on std::valarray (e.g. GNU libstdc++ and LLVM libc++). Only rarely are valarrays optimized any further, as in e.g. Intel Integrated Performance Primitives . [ edit ] Template parameters T - the type of the elements. The type must meet the NumericType requirements [ edit ] Member types Member type Definition value_type T [ edit ] Member functions (constructor) constructs new numeric array (public member function) [edit] (destructor) destructs the numeric array (public member function) [edit] operator= assigns the contents (public member function) [edit] operator[] get/set valarray element, slice, or mask (public member function) [edit] operator+ operator- operator~ operator! applies a unary arithmetic operator to each element of the valarray (public member function) [edit] operator+= operator-= operator*= operator/= operator%= operator&= operator|= operator^= operator<<= operator>>= applies compound assignment operator to each element of the valarray (public member function) [edit] swap swaps with another valarray (public member function) [edit] size returns the size of valarray (public member function) [edit] resize changes the size of valarray (public member function) [edit] sum calculates the sum of all elements (public member function) [edit] min returns the smallest element (public member function) [edit] max returns the largest element (public member function) [edit] shift zero-filling shift the elements of the valarray (public member function) [edit] cshift circular shift of the elements of the valarray (public member function) [edit] apply applies a function to every element of a valarray (public member function) [edit] [ edit ] Non-member functions std::swap (std::valarray) (C++11) specializes the std::swap algorithm (function template) [edit] std::begin (std::valarray) (C++11) overloads std::begin (function template) [edit] std::end (std::valarray) (C++11) specializes std::end (function template) [edit] operator+ operator- operator* operator/ operator% operator& operator| operator^ operator<< operator>> operator&& operator|| applies binary operators to each element of two valarrays, or a valarray and a value (function template) [edit] operator== operator!= operator< operator<= operator> operator>= compares two valarrays or a valarray with a value (function template) [edit] abs (std::valarray) applies the function abs to each element of valarray (function template) [edit] Exponential functions exp (std::valarray) applies the function std::exp to each element of valarray (function template) [edit] log (std::valarray) applies the function std::log to each element of valarray (function template) [edit] log10 (std::valarray) applies the function std::log10 to each element of valarray (function template) [edit] Power functions pow (std::valarray) applies the function std::pow to two valarrays or a valarray and a value (function template) [edit] sqrt (std::valarray) applies the function std::sqrt to each element of valarray (function template) [edit] Trigonometric functions sin (std::valarray) applies the function std::sin to each element of valarray (function template) [edit] cos (std::valarray) applies the function std::cos to each element of valarray (function template) [edit] tan (std::valarray) applies the function std::tan to each element of valarray (function template) [edit] asin (std::valarray) applies the function std::asin to each element of valarray (function template) [edit] acos (std::valarray) applies the function std::acos to each element of valarray (function template) [edit] atan (std::valarray) applies the function std::atan to each element of valarray (function template) [edit] atan2 (std::valarray) applies the function std::atan2 to a valarray and a value (function template) [edit] Hyperbolic functions sinh (std::valarray) applies the function std::sinh to each element of valarray (function template) [edit] cosh (std::valarray) applies the function std::cosh to each element of valarray (function template) [edit] tanh (std::valarray) applies the function std::tanh to each element of valarray (function template) [edit] [ edit ] Helper classes slice BLAS-like slice of a valarray: starting index, length, stride (class) [edit] slice_array proxy to a subset of a valarray after applying a slice (class template) [edit] gslice generalized slice of a valarray: starting index, set of lengths, set of strides (class) [edit] gslice_array proxy to a subset of a valarray after applying a gslice (class template) [edit] mask_array proxy to a subset of a valarray after applying a boolean mask operator[] (class template) [edit] indirect_array proxy to a subset of a valarray after applying indirect operator[] (class template) [edit] [ edit ] Deduction guides (since C++17) [ edit ] See also datapar::simd (C++26) convenience alias template for basic_simd that can specify its width (alias template) [edit] datapar::simd_mask (C++26) convenience alias template for basic_simd_mask that can specify its width (alias template) [edit] simd (parallelism TS v2) data-parallel vector type (class template) [edit] simd_mask (parallelism TS v2) data-parallel type with the element type bool (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/valarray&oldid=178686 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 21 December 2024, at 15:36. Privacy policy About cppreference.com Disclaimers