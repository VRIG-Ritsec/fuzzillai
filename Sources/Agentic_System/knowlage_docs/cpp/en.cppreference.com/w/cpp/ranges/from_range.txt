std::from_range, std::from_range_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: from_range, std:: from_range_t From cppreference.com < cpp ‎ | ranges C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Ranges library Range access begin cbegin end cend rbegin crbegin rend crend size ssize data cdata reserve_hint (C++26) empty Range conversions std::from_range_t std::from_range (C++23) (C++23) to (C++23) Dangling iterator handling dangling borrowed_iterator_t borrowed_subrange_t Range primitives range_size_t range_difference_t range_value_t elements_of (C++23) iterator_t const_iterator_t sentinel_t const_sentinel_t (C++23) (C++23) range_reference_t range_const_reference_t range_rvalue_reference_t range_common_reference_t (C++23) Range concepts range borrowed_range common_range sized_range viewable_range view input_range output_range forward_range bidirectional_range random_access_range contiguous_range approximately_sized_range (C++26) constant_range (C++23) Views view_interface subrange Range factories empty_view views::empty single_view views::single basic_istream_view views::istream iota_view views::iota repeat_view views::repeat (C++23) (C++23) Range adaptors views::all_t views::all as_rvalue_view views::as_rvalue (C++23) (C++23) filter_view views::filter transform_view views::transform take_view views::take take_while_view views::take_while common_view views::common views::counted to_input_view views::to_input (C++26) (C++26) ref_view drop_view views::drop drop_while_view views::drop_while lazy_split_view views::lazy_split split_view views::split join_view views::join join_with_view views::join_with (C++23) (C++23) concat_view views::concat (C++26) (C++26) cache_latest_view views::cache_latest (C++26) (C++26) owning_view reverse_view views::reverse as_const_view views::as_const (C++23) (C++23) elements_view views::elements keys_view views::keys values_view views::values enumerate_view views::enumerate (C++23) (C++23) zip_view views::zip (C++23) (C++23) zip_transform_view views::zip_transform (C++23) (C++23) adjacent_view views::adjacent (C++23) (C++23) views::pairwise (C++23) adjacent_transform_view views::adjacent_transform (C++23) (C++23) views::pairwise_transform (C++23) chunk_view views::chunk (C++23) (C++23) slide_view views::slide (C++23) (C++23) chunk_by_view views::chunk_by (C++23) (C++23) stride_view views::stride (C++23) (C++23) cartesian_product_view views::cartesian_product (C++23) (C++23) Range generators std::generator (C++23) Range adaptor closure objects range_adaptor_closure (C++23) Range adaptor objects Helper items copyable-box movable-box (until C++23) (C++23) simple-view non-propagating-cache [edit] Defined in header <ranges> struct from_range_t { explicit from_range_t ( ) = default ; } ; (since C++23) inline constexpr std :: from_range_t from_range { } ; (since C++23) std::from_range is a disambiguation tag that can be passed to the constructors of the suitable containers to indicate that the contained member is range constructed. The corresponding type std::from_range_t can be used in the constructor's parameter list to match the intended tag. Contents 1 Standard library 1.1 Containers library 1.2 Strings library 2 Notes 3 Example 4 See also [ edit ] Standard library The following standard library types use std::from_range_t type in their constructors: Containers library (constructor) (C++23) constructs the vector from a range (public member function of std::vector<T,Allocator> ) (constructor) (C++26) constructs the inplace_vector from a range (public member function of std::inplace_vector<T,N> ) (constructor) (C++26) constructs the hive from a range (public member function of Template:cpp/container/hive/title ) (constructor) (C++23) constructs the deque from a range (public member function of std::deque<T,Allocator> ) (constructor) (C++23) constructs the forward_list from a range (public member function of std::forward_list<T,Allocator> ) (constructor) (C++23) constructs the list from a range (public member function of std::list<T,Allocator> ) (constructor) (C++23) constructs the set from a range (public member function of std::set<Key,Compare,Allocator> ) (constructor) (C++23) constructs the map from a range (public member function of std::map<Key,T,Compare,Allocator> ) (constructor) (C++23) constructs the multiset from a range (public member function of std::multiset<Key,Compare,Allocator> ) (constructor) (C++23) constructs the multimap from a range (public member function of std::multimap<Key,T,Compare,Allocator> ) (constructor) (C++23) constructs the unordered_set from a range (public member function of std::unordered_set<Key,Hash,KeyEqual,Allocator> ) (constructor) (C++23) constructs the unordered_map from a range (public member function of std::unordered_map<Key,T,Hash,KeyEqual,Allocator> ) (constructor) (C++23) constructs the unordered_multiset from a range (public member function of std::unordered_multiset<Key,Hash,KeyEqual,Allocator> ) (constructor) (C++23) constructs the unordered_multimap from a range (public member function of std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator> ) (constructor) (C++23) constructs the priority_queue from a range (public member function of std::priority_queue<T,Container,Compare> ) (constructor) (C++23) constructs the queue from a range (public member function of std::queue<T,Container> ) (constructor) (C++23) constructs the stack from a range (public member function of std::stack<T,Container> ) (constructor) (C++23) constructs the flat_set from a range (public member function of std::flat_set<Key,Compare,KeyContainer> ) (constructor) (C++23) constructs the flat_map from a range (public member function of std::flat_map<Key,T,Compare,KeyContainer,MappedContainer> ) (constructor) (C++23) constructs the flat_multiset from a range (public member function of std::flat_multiset<Key,Compare,KeyContainer> ) (constructor) (C++23) constructs the flat_multimap from a range (public member function of std::flat_multimap<Key,T,Compare,KeyContainer,MappedContainer> ) Strings library (constructor) (C++23) constructs the basic_string from a range (public member function of std::basic_string<CharT,Traits,Allocator> ) [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_containers_ranges 202202L (C++23) Tagged constructors to construct from container compatible range [ edit ] Example Run this code #include <cassert> #include <string> int main ( ) { #ifdef __cpp_lib_containers_ranges auto const range = { 0x43 , 43 , 43 } ; std:: string str { std :: from_range , range } ; // uses tagged constructor assert ( str == "C++" ) ; #endif } [ edit ] See also in_place in_place_type in_place_index in_place_t in_place_type_t in_place_index_t (C++17) in-place construction tag (tag) [edit] sorted_equivalent sorted_equivalent_t (C++23) indicates that elements of a range are sorted (uniqueness is not required) (tag) [edit] sorted_unique sorted_unique_t (C++23) indicates that elements of a range are sorted and unique (tag) [edit] ranges::to (C++23) constructs a new non-view object from an input range (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/from_range&oldid=182042 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 19 March 2025, at 13:48. Privacy policy About cppreference.com Disclaimers