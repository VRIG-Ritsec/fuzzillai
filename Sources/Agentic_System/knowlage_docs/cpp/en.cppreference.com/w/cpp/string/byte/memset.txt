std::memset - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: memset From cppreference.com < cpp ‎ | string ‎ | byte C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Text processing library Localization library Regular expressions library (C++11) Formatting library (C++20) Null-terminated sequence utilities Byte strings Multibyte strings Wide strings Primitive numeric conversions to_chars (C++17) to_chars_result (C++17) from_chars (C++17) from_chars_result (C++17) chars_format (C++17) Text encoding identifications text_encoding (C++26) [edit] Null-terminated byte strings Functions Character classification isalnum isalpha islower isupper isdigit isxdigit isblank (C++11) iscntrl isgraph isspace isprint ispunct Character manipulation tolower toupper Conversions to numeric formats atof atoi atol atoll (C++11) strtol strtoll (C++11) strtoul strtoull (C++11) strtof strtod strtold (C++11) (C++11) strtoimax strtouimax (C++11) (C++11) String manipulation strcpy strncpy strxfrm strcat strncat String examination strlen strcmp strncmp strcoll strchr strrchr strspn strcspn strpbrk strstr strtok Character array functions memchr memcmp memset memcpy memmove Miscellaneous strerror [edit] Defined in header <cstring> void * memset ( void * dest, int ch, std:: size_t count ) ; Copies the value static_cast < unsigned char > ( ch ) into each of the first count characters of the object pointed to by dest . If the object is a potentially-overlapping subobject or is not TriviallyCopyable (e.g., scalar, C-compatible struct, or an array of trivially copyable type), the behavior is undefined. If count is greater than the size of the object pointed to by dest , the behavior is undefined. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters dest - pointer to the object to fill ch - fill byte count - number of bytes to fill [ edit ] Return value dest [ edit ] Notes std::memset may be optimized away (under the as-if rules) if the object modified by this function is not accessed again for the rest of its lifetime (e.g., gcc bug 8537 ). For that reason, this function cannot be used to scrub memory (e.g., to fill an array that stored a password with zeroes). Solutions for that include std::fill with volatile pointers, (C23) memset_explicit() , (C11) memset_s , FreeBSD explicit_bzero or Microsoft SecureZeroMemory . [ edit ] Example Run this code #include <bitset> #include <climits> #include <cstring> #include <iostream> int main ( ) { int a [ 4 ] ; using bits = std:: bitset < sizeof ( int ) * CHAR_BIT > ; std :: memset ( a, 0b1111 '0000' 0011 , sizeof a ) ; for ( int ai : a ) std:: cout << bits ( ai ) << ' \n ' ; } Output: 00000011000000110000001100000011 00000011000000110000001100000011 00000011000000110000001100000011 00000011000000110000001100000011 [ edit ] See also memcpy copies one buffer to another (function) [edit] memmove moves one buffer to another (function) [edit] wmemset copies the given wide character to every position in a wide character array (function) [edit] fill copy-assigns the given value to every element in a range (function template) [edit] fill_n copy-assigns the given value to N elements in a range (function template) [edit] is_trivially_copyable (C++11) checks if a type is trivially copyable (class template) [edit] C documentation for memset Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/string/byte/memset&oldid=152827 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 5 June 2023, at 10:31. Privacy policy About cppreference.com Disclaimers