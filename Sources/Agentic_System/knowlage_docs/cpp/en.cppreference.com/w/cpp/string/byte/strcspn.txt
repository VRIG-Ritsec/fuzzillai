std::strcspn - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: strcspn From cppreference.com < cpp ‎ | string ‎ | byte C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Text processing library Localization library Regular expressions library (C++11) Formatting library (C++20) Null-terminated sequence utilities Byte strings Multibyte strings Wide strings Primitive numeric conversions to_chars (C++17) to_chars_result (C++17) from_chars (C++17) from_chars_result (C++17) chars_format (C++17) Text encoding identifications text_encoding (C++26) [edit] Null-terminated byte strings Functions Character classification isalnum isalpha islower isupper isdigit isxdigit isblank (C++11) iscntrl isgraph isspace isprint ispunct Character manipulation tolower toupper Conversions to numeric formats atof atoi atol atoll (C++11) strtol strtoll (C++11) strtoul strtoull (C++11) strtof strtod strtold (C++11) (C++11) strtoimax strtouimax (C++11) (C++11) String manipulation strcpy strncpy strxfrm strcat strncat String examination strlen strcmp strncmp strcoll strchr strrchr strspn strcspn strpbrk strstr strtok Character array functions memchr memcmp memset memcpy memmove Miscellaneous strerror [edit] Defined in header <cstring> std:: size_t strcspn ( const char * dest, const char * src ) ; Returns the length of the maximum initial segment of the byte string pointed to by dest , that consists of only the characters not found in byte string pointed to by src . The function name stands for "complementary span". Contents 1 Parameters 2 Return value 3 Example 4 See also [ edit ] Parameters dest - pointer to the null-terminated byte string to be analyzed src - pointer to the null-terminated byte string that contains the characters to search for [ edit ] Return value The length of the maximum initial segment that contains only characters not found in the byte string pointed to by src . [ edit ] Example Run this code #include <cstddef> #include <cstring> #include <iomanip> #include <iostream> #include <string> int main ( ) { std:: string s = "abcde312$#@" ; const char * invalid = "*$#" ; const std:: size_t valid_len = std :: strcspn ( s. c_str ( ) , invalid ) ; if ( valid_len ! = s. size ( ) ) { std:: cout << std:: quoted ( s ) << " contains invalid chars starting at position " << valid_len << ' \n ' << std:: string ( valid_len + 1 , '-' ) << "^ \n " ; } } Output: "abcde312$#@" contains invalid chars starting at position 8 ---------^ [ edit ] See also strspn returns the length of the maximum initial segment that consists of only the characters found in another byte string (function) [edit] wcscspn returns the length of the maximum initial segment that consists of only the wide not found in another wide string (function) [edit] strpbrk finds the first location of any character from a set of separators (function) [edit] find_first_of find first occurrence of characters (public member function of std::basic_string<CharT,Traits,Allocator> ) [edit] C documentation for strcspn Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/string/byte/strcspn&oldid=152833 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 5 June 2023, at 11:15. Privacy policy About cppreference.com Disclaimers