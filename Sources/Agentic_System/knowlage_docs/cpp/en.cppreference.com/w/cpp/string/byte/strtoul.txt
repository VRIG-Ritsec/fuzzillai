std::strtoul, std::strtoull - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: strtoul, std:: strtoull From cppreference.com < cpp ‎ | string ‎ | byte C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Text processing library Localization library Regular expressions library (C++11) Formatting library (C++20) Null-terminated sequence utilities Byte strings Multibyte strings Wide strings Primitive numeric conversions to_chars (C++17) to_chars_result (C++17) from_chars (C++17) from_chars_result (C++17) chars_format (C++17) Text encoding identifications text_encoding (C++26) [edit] Null-terminated byte strings Functions Character classification isalnum isalpha islower isupper isdigit isxdigit isblank (C++11) iscntrl isgraph isspace isprint ispunct Character manipulation tolower toupper Conversions to numeric formats atof atoi atol atoll (C++11) strtol strtoll (C++11) strtoul strtoull (C++11) strtof strtod strtold (C++11) (C++11) strtoimax strtouimax (C++11) (C++11) String manipulation strcpy strncpy strxfrm strcat strncat String examination strlen strcmp strncmp strcoll strchr strrchr strspn strcspn strpbrk strstr strtok Character array functions memchr memcmp memset memcpy memmove Miscellaneous strerror [edit] Defined in header <cstdlib> unsigned long strtoul ( const char * str, char ** str_end, int base ) ; (1) unsigned long long strtoull ( const char * str, char ** str_end, int base ) ; (2) (since C++11) Interprets an unsigned integer value in a byte string pointed to by str . Discards any whitespace characters (as identified by calling std::isspace ) until the first non-whitespace character is found, then takes as many characters as possible to form a valid base-n (where n= base ) unsigned integer number representation and converts them to an integer value. The valid unsigned integer value consists of the following parts: (optional) plus or minus sign (optional) prefix ( 0 ) indicating octal base (applies only when the base is 8 or ​ 0 ​ ) (optional) prefix ( 0x or 0X ) indicating hexadecimal base (applies only when the base is 16 or ​ 0 ​ ) a sequence of digits The set of valid values for base is {0, 2, 3, ..., 36} . The set of valid digits for base- 2 integers is {0, 1} , for base- 3 integers is {0, 1, 2} , and so on. For bases larger than 10 , valid digits include alphabetic characters, starting from Aa for base- 11 integer, to Zz for base- 36 integer. The case of the characters is ignored. Additional numeric formats may be accepted by the currently installed C locale . If the value of base is ​ 0 ​ , the numeric base is auto-detected: if the prefix is 0 , the base is octal, if the prefix is 0x or 0X , the base is hexadecimal, otherwise the base is decimal. If the minus sign was part of the input sequence, the numeric value calculated from the sequence of digits is negated as if by unary minus in the result type, which applies unsigned integer wraparound rules. The functions sets the pointer pointed to by str_end to point to the character past the last character interpreted. If str_end is a null pointer, it is ignored. Contents 1 Parameters 2 Return value 3 Example 4 See also [ edit ] Parameters str - pointer to the null-terminated byte string to be interpreted str_end - pointer to a pointer to character, might be set to a position past the last character interpreted base - base of the interpreted integer value [ edit ] Return value Integer value corresponding to the contents of str on success. If the converted value falls out of range of corresponding return type, range error occurs ( errno is set to ERANGE ) and ULONG_MAX or ULLONG_MAX is returned. If no conversion can be performed, ​ 0 ​ is returned. [ edit ] Example Run this code #include <cstdlib> #include <errno.h> #include <iostream> #include <string> int main ( ) { const char * p = "10 200000000000000000000000000000 30 -40 - 42" ; char * end = nullptr ; std:: cout << "Parsing '" << p << "': \n " ; for ( unsigned long i = std :: strtoul ( p, & end, 10 ) ; p ! = end ; i = std :: strtoul ( p, & end, 10 ) ) { std:: cout << "'" << std:: string ( p, end - p ) << "' -> " ; p = end ; if ( errno == ERANGE ) { errno = 0 ; std:: cout << "range error, got " ; } std:: cout << i << ' \n ' ; } std:: cout << "After the loop p points to '" << p << "' \n " ; } Possible output: Parsing '10 200000000000000000000000000000 30 -40 - 42': '10' -> 10 ' 200000000000000000000000000000' -> range error, got 18446744073709551615 ' 30' -> 30 ' -40' -> 18446744073709551576 After the loop p points to ' - 42' [ edit ] See also stoul stoull (C++11) (C++11) converts a string to an unsigned integer (function) [edit] strtol strtoll (C++11) converts a byte string to an integer value (function) [edit] strtoimax strtoumax (C++11) (C++11) converts a byte string to std::intmax_t or std::uintmax_t (function) [edit] wcstoul wcstoull converts a wide string to an unsigned integer value (function) [edit] strtof strtod strtold converts a byte string to a floating-point value (function) [edit] from_chars (C++17) converts a character sequence to an integer or floating-point value (function) [edit] atoi atol atoll (C++11) converts a byte string to an integer value (function) [edit] C documentation for strtoul , strtoull Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/string/byte/strtoul&oldid=161090 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 22 October 2023, at 00:05. Privacy policy About cppreference.com Disclaimers