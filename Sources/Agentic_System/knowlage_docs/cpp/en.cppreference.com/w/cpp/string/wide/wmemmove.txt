std::wmemmove - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: wmemmove From cppreference.com < cpp ‎ | string ‎ | wide C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Text processing library Localization library Regular expressions library (C++11) Formatting library (C++20) Null-terminated sequence utilities Byte strings Multibyte strings Wide strings Primitive numeric conversions to_chars (C++17) to_chars_result (C++17) from_chars (C++17) from_chars_result (C++17) chars_format (C++17) Text encoding identifications text_encoding (C++26) [edit] Null-terminated wide strings Functions Character classification iswalnum iswalpha iswlower iswupper iswdigit iswxdigit wctype iswblank (C++11) iswctype iswcntrl iswgraph iswspace iswprint iswpunct Character manipulation towlower towupper towctrans wctrans Conversions to numeric formats wcstol wcstoll (C++11) wcstof wcstod wcstold (C++11) (C++11) wcstoul wcstoull (C++11) wcstoimax wcstouimax (C++11) (C++11) String manipulation wcslen wcscmp wcscoll wcsncmp wcschr wcsrchr wcspbrk wcsspn wcscspn wcsstr wcstok String examination wcscpy wcsncpy wcsxfrm wcscat wcsncat Array manipulation wmemcpy wmemmove wmemcmp wmemchr wmemset Types wctrans_t wctype_t wint_t Macros WCHAR_MIN WCHAR_MAX WEOF [edit] Defined in header <cwchar> wchar_t * wmemmove ( wchar_t * dest, const wchar_t * src, std:: size_t count ) ; Copies exactly count successive wide characters from the wide character array pointed to by src to the wide character array pointed to by dest . If count is zero, the function does nothing. The arrays may overlap: copying takes place as if the wide characters were copied to a temporary wide character array and then copied from the temporary array to dest . Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters dest - pointer to the wide character array to copy to src - pointer to the wide character array to copy from count - number of wide characters to copy [ edit ] Return value Returns a copy of dest . [ edit ] Notes This function is not locale-sensitive and pays no attention to the values of the wchar_t objects it copies: nulls as well as invalid characters are copied too. [ edit ] Example Run this code #include <clocale> #include <cwchar> #include <iostream> #include <locale> int main ( ) { std:: setlocale ( LC_ALL , "en_US.utf8" ) ; std:: wcout . imbue ( std:: locale ( "en_US.utf8" ) ) ; wchar_t str [ ] = L "αβγδεζηθικλμνξοπρστυφχψω" ; std:: wcout << str << ' \n ' ; std :: wmemmove ( str + 4 , str + 3 , 3 ) ; // copy from [δεζ] to [εζη] std:: wcout << str << ' \n ' ; } Possible output: αβγδεζηθικλμνξοπρστυφχψω αβγδδεζθικλμνξοπρστυφχψω [ edit ] See also wmemcpy copies a certain amount of wide characters between two non-overlapping arrays (function) [edit] memmove moves one buffer to another (function) [edit] copy copy_if (C++11) copies a range of elements to a new location (function template) [edit] copy_backward copies a range of elements in backwards order (function template) [edit] C documentation for wmemmove Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/string/wide/wmemmove&oldid=153130 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 10 June 2023, at 12:20. Privacy policy About cppreference.com Disclaimers