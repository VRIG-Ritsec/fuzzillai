std::barrier - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: barrier From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::barrier Member functions barrier::barrier barrier::~barrier barrier::arrive barrier::wait barrier::arrive_and_wait barrier::arrive_and_drop Constants barrier::max [edit] Defined in header <barrier> template < class CompletionFunction = /* see below */ > class barrier ; (since C++20) The class template std::barrier provides a thread-coordination mechanism that blocks a group of threads of known size until all threads in that group have reached the barrier. Unlike std::latch , barriers are reusable: once a group of arriving threads are unblocked, the barrier can be reused. Unlike std::latch , barriers execute a possibly empty callable before unblocking threads. A barrier object's lifetime consists of one or more phases. Each phase defines a phase synchronization point where waiting threads block. Threads can arrive at the barrier, but defer waiting on the phase synchronization point by calling arrive . Such threads can later block on the phase synchronization point by calling wait . A barrier phase consists of the following steps: The expected count is decremented by each call to arrive or arrive_and_drop . When the expected count reaches zero, the phase completion step is run, meaning that the completion is invoked, and all threads blocked on the phase synchronization point are unblocked. The end of the completion step strongly happens-before all calls that were unblocked by the completion step return. Exactly once after the expected count reaches zero, a thread executes the completion step during its call to arrive , arrive_and_drop , or wait , except that it is implementation-defined whether the step executes if no thread calls wait . When the completion step finishes, the expected count is reset to the value specified at construction less the number of calls to arrive_and_drop since, and the next barrier phase begins. Concurrent invocations of the member functions of barrier , except for the destructor, do not introduce data races. Contents 1 Template parameters 2 Member types 3 Data members 4 Member functions 4.1 Constants 5 Notes 6 Example 7 Defect reports 8 See also [ edit ] Template parameters CompletionFunction - a function object type - CompletionFunction must meet the requirements of MoveConstructible and Destructible . std:: is_nothrow_invocable_v < CompletionFunction & > must be true . The default template argument of CompletionFunction is an unspecified function object type that additionally meets the requirements of DefaultConstructible . Calling an lvalue of it with no arguments has no effects. [ edit ] Member types Name Definition arrival_token an unspecified object type meeting requirements of MoveConstructible , MoveAssignable and Destructible [ edit ] Data members Member Definition CompletionFunction completion a completion function object which is called on every phase completion step ( exposition-only member object* ) [ edit ] Member functions (constructor) constructs a barrier (public member function) [edit] (destructor) destroys the barrier (public member function) [edit] operator= [deleted] barrier is not assignable (public member function) arrive arrives at barrier and decrements the expected count (public member function) [edit] wait blocks at the phase synchronization point until its phase completion step is run (public member function) [edit] arrive_and_wait arrives at barrier and decrements the expected count by one, then blocks until current phase completes (public member function) [edit] arrive_and_drop decrements both the initial expected count for subsequent phases and the expected count for current phase by one (public member function) [edit] Constants max [static] the maximum value of expected count supported by the implementation (public static member function) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_barrier 201907L (C++20) std::barrier 202302L (C++20) (DR) Relaxed guarantees for phase completion [ edit ] Example Run this code #include <barrier> #include <iostream> #include <string> #include <syncstream> #include <thread> #include <vector> int main ( ) { const auto workers = { "Anil" , "Busara" , "Carl" } ; auto on_completion = [ ] ( ) noexcept { // locking not needed here static auto phase = "... done \n " "Cleaning up... \n " ; std:: cout << phase ; phase = "... done \n " ; } ; std :: barrier sync_point ( std:: ssize ( workers ) , on_completion ) ; auto work = [ & ] ( std:: string name ) { std:: string product = " " + name + " worked \n " ; std:: osyncstream ( std:: cout ) << product ; // ok, op<< call is atomic sync_point. arrive_and_wait ( ) ; product = " " + name + " cleaned \n " ; std:: osyncstream ( std:: cout ) << product ; sync_point. arrive_and_wait ( ) ; } ; std:: cout << "Starting... \n " ; std:: vector < std:: jthread > threads ; threads. reserve ( std:: size ( workers ) ) ; for ( auto const & worker : workers ) threads. emplace_back ( work, worker ) ; } Possible output: Starting... Anil worked Carl worked Busara worked ... done Cleaning up... Busara cleaned Carl cleaned Anil cleaned ... done [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior P2588R3 C++20 old phase completion guarantees might prevent hardware acceleration relaxed [ edit ] See also latch (C++20) single-use thread barrier (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/barrier&oldid=176542 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 26 September 2024, at 06:33. Privacy policy About cppreference.com Disclaimers