std::future - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: future From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::future Member functions future::future future::~future future::operator= future::share Getting the result future::get State future::valid future::wait future::wait_for future::wait_until [edit] Defined in header <future> template < class T > class future ; (1) (since C++11) template < class T > class future < T & > ; (2) (since C++11) template <> class future < void > ; (3) (since C++11) The class template std::future provides a mechanism to access the result of asynchronous operations: An asynchronous operation (created via std::async , std::packaged_task , or std::promise ) can provide a std::future object to the creator of that asynchronous operation. The creator of the asynchronous operation can then use a variety of methods to query, wait for, or extract a value from the std::future . These methods may block if the asynchronous operation has not yet provided a value. When the asynchronous operation is ready to send a result to the creator, it can do so by modifying shared state (e.g. std::promise::set_value ) that is linked to the creator's std::future . Note that std::future references shared state that is not shared with any other asynchronous return objects (as opposed to std::shared_future ). Contents 1 Member functions 1.1 Getting the result 1.2 State 2 Examples 2.1 Example with exceptions 3 See also [ edit ] Member functions (constructor) constructs the future object (public member function) [edit] (destructor) destructs the future object (public member function) [edit] operator= moves the future object (public member function) [edit] share transfers the shared state from * this to a shared_future and returns it (public member function) [edit] Getting the result get returns the result (public member function) [edit] State valid checks if the future has a shared state (public member function) [edit] wait waits for the result to become available (public member function) [edit] wait_for waits for the result, returns if it is not available for the specified timeout duration (public member function) [edit] wait_until waits for the result, returns if it is not available until specified time point has been reached (public member function) [edit] [ edit ] Examples Run this code #include <future> #include <iostream> #include <thread> int main ( ) { // future from a packaged_task std:: packaged_task < int ( ) > task ( [ ] { return 7 ; } ) ; // wrap the function std :: future < int > f1 = task. get_future ( ) ; // get a future std:: thread t ( std :: move ( task ) ) ; // launch on a thread // future from an async() std :: future < int > f2 = std:: async ( std:: launch :: async , [ ] { return 8 ; } ) ; // future from a promise std:: promise < int > p ; std :: future < int > f3 = p. get_future ( ) ; std:: thread ( [ & p ] { p. set_value_at_thread_exit ( 9 ) ; } ) . detach ( ) ; std:: cout << "Waiting..." << std:: flush ; f1. wait ( ) ; f2. wait ( ) ; f3. wait ( ) ; std:: cout << "Done! \n Results are: " << f1. get ( ) << ' ' << f2. get ( ) << ' ' << f3. get ( ) << ' \n ' ; t. join ( ) ; } Output: Waiting...Done! Results are: 7 8 9 [ edit ] Example with exceptions Run this code #include <future> #include <iostream> #include <thread> int main ( ) { std:: promise < int > p ; std :: future < int > f = p. get_future ( ) ; std:: thread t ( [ & p ] { try { // code that may throw throw std:: runtime_error ( "Example" ) ; } catch ( ... ) { try { // store anything thrown in the promise p. set_exception ( std:: current_exception ( ) ) ; } catch ( ... ) { } // set_exception() may throw too } } ) ; try { std:: cout << f. get ( ) ; } catch ( const std:: exception & e ) { std:: cout << "Exception from the thread: " << e. what ( ) << ' \n ' ; } t. join ( ) ; } Output: Exception from the thread: Example [ edit ] See also async (C++11) runs a function asynchronously (potentially in a new thread) and returns a std::future that will hold the result (function template) [edit] shared_future (C++11) waits for a value (possibly referenced by other futures) that is set asynchronously (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/future&oldid=170134 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 12 March 2024, at 06:11. Privacy policy About cppreference.com Disclaimers