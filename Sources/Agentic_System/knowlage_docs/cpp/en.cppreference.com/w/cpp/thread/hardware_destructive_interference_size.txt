std::hardware_destructive_interference_size, std::hardware_constructive_interference_size - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: hardware_destructive_interference_size, std:: hardware_constructive_interference_size From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] Defined in header <new> inline constexpr std:: size_t hardware_destructive_interference_size = /*implementation-defined*/ ; (1) (since C++17) inline constexpr std:: size_t hardware_constructive_interference_size = /*implementation-defined*/ ; (2) (since C++17) 1) Minimum offset between two objects to avoid false sharing. Guaranteed to be at least alignof ( std:: max_align_t ) struct keep_apart { alignas ( std :: hardware_destructive_interference_size ) std:: atomic < int > cat ; alignas ( std :: hardware_destructive_interference_size ) std:: atomic < int > dog ; } ; 2) Maximum size of contiguous memory to promote true sharing. Guaranteed to be at least alignof ( std:: max_align_t ) struct together { std:: atomic < int > dog ; int puppy ; } ; struct kennel { // Other data members... alignas ( sizeof ( together ) ) together pack ; // Other data members... } ; static_assert ( sizeof ( together ) <= std :: hardware_constructive_interference_size ) ; [ edit ] Notes These constants provide a portable way to access the L1 data cache line size. Feature-test macro Value Std Feature __cpp_lib_hardware_interference_size 201703L (C++17) constexpr std :: hardware_constructive_interference_size and constexpr std :: hardware_destructive_interference_size [ edit ] Example The program uses two threads that atomically write to the data members of the given global objects. The first object fits in one cache line, which results in "hardware interference". The second object keeps its data members on separate cache lines, so possible "cache synchronization" after thread writes is avoided. Run this code #include <atomic> #include <chrono> #include <cstddef> #include <iomanip> #include <iostream> #include <mutex> #include <new> #include <thread> #ifdef __cpp_lib_hardware_interference_size using std :: hardware_constructive_interference_size ; using std :: hardware_destructive_interference_size ; #else // 64 bytes on x86-64 │ L1_CACHE_BYTES │ L1_CACHE_SHIFT │ __cacheline_aligned │ ... constexpr std:: size_t hardware_constructive_interference_size = 64 ; constexpr std:: size_t hardware_destructive_interference_size = 64 ; #endif std:: mutex cout_mutex ; constexpr int max_write_iterations { 10 '000' 000 } ; // the benchmark time tuning struct alignas ( hardware_constructive_interference_size ) OneCacheLiner // occupies one cache line { std:: atomic_uint64_t x { } ; std:: atomic_uint64_t y { } ; } oneCacheLiner ; struct TwoCacheLiner // occupies two cache lines { alignas ( hardware_destructive_interference_size ) std:: atomic_uint64_t x { } ; alignas ( hardware_destructive_interference_size ) std:: atomic_uint64_t y { } ; } twoCacheLiner ; inline auto now ( ) noexcept { return std:: chrono :: high_resolution_clock :: now ( ) ; } template < bool xy > void oneCacheLinerThread ( ) { const auto start { now ( ) } ; for ( uint64_t count { } ; count ! = max_write_iterations ; ++ count ) if constexpr ( xy ) oneCacheLiner. x . fetch_add ( 1 , std:: memory_order_relaxed ) ; else oneCacheLiner. y . fetch_add ( 1 , std:: memory_order_relaxed ) ; const std:: chrono :: duration < double , std:: milli > elapsed { now ( ) - start } ; std:: lock_guard lk { cout_mutex } ; std:: cout << "oneCacheLinerThread() spent " << elapsed. count ( ) << " ms \n " ; if constexpr ( xy ) oneCacheLiner. x = elapsed. count ( ) ; else oneCacheLiner. y = elapsed. count ( ) ; } template < bool xy > void twoCacheLinerThread ( ) { const auto start { now ( ) } ; for ( uint64_t count { } ; count ! = max_write_iterations ; ++ count ) if constexpr ( xy ) twoCacheLiner. x . fetch_add ( 1 , std:: memory_order_relaxed ) ; else twoCacheLiner. y . fetch_add ( 1 , std:: memory_order_relaxed ) ; const std:: chrono :: duration < double , std:: milli > elapsed { now ( ) - start } ; std:: lock_guard lk { cout_mutex } ; std:: cout << "twoCacheLinerThread() spent " << elapsed. count ( ) << " ms \n " ; if constexpr ( xy ) twoCacheLiner. x = elapsed. count ( ) ; else twoCacheLiner. y = elapsed. count ( ) ; } int main ( ) { std:: cout << "__cpp_lib_hardware_interference_size " # ifdef __cpp_lib_hardware_interference_size "= " << __cpp_lib_hardware_interference_size << ' \n ' ; # else "is not defined, use " << hardware_destructive_interference_size << " as fallback \n " ; # endif std:: cout << "hardware_destructive_interference_size == " << hardware_destructive_interference_size << ' \n ' << "hardware_constructive_interference_size == " << hardware_constructive_interference_size << " \n \n " << std:: fixed << std:: setprecision ( 2 ) << "sizeof( OneCacheLiner ) == " << sizeof ( OneCacheLiner ) << ' \n ' << "sizeof( TwoCacheLiner ) == " << sizeof ( TwoCacheLiner ) << " \n \n " ; constexpr int max_runs { 4 } ; int oneCacheLiner_average { 0 } ; for ( auto i { 0 } ; i ! = max_runs ; ++ i ) { std:: thread th1 { oneCacheLinerThread < 0 > } ; std:: thread th2 { oneCacheLinerThread < 1 > } ; th1. join ( ) ; th2. join ( ) ; oneCacheLiner_average + = oneCacheLiner. x + oneCacheLiner. y ; } std:: cout << "Average T1 time: " << ( oneCacheLiner_average / max_runs / 2 ) << " ms \n \n " ; int twoCacheLiner_average { 0 } ; for ( auto i { 0 } ; i ! = max_runs ; ++ i ) { std:: thread th1 { twoCacheLinerThread < 0 > } ; std:: thread th2 { twoCacheLinerThread < 1 > } ; th1. join ( ) ; th2. join ( ) ; twoCacheLiner_average + = twoCacheLiner. x + twoCacheLiner. y ; } std:: cout << "Average T2 time: " << ( twoCacheLiner_average / max_runs / 2 ) << " ms \n \n " << "Ratio T1/T2:~ " << 1.0 * oneCacheLiner_average / twoCacheLiner_average << ' \n ' ; } Possible output: __cpp_lib_hardware_interference_size = 201703 hardware_destructive_interference_size == 64 hardware_constructive_interference_size == 64 sizeof( OneCacheLiner ) == 64 sizeof( TwoCacheLiner ) == 128 oneCacheLinerThread() spent 517.83 ms oneCacheLinerThread() spent 533.43 ms oneCacheLinerThread() spent 527.36 ms oneCacheLinerThread() spent 555.69 ms oneCacheLinerThread() spent 574.74 ms oneCacheLinerThread() spent 591.66 ms oneCacheLinerThread() spent 555.63 ms oneCacheLinerThread() spent 555.76 ms Average T1 time: 550 ms twoCacheLinerThread() spent 89.79 ms twoCacheLinerThread() spent 89.94 ms twoCacheLinerThread() spent 89.46 ms twoCacheLinerThread() spent 90.28 ms twoCacheLinerThread() spent 89.73 ms twoCacheLinerThread() spent 91.11 ms twoCacheLinerThread() spent 89.17 ms twoCacheLinerThread() spent 90.09 ms Average T2 time: 89 ms Ratio T1/T2:~ 6.16 [ edit ] See also hardware_concurrency [static] returns the number of concurrent threads supported by the implementation (public static member function of std::thread ) [edit] hardware_concurrency [static] returns the number of concurrent threads supported by the implementation (public static member function of std::jthread ) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/hardware_destructive_interference_size&oldid=179499 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages العربية Deutsch Español Français Italiano 日本語 한국어 Português Русский 中文 This page was last modified on 11 January 2025, at 12:55. Privacy policy About cppreference.com Disclaimers