std::packaged_task - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: packaged_task From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::packaged_task Member functions packaged_task::packaged_task packaged_task::~packaged_task packaged_task::operator= packaged_task::valid packaged_task::swap Getting the result packaged_task::get_future Execution packaged_task::operator() packaged_task::make_ready_at_thread_exit packaged_task::reset Non-member functions swap (std::packaged_task) Helper classes uses_allocator <std::packaged_task> (until C++17) Deduction guides (C++17) [edit] Defined in header <future> template < class > class packaged_task ; (1) (since C++11) (not defined) template < class R, class ... ArgTypes > class packaged_task < R ( ArgTypes... ) > ; (2) (since C++11) The class template std::packaged_task wraps any Callable target (function, lambda expression, bind expression, or another function object) so that it can be invoked asynchronously. Its return value or exception thrown is stored in a shared state which can be accessed through std::future objects. Just like std::function , std::packaged_task is a polymorphic, allocator-aware container: the stored callable target may be allocated on heap or with a provided allocator. (until C++17) Contents 1 Member functions 1.1 Getting the result 1.2 Execution 2 Non-member functions 3 Helper classes 4 Deduction guides (since C++17) 5 Example 6 Defect reports 7 See also [ edit ] Member functions (constructor) constructs the task object (public member function) [edit] (destructor) destructs the task object (public member function) [edit] operator= moves the task object (public member function) [edit] valid checks if the task object has a valid function (public member function) [edit] swap swaps two task objects (public member function) [edit] Getting the result get_future returns a std::future associated with the promised result (public member function) [edit] Execution operator() executes the function (public member function) [edit] make_ready_at_thread_exit executes the function ensuring that the result is ready only once the current thread exits (public member function) [edit] reset resets the state abandoning any stored results of previous executions (public member function) [edit] [ edit ] Non-member functions std::swap (std::packaged_task) (C++11) specializes the std::swap algorithm (function template) [edit] [ edit ] Helper classes std::uses_allocator <std::packaged_task> (C++11) (until C++17) specializes the std::uses_allocator type trait (class template specialization) [edit] [ edit ] Deduction guides (since C++17) [ edit ] Example Run this code #include <cmath> #include <functional> #include <future> #include <iostream> #include <thread> // unique function to avoid disambiguating the std::pow overload set int f ( int x, int y ) { return std:: pow ( x, y ) ; } void task_lambda ( ) { std :: packaged_task < int ( int , int ) > task ( [ ] ( int a, int b ) { return std:: pow ( a, b ) ; } ) ; std:: future < int > result = task. get_future ( ) ; task ( 2 , 9 ) ; std:: cout << "task_lambda: \t " << result. get ( ) << ' \n ' ; } void task_bind ( ) { std :: packaged_task < int ( ) > task ( std:: bind ( f, 2 , 11 ) ) ; std:: future < int > result = task. get_future ( ) ; task ( ) ; std:: cout << "task_bind: \t " << result. get ( ) << ' \n ' ; } void task_thread ( ) { std :: packaged_task < int ( int , int ) > task ( f ) ; std:: future < int > result = task. get_future ( ) ; std:: thread task_td ( std :: move ( task ) , 2 , 10 ) ; task_td. join ( ) ; std:: cout << "task_thread: \t " << result. get ( ) << ' \n ' ; } int main ( ) { task_lambda ( ) ; task_bind ( ) ; task_thread ( ) ; } Output: task_lambda: 512 task_bind: 2048 task_thread: 1024 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 3117 C++17 deduction guides for packaged_task were missing added [ edit ] See also future (C++11) waits for a value that is set asynchronously (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/packaged_task&oldid=180411 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 10 February 2025, at 02:45. Privacy policy About cppreference.com Disclaimers