std::shared_timed_mutex - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: shared_timed_mutex From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::shared_timed_mutex Member functions shared_timed_mutex::shared_timed_mutex shared_timed_mutex::~shared_timed_mutex Exclusive locking shared_timed_mutex::lock shared_timed_mutex::try_lock shared_timed_mutex::try_lock_for shared_timed_mutex::try_lock_until shared_timed_mutex::unlock Shared locking shared_timed_mutex::lock_shared shared_timed_mutex::try_lock_shared shared_timed_mutex::try_lock_shared_for shared_timed_mutex::try_lock_shared_until shared_timed_mutex::unlock_shared [edit] Defined in header <shared_mutex> class shared_timed_mutex ; (since C++14) The shared_timed_mutex class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads. In contrast to other mutex types which facilitate exclusive access, a shared_timed_mutex has two levels of access: exclusive - only one thread can own the mutex. shared - several threads can share ownership of the same mutex. Shared mutexes are usually used in situations when multiple readers can access the same resource at the same time without causing data races, but only one writer can do so. In a manner similar to timed_mutex , shared_timed_mutex provides the ability to attempt to claim ownership of a shared_timed_mutex with a timeout via the try_lock_for() , try_lock_until() , try_lock_shared_for() , try_lock_shared_until() member functions. The shared_timed_mutex class satisfies all requirements of SharedTimedMutex and StandardLayoutType . Contents 1 Member functions 1.1 Exclusive locking 1.2 Shared locking 2 Notes 3 Example [ edit ] Member functions (constructor) constructs the mutex (public member function) [edit] (destructor) destroys the mutex (public member function) [edit] operator= [deleted] not copy-assignable (public member function) [edit] Exclusive locking lock locks the mutex, blocks if the mutex is not available (public member function) [edit] try_lock tries to lock the mutex, returns if the mutex is not available (public member function) [edit] try_lock_for tries to lock the mutex, returns if the mutex has been unavailable for the specified timeout duration (public member function) [edit] try_lock_until tries to lock the mutex, returns if the mutex has been unavailable until specified time point has been reached (public member function) [edit] unlock unlocks the mutex (public member function) [edit] Shared locking lock_shared locks the mutex for shared ownership, blocks if the mutex is not available (public member function) [edit] try_lock_shared tries to lock the mutex for shared ownership, returns if the mutex is not available (public member function) [edit] try_lock_shared_for tries to lock the mutex for shared ownership, returns if the mutex has been unavailable for the specified timeout duration (public member function) [edit] try_lock_shared_until tries to lock the mutex for shared ownership, returns if the mutex has been unavailable until specified time point has been reached (public member function) [edit] unlock_shared unlocks the mutex (shared ownership) (public member function) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_shared_timed_mutex 201402L (C++14) std::shared_timed_mutex [ edit ] Example This section is incomplete Reason: build a motivating example A copy assignment operator for a class that holds resources that can handle multiple readers, but only one writer. Run this code #include <mutex> #include <shared_mutex> class R { mutable std :: shared_timed_mutex mut ; /* data */ public : R & operator = ( const R & other ) { // requires exclusive ownership to write to *this std:: unique_lock < std :: shared_timed_mutex > lhs ( mut, std:: defer_lock ) ; // requires shared ownership to read from other std:: shared_lock < std :: shared_timed_mutex > rhs ( other. mut , std:: defer_lock ) ; std:: lock ( lhs, rhs ) ; /* assign data */ return * this ; } } ; int main ( ) { R r ; } Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/shared_timed_mutex&oldid=158823 " Category : Todo with reason Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 11 September 2023, at 14:14. Privacy policy About cppreference.com Disclaimers