std::stop_token - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: stop_token From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] std::stop_token Member functions stop_token::stop_token stop_token::~stop_token stop_token::operator= Modifiers stop_token::swap Observers stop_token::stop_requested stop_token::stop_possible Non-member functions swap (std::stop_token) operator== [edit] Defined in header <stop_token> class stop_token ; (since C++20) The stop_token class provides the means to check if a stop request has been made or can be made, for its associated std::stop_source object. It is essentially a thread-safe "view" of the associated stop-state. The stop_token can also be passed to the constructor of std::stop_callback , such that the callback will be invoked if the stop_token 's associated std::stop_source is requested to stop. And stop_token can be passed to the interruptible waiting functions of std::condition_variable_any , to interrupt the condition variable's wait if stop is requested. Contents 1 Member alias templates 2 Member functions 2.1 Modifiers 2.2 Observers 3 Non-member functions 4 Notes 5 Example [ edit ] Member alias templates Type Definition callback_type < Callback > (since C++26) std:: stop_callback < Callback > [ edit ] Member functions (constructor) constructs new stop_token object (public member function) [edit] (destructor) destructs the stop_token object (public member function) [edit] operator= assigns the stop_token object (public member function) [edit] Modifiers swap swaps two stop_token objects (public member function) [edit] Observers stop_requested checks whether the associated stop-state has been requested to stop (public member function) [edit] stop_possible checks whether associated stop-state can be requested to stop (public member function) [edit] [ edit ] Non-member functions operator== (C++20) compares two std::stop_token objects (function) [edit] swap (std::stop_token) (C++20) specializes the std::swap algorithm (function) [edit] [ edit ] Notes A stop_token object is not generally constructed independently, but rather retrieved from a std::jthread or std::stop_source . This makes it share the same associated stop-state as the std::jthread or std::stop_source . Feature-test macro Value Std Feature __cpp_lib_jthread 201911L (C++20) Stop token and joining thread [ edit ] Example Run this code #include <iostream> #include <thread> using namespace std :: literals :: chrono_literals ; void f ( std :: stop_token stop_token, int value ) { while ( ! stop_token. stop_requested ( ) ) { std:: cout << value ++ << ' ' << std:: flush ; std:: this_thread :: sleep_for ( 200ms ) ; } std:: cout << std:: endl ; } int main ( ) { std:: jthread thread ( f, 5 ) ; // prints 5 6 7 8... for approximately 3 seconds std:: this_thread :: sleep_for ( 3s ) ; // The destructor of jthread calls request_stop() and join(). } Possible output: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/stop_token&oldid=173981 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 中文 This page was last modified on 31 July 2024, at 06:35. Privacy policy About cppreference.com Disclaimers