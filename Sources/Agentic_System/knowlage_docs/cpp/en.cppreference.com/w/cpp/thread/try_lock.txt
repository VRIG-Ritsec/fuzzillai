std::try_lock - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: try_lock From cppreference.com < cpp ‎ | thread C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Concurrency support library Threads thread (C++11) jthread (C++20) hardware_destructive_interference_size hardware_constructive_interference_size (C++17) (C++17) this_thread namespace get_id (C++11) yield (C++11) sleep_for (C++11) sleep_until (C++11) Cooperative cancellation stop_token (C++20) inplace_stop_token (C++26) never_stop_token (C++26) stop_source (C++20) inplace_stop_source (C++26) stop_callback (C++20) inplace_stop_callback (C++26) stop_callback_for_t (C++26) stoppable_token (C++26) unstoppable_token (C++26) stoppable-source (C++26) stoppable-callback-for (C++26) Mutual exclusion mutex (C++11) recursive_mutex (C++11) shared_mutex (C++17) timed_mutex (C++11) recursive_timed_mutex (C++11) shared_timed_mutex (C++14) Generic lock management lock (C++11) lock_guard (C++11) scoped_lock (C++17) unique_lock (C++11) shared_lock (C++14) once_flag (C++11) call_once (C++11) try_lock (C++11) defer_lock try_to_lock adopt_lock defer_lock_t try_to_lock_t adopt_lock_t (C++11) (C++11) (C++11) (C++11) (C++11) (C++11) Condition variables condition_variable (C++11) condition_variable_any (C++11) notify_all_at_thread_exit (C++11) cv_status (C++11) Semaphores counting_semaphore binary_semaphore (C++20) (C++20) Latches and Barriers latch (C++20) barrier (C++20) Futures promise (C++11) future (C++11) shared_future (C++11) packaged_task (C++11) async (C++11) launch (C++11) future_status (C++11) future_error (C++11) future_category (C++11) future_errc (C++11) Safe reclamation rcu_obj_base (C++26) rcu_domain (C++26) rcu_default_domain (C++26) rcu_synchronize (C++26) rcu_barrier (C++26) rcu_retire (C++26) Hazard pointers hazard_pointer_obj_base (C++26) hazard_pointer (C++26) make_hazard_pointer (C++26) Atomic types atomic (C++11) atomic_ref (C++20) atomic_flag (C++11) Initialization of atomic types atomic_init (C++11) (deprecated in C++20) ATOMIC_VAR_INIT (C++11) (deprecated in C++20) ATOMIC_FLAG_INIT (C++11) Memory ordering memory_order (C++11) kill_dependency (C++11) (deprecated in C++26) atomic_thread_fence (C++11) atomic_signal_fence (C++11) Free functions for atomic operations atomic_store atomic_store_explicit (C++11) (C++11) atomic_load atomic_load_explicit (C++11) (C++11) atomic_exchange atomic_exchange_explicit (C++11) (C++11) atomic_compare_exchange_weak atomic_compare_exchange_weak_explicit atomic_compare_exchange_strong atomic_compare_exchange_strong_explicit (C++11) (C++11) (C++11) (C++11) atomic_fetch_add atomic_fetch_add_explicit (C++11) (C++11) atomic_fetch_sub atomic_fetch_sub_explicit (C++11) (C++11) atomic_fetch_and atomic_fetch_and_explicit (C++11) (C++11) atomic_fetch_or atomic_fetch_or_explicit (C++11) (C++11) atomic_fetch_xor atomic_fetch_xor_explicit (C++11) (C++11) atomic_fetch_max atomic_fetch_max_explicit (C++26) (C++26) atomic_fetch_min atomic_fetch_min_explicit (C++26) (C++26) atomic_is_lock_free (C++11) atomic_wait atomic_wait_explicit (C++20) (C++20) atomic_notify_one (C++20) atomic_notify_all (C++20) Free functions for atomic flags atomic_flag_test_and_set atomic_flag_test_and_set_explicit (C++11) (C++11) atomic_flag_clear atomic_flag_clear_explicit (C++11) (C++11) atomic_flag_test atomic_flag_test_explicit (C++20) (C++20) atomic_flag_wait atomic_flag_wait_explicit (C++20) (C++20) atomic_flag_notify_one (C++20) atomic_flag_notify_all (C++20) [edit] Defined in header <mutex> template < class Lockable1, class Lockable2, class ... LockableN > int try_lock ( Lockable1 & lock1, Lockable2 & lock2, LockableN & ... lockn ) ; (since C++11) Tries to lock each of the given Lockable objects lock1 , lock2 , ... , lockn by calling try_lock in order beginning with the first. If a call to try_lock fails, no further call to try_lock is performed, unlock is called for any locked objects and a ​ 0 ​ -based index of the object that failed to lock is returned. If a call to try_lock results in an exception, unlock is called for any locked objects before rethrowing. Contents 1 Parameters 2 Return value 3 Example 4 See also [ edit ] Parameters lock1, lock2, ..., lockn - the Lockable objects to lock [ edit ] Return value - 1 on success, or ​ 0 ​ -based index value of the object that failed to lock. [ edit ] Example The following example uses std::try_lock to periodically tally and reset counters running in separate threads. Run this code #include <chrono> #include <functional> #include <iostream> #include <mutex> #include <thread> #include <vector> int main ( ) { int foo_count = 0 ; std:: mutex foo_count_mutex ; int bar_count = 0 ; std:: mutex bar_count_mutex ; int overall_count = 0 ; bool done = false ; std:: mutex done_mutex ; auto increment = [ ] ( int & counter, std:: mutex & m, const char * desc ) { for ( int i = 0 ; i < 10 ; ++ i ) { std:: unique_lock < std:: mutex > lock ( m ) ; ++ counter ; std:: cout << desc << ": " << counter << ' \n ' ; lock. unlock ( ) ; std:: this_thread :: sleep_for ( std:: chrono :: seconds ( 1 ) ) ; } } ; std:: thread increment_foo ( increment, std:: ref ( foo_count ) , std:: ref ( foo_count_mutex ) , "foo" ) ; std:: thread increment_bar ( increment, std:: ref ( bar_count ) , std:: ref ( bar_count_mutex ) , "bar" ) ; std:: thread update_overall ( [ & ] ( ) { done_mutex. lock ( ) ; while ( ! done ) { done_mutex. unlock ( ) ; int result = std :: try_lock ( foo_count_mutex, bar_count_mutex ) ; if ( result == - 1 ) { overall_count + = foo_count + bar_count ; foo_count = 0 ; bar_count = 0 ; std:: cout << "overall: " << overall_count << ' \n ' ; foo_count_mutex. unlock ( ) ; bar_count_mutex. unlock ( ) ; } std:: this_thread :: sleep_for ( std:: chrono :: seconds ( 2 ) ) ; done_mutex. lock ( ) ; } done_mutex. unlock ( ) ; } ) ; increment_foo. join ( ) ; increment_bar. join ( ) ; done_mutex. lock ( ) ; done = true ; done_mutex. unlock ( ) ; update_overall. join ( ) ; std:: cout << "Done processing \n " << "foo: " << foo_count << ' \n ' << "bar: " << bar_count << ' \n ' << "overall: " << overall_count << ' \n ' ; } Possible output: bar: 1 foo: 1 foo: 2 bar: 2 foo: 3 overall: 5 bar: 1 foo: 1 bar: 2 foo: 2 bar: 3 overall: 10 bar: 1 foo: 1 bar: 2 foo: 2 overall: 14 bar: 1 foo: 1 bar: 2 overall: 17 foo: 1 bar: 1 foo: 2 overall: 20 Done processing foo: 0 bar: 0 overall: 20 [ edit ] See also lock (C++11) locks specified mutexes, blocks if any are unavailable (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/thread/try_lock&oldid=161290 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 24 October 2023, at 11:03. Privacy policy About cppreference.com Disclaimers