std::bad_cast - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: bad_cast From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] Defined in header <typeinfo> class bad_cast : public std:: exception An exception of this type is thrown when a dynamic_cast to a reference type fails the run-time check (e.g., because the types are not related by inheritance), and also from std::use_facet if the requested facet does not exist in the locale. Inheritance diagram Contents 1 Member functions 2 std::bad_cast:: bad_cast 2.1 Parameters 3 std::bad_cast:: operator= 3.1 Parameters 3.2 Return value 4 std::bad_cast:: what 4.1 Return value 4.2 Notes 5 Inherited from std:: exception 5.1 Member functions 5.2 Notes 5.3 Example [ edit ] Member functions (constructor) constructs a new bad_cast object (public member function) operator= replaces the bad_cast object (public member function) what returns the explanatory string (public member function) std::bad_cast:: bad_cast (1) bad_cast ( ) throw ( ) ; (until C++11) bad_cast ( ) noexcept ; (since C++11) (constexpr since C++26) (2) bad_cast ( const bad_cast & other ) throw ( ) ; (until C++11) bad_cast ( const bad_cast & other ) noexcept ; (since C++11) (constexpr since C++26) Constructs a new bad_cast object with an implementation-defined null-terminated byte string which is accessible through what() . 1) Default constructor. 2) Copy constructor. If * this and other both have dynamic type std::bad_cast then std:: strcmp ( what ( ) , other. what ( ) ) == 0 . (since C++11) Parameters other - another exception object to copy std::bad_cast:: operator= bad_cast & operator = ( const bad_cast & other ) throw ( ) ; (until C++11) bad_cast & operator = ( const bad_cast & other ) noexcept ; (since C++11) (constexpr since C++26) Assigns the contents with those of other . If * this and other both have dynamic type std::bad_cast then std:: strcmp ( what ( ) , other. what ( ) ) == 0 after assignment. (since C++11) Parameters other - another exception object to assign with Return value * this std::bad_cast:: what virtual const char * what ( ) const throw ( ) ; (until C++11) virtual const char * what ( ) const noexcept ; (since C++11) (constexpr since C++26) Returns the explanatory string. Return value Pointer to an implementation-defined null-terminated string with explanatory information. The string is suitable for conversion and display as a std::wstring . The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function (e.g. copy assignment operator) on the exception object is called. The returned string is encoded with the ordinary literal encoding during constant evaluation. (since C++26) Notes Implementations are allowed but not required to override what() . Inherited from std:: exception Member functions (destructor) [virtual] destroys the exception object (virtual public member function of std::exception ) [edit] what [virtual] returns an explanatory string (virtual public member function of std::exception ) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_constexpr_exceptions 202411L (C++26) constexpr for exception types [ edit ] Example Run this code #include <iostream> #include <typeinfo> struct Foo { virtual ~Foo ( ) { } } ; struct Bar { virtual ~Bar ( ) { std:: cout << "~Bar \n " ; } } ; struct Pub : Bar { ~Pub ( ) override { std:: cout << "~Pub \n " ; } } ; int main ( ) { Pub pub ; try { [ [ maybe_unused ] ] Bar & r1 = dynamic_cast < Bar & > ( pub ) ; // OK, upcast [ [ maybe_unused ] ] Foo & r2 = dynamic_cast < Foo & > ( pub ) ; // throws } catch ( const std :: bad_cast & e ) { std:: cout << "e.what(): " << e. what ( ) << ' \n ' ; } } Possible output: e.what(): std::bad_cast ~Pub ~Bar Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/bad_cast&oldid=182976 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 1 May 2025, at 16:30. Privacy policy About cppreference.com Disclaimers