std::decay - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: decay From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Metaprogramming library Type traits Type categories is_void (C++11) is_null_pointer (C++11) ( DR* ) is_array (C++11) is_pointer (C++11) is_enum (C++11) is_union (C++11) is_class (C++11) is_function (C++11) is_reference (C++11) is_object (C++11) is_scalar (C++11) is_compound (C++11) is_integral (C++11) is_floating_point (C++11) is_fundamental (C++11) is_arithmetic (C++11) is_lvalue_reference (C++11) is_rvalue_reference (C++11) is_member_pointer (C++11) is_member_object_pointer (C++11) is_member_function_pointer (C++11) Type properties is_const (C++11) is_volatile (C++11) is_empty (C++11) is_polymorphic (C++11) is_final (C++14) is_abstract (C++11) is_aggregate (C++17) is_implicit_lifetime (C++23) is_trivial (C++11) (deprecated in C++26) is_trivially_copyable (C++11) is_standard_layout (C++11) is_literal_type (C++11) ( until C++20* ) is_pod (C++11) (deprecated in C++20) is_signed (C++11) is_unsigned (C++11) is_bounded_array (C++20) is_unbounded_array (C++20) is_scoped_enum (C++23) has_unique_object_representations (C++17) Type trait constants integral_constant bool_constant true_type false_type (C++11) (C++17) (C++11) (C++11) Metafunctions conjunction (C++17) disjunction (C++17) negation (C++17) Supported operations is_constructible is_trivially_constructible is_nothrow_constructible (C++11) (C++11) (C++11) is_default_constructible is_trivially_default_constructible is_nothrow_default_constructible (C++11) (C++11) (C++11) is_copy_constructible is_trivially_copy_constructible is_nothrow_copy_constructible (C++11) (C++11) (C++11) is_move_constructible is_trivially_move_constructible is_nothrow_move_constructible (C++11) (C++11) (C++11) is_assignable is_trivially_assignable is_nothrow_assignable (C++11) (C++11) (C++11) is_copy_assignable is_trivially_copy_assignable is_nothrow_copy_assignable (C++11) (C++11) (C++11) is_move_assignable is_trivially_move_assignable is_nothrow_move_assignable (C++11) (C++11) (C++11) is_destructible is_trivially_destructible is_nothrow_destructible (C++11) (C++11) (C++11) has_virtual_destructor (C++11) is_swappable_with is_swappable is_nothrow_swappable_with is_nothrow_swappable (C++17) (C++17) (C++17) (C++17) Relationships and property queries is_same (C++11) is_convertible is_nothrow_convertible (C++11) (C++20) is_layout_compatible (C++20) is_pointer_interconvertible_base_of (C++20) is_pointer_interconvertible_with_class (C++20) is_corresponding_member (C++20) reference_constructs_from_temporary (C++23) reference_converts_from_temporary (C++23) is_base_of (C++11) is_virtual_base_of (C++26) alignment_of (C++11) rank (C++11) extent (C++11) is_invocable is_invocable_r is_nothrow_invocable is_nothrow_invocable_r (C++17) (C++17) (C++17) (C++17) Type modifications remove_cv remove_const remove_volatile (C++11) (C++11) (C++11) add_cv add_const add_volatile (C++11) (C++11) (C++11) make_signed (C++11) make_unsigned (C++11) remove_reference (C++11) add_lvalue_reference add_rvalue_reference (C++11) (C++11) remove_pointer (C++11) add_pointer (C++11) remove_extent (C++11) remove_all_extents (C++11) Type transformations aligned_storage (C++11) (deprecated in C++23) aligned_union (C++11) (deprecated in C++23) decay (C++11) remove_cvref (C++20) result_of invoke_result (C++11) ( until C++20* ) (C++17) conditional (C++11) common_type (C++11) common_reference (C++20) underlying_type (C++11) type_identity (C++20) enable_if (C++11) void_t (C++17) Compile-time rational arithmetic Compile-time integer sequences integer_sequence (C++14) [edit] Defined in header <type_traits> template < class T > struct decay ; (since C++11) Performs the type conversions equivalent to the ones performed when passing function arguments by value. Formally: If T is “array of U ” or reference to it, the member typedef type is U* . Otherwise, if T is a function type F or reference to one, the member typedef type is std:: add_pointer < F > :: type . Otherwise, the member typedef type is std:: remove_cv < std:: remove_reference < T > :: type > :: type . If the program adds specializations for std::decay , the behavior is undefined. Contents 1 Member types 2 Helper types 3 Possible implementation 4 Example 5 See also [ edit ] Member types Name Definition type the result of applying the decay type conversions to T [ edit ] Helper types template < class T > using decay_t = typename decay < T > :: type ; (since C++14) [ edit ] Possible implementation template < class T > struct decay { private : typedef typename std:: remove_reference < T > :: type U ; public : typedef typename std:: conditional < std:: is_array < U > :: value , typename std:: add_pointer < typename std:: remove_extent < U > :: type > :: type , typename std:: conditional < std:: is_function < U > :: value , typename std:: add_pointer < U > :: type , typename std:: remove_cv < U > :: type > :: type > :: type type ; } ; [ edit ] Example Run this code #include <type_traits> template < typename T, typename U > constexpr bool is_decay_equ = std:: is_same_v < std :: decay_t < T > , U > ; static_assert ( is_decay_equ < int , int > && ! is_decay_equ < int , float > && is_decay_equ < int & , int > && is_decay_equ < int && , int > && is_decay_equ < const int & , int > && is_decay_equ < int [ 2 ] , int * > && ! is_decay_equ < int [ 4 ] [ 2 ] , int * > && ! is_decay_equ < int [ 4 ] [ 2 ] , int ** > && is_decay_equ < int [ 4 ] [ 2 ] , int ( * ) [ 2 ] > && is_decay_equ < int ( int ) , int ( * ) ( int ) > ) ; int main ( ) { } [ edit ] See also remove_cvref (C++20) combines std::remove_cv and std::remove_reference (class template) [edit] implicit conversion array-to-pointer, function-to-pointer, lvalue-to-rvalue conversions Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/decay&oldid=182067 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 19 March 2025, at 15:46. Privacy policy About cppreference.com Disclaimers