Fixed width integer types (since C++11) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions Fixed width integer types (since C++11) From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] Contents 1 Types 2 Macro constants 2.1 Signed integers : minimum value 2.2 Signed integers : maximum value 2.3 Unsigned integers : maximum value 3 Function macros for minimum-width integer constants 4 Format macro constants 4.1 Format constants for the std::fprintf family of functions 4.2 Format constants for the std::fscanf family of functions 5 Notes 6 Example 7 Defect reports 8 References 9 See also [ edit ] Types Defined in header <cstdint> int8_t int16_t int32_t int64_t (optional) signed integer type with width of exactly 8, 16, 32 and 64 bits respectively with no padding bits and using 2's complement for negative values (provided if and only if the implementation directly supports the type) (typedef) [edit] int_fast8_t int_fast16_t int_fast32_t int_fast64_t fastest signed integer type with width of at least 8, 16, 32 and 64 bits respectively (typedef) [edit] int_least8_t int_least16_t int_least32_t int_least64_t smallest signed integer type with width of at least 8, 16, 32 and 64 bits respectively (typedef) [edit] intmax_t maximum-width signed integer type (typedef) [edit] intptr_t (optional) signed integer type capable of holding a pointer to void (typedef) [edit] uint8_t uint16_t uint32_t uint64_t (optional) unsigned integer type with width of exactly 8, 16, 32 and 64 bits respectively (provided if and only if the implementation directly supports the type) (typedef) [edit] uint_fast8_t uint_fast16_t uint_fast32_t uint_fast64_t fastest unsigned integer type with width of at least 8, 16, 32 and 64 bits respectively (typedef) [edit] uint_least8_t uint_least16_t uint_least32_t uint_least64_t smallest unsigned integer type with width of at least 8, 16, 32 and 64 bits respectively (typedef) [edit] uintmax_t maximum-width unsigned integer type (typedef) [edit] uintptr_t (optional) unsigned integer type capable of holding a pointer to void (typedef) [edit] The implementation may define typedef names int N _t , int_fast N _t , int_least N _t , uint N _t , uint_fast N _t , and uint_least N _t when N is not 8, 16, 32 or 64. Typedef names of the form int N _t may only be defined if the implementation supports an integer type of that width with no padding. Thus, std::uint24_t denotes an unsigned integer type with a width of exactly 24 bits. Each of the macros listed in below is defined if and only if the implementation defines the corresponding typedef name. The macros INT N _C and UINT N _C correspond to the typedef names int_least N _t and uint_least N _t , respectively. [ edit ] Macro constants Defined in header <cstdint> Signed integers : minimum value INT8_MIN INT16_MIN INT32_MIN INT64_MIN (optional) minimum value of std::int8_t , std::int16_t , std::int32_t and std::int64_t respectively (macro constant) [edit] INT_FAST8_MIN INT_FAST16_MIN INT_FAST32_MIN INT_FAST64_MIN minimum value of std::int_fast8_t , std::int_fast16_t , std::int_fast32_t and std::int_fast64_t respectively (macro constant) [edit] INT_LEAST8_MIN INT_LEAST16_MIN INT_LEAST32_MIN INT_LEAST64_MIN minimum value of std::int_least8_t , std::int_least16_t , std::int_least32_t and std::int_least64_t respectively (macro constant) [edit] INTPTR_MIN (optional) minimum value of std::intptr_t (macro constant) [edit] INTMAX_MIN minimum value of std::intmax_t (macro constant) [edit] Signed integers : maximum value INT8_MAX INT16_MAX INT32_MAX INT64_MAX (optional) maximum value of std::int8_t , std::int16_t , std::int32_t and std::int64_t respectively (macro constant) [edit] INT_FAST8_MAX INT_FAST16_MAX INT_FAST32_MAX INT_FAST64_MAX maximum value of std::int_fast8_t , std::int_fast16_t , std::int_fast32_t and std::int_fast64_t respectively (macro constant) [edit] INT_LEAST8_MAX INT_LEAST16_MAX INT_LEAST32_MAX INT_LEAST64_MAX maximum value of std::int_least8_t , std::int_least16_t , std::int_least32_t and std::int_least64_t respectively (macro constant) [edit] INTPTR_MAX (optional) maximum value of std::intptr_t (macro constant) [edit] INTMAX_MAX maximum value of std::intmax_t (macro constant) [edit] Unsigned integers : maximum value UINT8_MAX UINT16_MAX UINT32_MAX UINT64_MAX (optional) maximum value of std::uint8_t , std::uint16_t , std::uint32_t and std::uint64_t respectively (macro constant) [edit] UINT_FAST8_MAX UINT_FAST16_MAX UINT_FAST32_MAX UINT_FAST64_MAX maximum value of std::uint_fast8_t , std::uint_fast16_t , std::uint_fast32_t and std::uint_fast64_t respectively (macro constant) [edit] UINT_LEAST8_MAX UINT_LEAST16_MAX UINT_LEAST32_MAX UINT_LEAST64_MAX maximum value of std::uint_least8_t , std::uint_least16_t , std::uint_least32_t and std::uint_least64_t respectively (macro constant) [edit] UINTPTR_MAX (optional) maximum value of std::uintptr_t (macro constant) [edit] UINTMAX_MAX maximum value of std::uintmax_t (macro constant) [edit] [ edit ] Function macros for minimum-width integer constants INT8_C INT16_C INT32_C INT64_C expands to an integer constant expression having the value specified by its argument and whose type is the promoted type of std::int_least8_t , std::int_least16_t , std::int_least32_t and std::int_least64_t respectively (function macro) [edit] INTMAX_C expands to an integer constant expression having the value specified by its argument and the type std::intmax_t (function macro) [edit] UINT8_C UINT16_C UINT32_C UINT64_C expands to an integer constant expression having the value specified by its argument and whose type is the promoted type of std::uint_least8_t , std::uint_least16_t , std::uint_least32_t and std::uint_least64_t respectively (function macro) [edit] UINTMAX_C expands to an integer constant expression having the value specified by its argument and the type std::uintmax_t (function macro) [edit] #include <cstdint> UINT64_C ( 0x123 ) // expands to a literal of type uint_least64_t and value 0x123 [ edit ] Format macro constants Defined in header <cinttypes> [ edit ] Format constants for the std::fprintf family of functions Each of the PRI macros listed here is defined if and only if the implementation defines the corresponding typedef name. Equivalent for int or unsigned int Description Macros for data types std::int x _t std::int_least x _t std::int_fast x _t std::intmax_t std::intptr_t d output of a signed decimal integer value PRId x PRIdLEAST x PRIdFAST x PRIdMAX PRIdPTR i PRIi x PRIiLEAST x PRIiFAST x PRIiMAX PRIiPTR u output of an unsigned decimal integer value PRIu x PRIuLEAST x PRIuFAST x PRIuMAX PRIuPTR o output of an unsigned octal integer value PRIo x PRIoLEAST x PRIoFAST x PRIoMAX PRIoPTR x output of an unsigned lowercase hexadecimal integer value PRIx x PRIxLEAST x PRIxFAST x PRIxMAX PRIxPTR X output of an unsigned uppercase hexadecimal integer value PRIX x PRIXLEAST x PRIXFAST x PRIXMAX PRIXPTR [ edit ] Format constants for the std::fscanf family of functions Each of the SCN macros listed in here is defined if and only if the implementation defines the corresponding typedef name and has a suitable std::fscanf length modifier for the type. Equivalent for int or unsigned int Description Macros for data types std::int x _t std::int_least x _t std::int_fast x _t std::intmax_t std::intptr_t d input of a signed decimal integer value SCNd x SCNdLEAST x SCNdFAST x SCNdMAX SCNdPTR i input of a signed integer value SCNi x SCNiLEAST x SCNiFAST x SCNiMAX SCNiPTR u input of an unsigned decimal integer value SCNu x SCNuLEAST x SCNuFAST x SCNuMAX SCNuPTR o input of an unsigned octal integer value SCNo x SCNoLEAST x SCNoFAST x SCNoMAX SCNoPTR x input of an unsigned hexadecimal integer value SCNx x SCNxLEAST x SCNxFAST x SCNxMAX SCNxPTR [ edit ] Notes Because C++ interprets a character immediately following a string literal as a user-defined string literal , C code such as printf ( "%" PRId64 " \n " ,n ) ; is invalid C++ and requires a space before PRId64 . The C99 standard suggests that C++ implementations should not define the above limit, constant, or format macros unless the macros __STDC_LIMIT_MACROS , __STDC_CONSTANT_MACROS or __STDC_FORMAT_MACROS (respectively) are defined before including the relevant C header ( stdint.h or inttypes.h ). This recommendation was not adopted by any C++ standard and was removed in C11. However, some implementations (such as glibc 2.17) try to apply this rule, and it may be necessary to define the __STDC macros; C++ compilers may try to work around this by automatically defining them in some circumstances. std::int8_t may be signed char and std::uint8_t may be unsigned char , but neither can be char regardless of its signedness (because char is not considered a "signed integer type" or "unsigned integer type"). [ edit ] Example See also a note regarding spaces before format macros used in this example. Run this code #include <cinttypes> #include <cstdio> int main ( ) { std:: printf ( "%zu \n " , sizeof ( std :: int64_t ) ) ; std:: printf ( "%s \n " , PRId64 ) ; std:: printf ( "%+" PRId64 " \n " , INT64_MIN ) ; std:: printf ( "%+" PRId64 " \n " , INT64_MAX ) ; std :: int64_t n = 7 ; std:: printf ( "%+" PRId64 " \n " , n ) ; } Possible output: 8 lld -9223372036854775808 +9223372036854775807 +7 [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2820 C++11 the requirements for optional typedef names and macros were inconsistent with C made consistent [ edit ] References C++23 standard (ISO/IEC 14882:2024): 17.4.1 Header <cstdint> synopsis [cstdint.syn] 31.13.2 Header <cinttypes> synopsis [cinttypes.syn] C++20 standard (ISO/IEC 14882:2020): 17.4 Integer types [cstdint] 29.12.2 Header <cinttypes> synopsis [cinttypes.syn] C++17 standard (ISO/IEC 14882:2017): 21.4 Integer types [cstdint] 30.11.2 Header <cinttypes> synopsis [cinttypes.syn] C++14 standard (ISO/IEC 14882:2014): 18.4 Integer types [cstdint] 27.9.2 C library files [c.files] C++11 standard (ISO/IEC 14882:2011): 18.4 Integer types [cstdint] 27.9.2 C library files [c.files] [ edit ] See also Fundamental types C documentation for Fixed width integer types Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/integer&oldid=169669 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 8 February 2024, at 10:18. Privacy policy About cppreference.com Disclaimers