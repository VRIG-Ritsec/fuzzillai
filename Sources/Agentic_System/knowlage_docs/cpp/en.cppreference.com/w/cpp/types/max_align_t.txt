std::max_align_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: max_align_t From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] Defined in header <cstddef> typedef /* implementation-defined */ max_align_t ; (since C++11) std::max_align_t is a standard-layout TrivialType (until C++26) TriviallyCopyable type (since C++26) whose alignment requirement is at least as strict (as large) as that of every scalar type. std:: is_trivially_default_constructible_v < std :: max_align_t > is true . Contents 1 Notes 2 Example 3 References 4 See also [ edit ] Notes Pointers returned by allocation functions such as std::malloc are suitably aligned for any object, which means they are aligned at least as strictly as std::max_align_t . [ edit ] Example Run this code #include <cstddef> #include <iostream> int main ( ) { std:: cout << alignof ( std :: max_align_t ) << ' \n ' ; } Possible output: 16 [ edit ] References C++23 standard (ISO/IEC 14882:2024): 17.2.4 Sizes, alignments, and offsets [support.types.layout] (p: 504-505) C++20 standard (ISO/IEC 14882:2020): 17.2.4 Sizes, alignments, and offsets [support.types.layout] (p: 507-508) C++17 standard (ISO/IEC 14882:2017): 21.2.4 Sizes, alignments, and offsets [support.types.layout] (p: 479) C++14 standard (ISO/IEC 14882:2014): 18.2 Types [support.types] (p: 443-444) C++11 standard (ISO/IEC 14882:2011): 18.2 Types [support.types] (p: 454-455) [ edit ] See also alignof (C++11) queries alignment requirements of a type (operator) [edit] alignment_of (C++11) obtains the type's alignment requirements (class template) [edit] is_scalar (C++11) checks if a type is a scalar type (class template) [edit] C documentation for max_align_t Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/max_align_t&oldid=178077 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 27 November 2024, at 21:53. Privacy policy About cppreference.com Disclaimers