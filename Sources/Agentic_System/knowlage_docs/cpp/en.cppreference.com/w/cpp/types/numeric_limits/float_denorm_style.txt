std::float_denorm_style - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: float_denorm_style From cppreference.com < cpp ‎ | types ‎ | numeric limits C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] std::numeric_limits Static constants numeric_limits::is_specialized numeric_limits::is_signed numeric_limits::is_integer numeric_limits::is_exact numeric_limits::has_infinity numeric_limits::has_quiet_NaN numeric_limits::has_signaling_NaN numeric_limits::has_denorm numeric_limits::has_denorm_loss numeric_limits::round_style numeric_limits::is_iec559 numeric_limits::is_bounded numeric_limits::is_modulo numeric_limits::digits numeric_limits::digits10 numeric_limits::max_digits10 (C++11) numeric_limits::radix numeric_limits::min_exponent numeric_limits::min_exponent10 numeric_limits::max_exponent numeric_limits::max_exponent10 numeric_limits::traps numeric_limits::tinyness_before Static member functions numeric_limits::min numeric_limits::lowest (C++11) numeric_limits::max numeric_limits::epsilon numeric_limits::round_error numeric_limits::infinity numeric_limits::quiet_NaN numeric_limits::signaling_NaN numeric_limits::denorm_min Helper types float_round_style float_denorm_style [edit] Defined in header <limits> enum float_denorm_style { denorm_indeterminate = - 1 , denorm_absent = 0 , denorm_present = 1 } ; (deprecated in C++23) Enumeration constants of type std::float_denorm_style indicate support of subnormal values by floating-point types. [ edit ] Enumeration constants Enumerator Meaning std::denorm_indeterminate support of subnormal values cannot be determined std::denorm_absent the type does not support subnormal values std::denorm_present the type allows subnormal values [ edit ] See also has_denorm [static] identifies the denormalization style used by the floating-point type (public static member constant) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/numeric_limits/float_denorm_style&oldid=182075 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 19 March 2025, at 19:35. Privacy policy About cppreference.com Disclaimers