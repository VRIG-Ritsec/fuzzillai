std::ptrdiff_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: ptrdiff_t From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] Defined in header <cstddef> typedef /*implementation-defined*/ ptrdiff_t ; std::ptrdiff_t is the signed integer type of the result of subtracting two pointers. The bit width of std::ptrdiff_t is not less than 17. (since C++11) Contents 1 Notes 2 Possible implementation 3 Example 4 See also [ edit ] Notes std::ptrdiff_t is used for pointer arithmetic and array indexing, if negative values are possible. Programs that use other types, such as int , may fail on, e.g. 64-bit systems when the index exceeds INT_MAX or if it relies on 32-bit modular arithmetic. When working with the C++ container library, the proper type for the difference between iterators is the member typedef difference_type , which is often synonymous with std::ptrdiff_t . Only pointers to elements of the same array (including the pointer one past the end of the array) may be subtracted from each other. If an array is so large (greater than PTRDIFF_MAX elements, but less than SIZE_MAX bytes), that the difference between two pointers may not be representable as std::ptrdiff_t , the result of subtracting two such pointers is undefined. For char arrays shorter than PTRDIFF_MAX , std::ptrdiff_t acts as the signed counterpart of std::size_t : it can store the size of the array of any type and is, on most platforms, synonymous with std::intptr_t . It is unspecified whether the declaration of std::ptrdiff_t is available in any other standard library header. An implementation may avoid introducing this name even when the standard requires std::ptrdiff_t to be used. [ edit ] Possible implementation // valid since C++11 using ptrdiff_t = decltype ( static_cast < int * > ( nullptr ) - static_cast < int * > ( nullptr ) ) ; [ edit ] Example Run this code #include <cstddef> #include <iostream> int main ( ) { const std:: size_t N = 10 ; int * a = new int [ N ] ; int * end = a + N ; for ( std :: ptrdiff_t i = N ; i > 0 ; -- i ) std:: cout << ( * ( end - i ) = i ) << ' ' ; std:: cout << ' \n ' ; delete [ ] a ; } Output: 10 9 8 7 6 5 4 3 2 1 [ edit ] See also size_t unsigned integer type returned by the sizeof operator (typedef) [edit] offsetof byte offset from the beginning of a standard-layout type to specified member (function macro) [edit] C documentation for ptrdiff_t Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/ptrdiff_t&oldid=173340 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 6 July 2024, at 10:54. Privacy policy About cppreference.com Disclaimers