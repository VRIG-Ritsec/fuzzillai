std::remove_cvref - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: remove_cvref From cppreference.com < cpp ‎ | types C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Metaprogramming library Type traits Type categories is_void (C++11) is_null_pointer (C++11) ( DR* ) is_array (C++11) is_pointer (C++11) is_enum (C++11) is_union (C++11) is_class (C++11) is_function (C++11) is_reference (C++11) is_object (C++11) is_scalar (C++11) is_compound (C++11) is_integral (C++11) is_floating_point (C++11) is_fundamental (C++11) is_arithmetic (C++11) is_lvalue_reference (C++11) is_rvalue_reference (C++11) is_member_pointer (C++11) is_member_object_pointer (C++11) is_member_function_pointer (C++11) Type properties is_const (C++11) is_volatile (C++11) is_empty (C++11) is_polymorphic (C++11) is_final (C++14) is_abstract (C++11) is_aggregate (C++17) is_implicit_lifetime (C++23) is_trivial (C++11) (deprecated in C++26) is_trivially_copyable (C++11) is_standard_layout (C++11) is_literal_type (C++11) ( until C++20* ) is_pod (C++11) (deprecated in C++20) is_signed (C++11) is_unsigned (C++11) is_bounded_array (C++20) is_unbounded_array (C++20) is_scoped_enum (C++23) has_unique_object_representations (C++17) Type trait constants integral_constant bool_constant true_type false_type (C++11) (C++17) (C++11) (C++11) Metafunctions conjunction (C++17) disjunction (C++17) negation (C++17) Supported operations is_constructible is_trivially_constructible is_nothrow_constructible (C++11) (C++11) (C++11) is_default_constructible is_trivially_default_constructible is_nothrow_default_constructible (C++11) (C++11) (C++11) is_copy_constructible is_trivially_copy_constructible is_nothrow_copy_constructible (C++11) (C++11) (C++11) is_move_constructible is_trivially_move_constructible is_nothrow_move_constructible (C++11) (C++11) (C++11) is_assignable is_trivially_assignable is_nothrow_assignable (C++11) (C++11) (C++11) is_copy_assignable is_trivially_copy_assignable is_nothrow_copy_assignable (C++11) (C++11) (C++11) is_move_assignable is_trivially_move_assignable is_nothrow_move_assignable (C++11) (C++11) (C++11) is_destructible is_trivially_destructible is_nothrow_destructible (C++11) (C++11) (C++11) has_virtual_destructor (C++11) is_swappable_with is_swappable is_nothrow_swappable_with is_nothrow_swappable (C++17) (C++17) (C++17) (C++17) Relationships and property queries is_same (C++11) is_convertible is_nothrow_convertible (C++11) (C++20) is_layout_compatible (C++20) is_pointer_interconvertible_base_of (C++20) is_pointer_interconvertible_with_class (C++20) is_corresponding_member (C++20) reference_constructs_from_temporary (C++23) reference_converts_from_temporary (C++23) is_base_of (C++11) is_virtual_base_of (C++26) alignment_of (C++11) rank (C++11) extent (C++11) is_invocable is_invocable_r is_nothrow_invocable is_nothrow_invocable_r (C++17) (C++17) (C++17) (C++17) Type modifications remove_cv remove_const remove_volatile (C++11) (C++11) (C++11) add_cv add_const add_volatile (C++11) (C++11) (C++11) make_signed (C++11) make_unsigned (C++11) remove_reference (C++11) add_lvalue_reference add_rvalue_reference (C++11) (C++11) remove_pointer (C++11) add_pointer (C++11) remove_extent (C++11) remove_all_extents (C++11) Type transformations aligned_storage (C++11) (deprecated in C++23) aligned_union (C++11) (deprecated in C++23) decay (C++11) remove_cvref (C++20) result_of invoke_result (C++11) ( until C++20* ) (C++17) conditional (C++11) common_type (C++11) common_reference (C++20) underlying_type (C++11) type_identity (C++20) enable_if (C++11) void_t (C++17) Compile-time rational arithmetic Compile-time integer sequences integer_sequence (C++14) [edit] Defined in header <type_traits> template < class T > struct remove_cvref ; (since C++20) If the type T is a reference type, provides the member typedef type which is the type referred to by T with its topmost cv-qualifiers removed. Otherwise type is T with its topmost cv-qualifiers removed. If the program adds specializations for std::remove_cvref , the behavior is undefined. Contents 1 Member types 2 Helper types 3 Possible implementation 4 Notes 5 Example 6 See also [ edit ] Member types Name Definition type the type referred by T or T itself if it is not a reference, with top-level cv-qualifiers removed [ edit ] Helper types template < class T > using remove_cvref_t = remove_cvref < T > :: type ; (since C++20) [ edit ] Possible implementation template < class T > struct remove_cvref { using type = std:: remove_cv_t < std:: remove_reference_t < T >> ; } ; [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_remove_cvref 201711L (C++20) std::remove_cvref [ edit ] Example Run this code #include <type_traits> int main ( ) { static_assert ( std:: is_same_v < std :: remove_cvref_t < int > , int > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < int & > , int > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < int && > , int > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < const int & > , int > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < const int [ 2 ] > , int [ 2 ] > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < const int ( & ) [ 2 ] > , int [ 2 ] > ) ; static_assert ( std:: is_same_v < std :: remove_cvref_t < int ( int ) > , int ( int ) > ) ; } [ edit ] See also remove_cv remove_const remove_volatile (C++11) (C++11) (C++11) removes const and/or volatile specifiers from the given type (class template) [edit] remove_reference (C++11) removes a reference from the given type (class template) [edit] decay (C++11) applies type transformations as when passing a function argument by value (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types/remove_cvref&oldid=170266 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 23 March 2024, at 01:35. Privacy policy About cppreference.com Disclaimers