std::any - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: any From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::any Member functions any::any any::~any any::operator= Modifiers any::emplace any::reset any::swap Observers any::has_value any::type Non-member functions swap (std::any) any_cast make_any Helper classes bad_any_cast [edit] Defined in header <any> class any ; (since C++17) The class any describes a type-safe container for single values of any copy constructible type. 1) An object of class any stores an instance of any type that satisfies the constructor requirements or is empty, and this is referred to as the state of the class any object. The stored instance is called the contained object. Two states are equivalent if they are either both empty or if both are not empty and if the contained objects are equivalent. 2) The non-member any_cast functions provide type-safe access to the contained object. Typically, implementations apply small objects optimization (avoid dynamic allocations) to types for which std::is_nothrow_move_constructible is true . Contents 1 Member functions 1.1 Modifiers 1.2 Observers 2 Non-member functions 3 Helper classes 4 Notes 5 Example 6 See also [ edit ] Member functions (constructor) constructs an any object (public member function) [edit] operator= assigns an any object (public member function) [edit] (destructor) destroys an any object (public member function) [edit] Modifiers emplace change the contained object, constructing the new object directly (public member function) [edit] reset destroys contained object (public member function) [edit] swap swaps two any objects (public member function) [edit] Observers has_value checks if object holds a value (public member function) [edit] type returns the typeid of the contained value (public member function) [edit] [ edit ] Non-member functions std::swap (std::any) (C++17) specializes the std::swap algorithm (function) [edit] any_cast (C++17) type-safe access to the contained object (function template) [edit] make_any (C++17) creates an any object (function template) [edit] [ edit ] Helper classes bad_any_cast (C++17) exception thrown by the value-returning forms of any_cast on a type mismatch (class) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_any 201606L (C++17) std::any [ edit ] Example Run this code #include <any> #include <iostream> int main ( ) { std:: cout << std:: boolalpha ; // any type std :: any a = 1 ; std:: cout << a. type ( ) . name ( ) << ": " << std:: any_cast < int > ( a ) << ' \n ' ; a = 3.14 ; std:: cout << a. type ( ) . name ( ) << ": " << std:: any_cast < double > ( a ) << ' \n ' ; a = true ; std:: cout << a. type ( ) . name ( ) << ": " << std:: any_cast < bool > ( a ) << ' \n ' ; // bad cast try { a = 1 ; std:: cout << std:: any_cast < float > ( a ) << ' \n ' ; } catch ( const std:: bad_any_cast & e ) { std:: cout << e. what ( ) << ' \n ' ; } // has value a = 2 ; if ( a. has_value ( ) ) std:: cout << a. type ( ) . name ( ) << ": " << std:: any_cast < int > ( a ) << ' \n ' ; // reset a. reset ( ) ; if ( ! a. has_value ( ) ) std:: cout << "no value \n " ; // pointer to contained data a = 3 ; int * i = std:: any_cast < int > ( & a ) ; std:: cout << * i << ' \n ' ; } Possible output: int: 1 double: 3.14 bool: true bad any_cast int: 2 no value 3 [ edit ] See also function (C++11) copyable wrapper of any copy constructible callable object (class template) [edit] move_only_function (C++23) move-only wrapper of any callable object that supports qualifiers in a given call signature (class template) [edit] variant (C++17) a type-safe discriminated union (class template) [edit] optional (C++17) a wrapper that may or may not hold an object (class template) [edit] unique_ptr (C++11) smart pointer with unique object ownership semantics (class template) [edit] indirect (C++26) a wrapper containing dynamically-allocated object with value-like semantics (class template) [edit] polymorphic (C++26) a polymorphic wrapper containing dynamically-allocated object with value-like semantics (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/any&oldid=182981 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 1 May 2025, at 18:15. Privacy policy About cppreference.com Disclaimers