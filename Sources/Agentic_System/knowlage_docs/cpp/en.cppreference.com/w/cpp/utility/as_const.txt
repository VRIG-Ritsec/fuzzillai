std::as_const - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: as_const From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Defined in header <utility> template < class T > constexpr std:: add_const_t < T > & as_const ( T & t ) noexcept ; (1) (since C++17) template < class T > void as_const ( const T && ) = delete ; (2) (since C++17) 1) Forms lvalue reference to const type of t . 2) const rvalue reference overload is deleted to disallow rvalue arguments. Contents 1 Possible implementation 2 Notes 3 Example 4 See also [ edit ] Possible implementation template < class T > constexpr std:: add_const_t < T > & as_const ( T & t ) noexcept { return t ; } [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_as_const 201510L (C++17) std::as_const [ edit ] Example Run this code #include <cassert> #include <string> #include <type_traits> #include <utility> int main ( ) { std:: string mutableString = "Hello World!" ; auto && constRef = std :: as_const ( mutableString ) ; mutableString. clear ( ) ; // OK // constRef.clear(); // Error: 'constRef' is 'const' qualified, // but 'clear' is not marked const assert ( & constRef == & mutableString ) ; assert ( & std :: as_const ( mutableString ) == & mutableString ) ; using ExprType = std:: remove_reference_t < decltype ( std :: as_const ( mutableString ) ) > ; static_assert ( std:: is_same_v < std:: remove_const_t < ExprType > , std:: string > , "ExprType should be some kind of string." ) ; static_assert ( ! std:: is_same_v < ExprType, std:: string > , "ExprType shouldn't be a mutable string." ) ; } [ edit ] See also is_const (C++11) checks if a type is const-qualified (class template) [edit] add_cv add_const add_volatile (C++11) (C++11) (C++11) adds const and/or volatile specifiers to the given type (class template) [edit] remove_cv remove_const remove_volatile (C++11) (C++11) (C++11) removes const and/or volatile specifiers from the given type (class template) [edit] ranges::as_const_view views::as_const (C++23) converts a view into a constant_range (class template) (range adaptor object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/as_const&oldid=182820 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 24 April 2025, at 21:33. Privacy policy About cppreference.com Disclaimers