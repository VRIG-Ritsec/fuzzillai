Bit manipulation (since C++20) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions Bit manipulation (since C++20) From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Bit manipulation bit_cast (C++20) byteswap (C++23) Integral powers of 2 has_single_bit (C++20) bit_ceil (C++20) bit_floor (C++20) bit_width (C++20) Rotating rotl (C++20) rotr (C++20) Counting countl_zero (C++20) countl_one (C++20) countr_zero (C++20) countr_one (C++20) popcount (C++20) Endian endian (C++20) [edit] Provides several function templates to access, manipulate, and process individual bits and bit sequences. Defined in header <bit> Defined in namespace std bit_cast (C++20) reinterpret the object representation of one type as that of another (function template) [edit] byteswap (C++23) reverses the bytes in the given integer value (function template) [edit] Contents 1 Integral powers of 2 2 Rotating 3 Counting 4 Endian 5 Notes 6 See also Integral powers of 2 has_single_bit (C++20) checks if a number is an integral power of 2 (function template) [edit] bit_ceil (C++20) finds the smallest integral power of 2 not less than the given value (function template) [edit] bit_floor (C++20) finds the largest integral power of 2 not greater than the given value (function template) [edit] bit_width (C++20) finds the smallest number of bits needed to represent the given value (function template) [edit] Rotating rotl (C++20) computes the result of bitwise left-rotation (function template) [edit] rotr (C++20) computes the result of bitwise right-rotation (function template) [edit] Counting countl_zero (C++20) counts the number of consecutive ​ 0 ​ bits, starting from the most significant bit (function template) [edit] countl_one (C++20) counts the number of consecutive 1 bits, starting from the most significant bit (function template) [edit] countr_zero (C++20) counts the number of consecutive ​ 0 ​ bits, starting from the least significant bit (function template) [edit] countr_one (C++20) counts the number of consecutive 1 bits, starting from the least significant bit (function template) [edit] popcount (C++20) counts the number of 1 bits in an unsigned integer (function template) [edit] Endian endian (C++20) indicates the endianness of scalar types (enum) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_bit_cast 201806L (C++20) std::bit_cast __cpp_lib_bitops 201907L (C++20) Bit operations __cpp_lib_int_pow2 202002L (C++20) Integral power-of- 2 operations __cpp_lib_byteswap 202110L (C++23) std::byteswap [ edit ] See also C documentation for Bit manipulation Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/bit&oldid=182052 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 19 March 2025, at 15:03. Privacy policy About cppreference.com Disclaimers