std::common_comparison_category - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: common_comparison_category From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Defined in header <compare> template < class ... Ts > struct common_comparison_category { using type = /* see below */ ; } ; (since C++20) The class template std::common_comparison_category provides an alias (as the member typedef type ) for the strongest comparison category to which all of the template arguments Ts... can be converted. In detail, the common comparison type of a list of n types T 0 ... T n-1 is defined as follows: If any T i is not a comparison category type ( std::partial_ordering , std::weak_ordering , std::strong_ordering ), U is void . Otherwise, if at least one T i is std::partial_ordering , U is std::partial_ordering . Otherwise, if at least one T i is std::weak_ordering , U is std::weak_ordering . Otherwise (if every T i is std::strong_ordering , or if the list is empty), U is std::strong_ordering . Contents 1 Template parameters 2 Helper template 3 Member types 4 Possible implementation 5 Example 6 See also [ edit ] Template parameters ...Ts - a possibly empty list of types [ edit ] Helper template template < class ... Ts > using common_comparison_category_t = common_comparison_category < Ts... > :: type ; (since C++20) [ edit ] Member types Member type Definition type the strongest common comparison category (as defined above) [ edit ] Possible implementation namespace detail { template < unsigned int > struct common_cmpcat_base { using type = void ; } ; template <> struct common_cmpcat_base < 0u > { using type = std:: strong_ordering ; } ; template <> struct common_cmpcat_base < 2u > { using type = std:: partial_ordering ; } ; template <> struct common_cmpcat_base < 4u > { using type = std:: weak_ordering ; } ; template <> struct common_cmpcat_base < 6u > { using type = std:: partial_ordering ; } ; } // namespace detail template < class ... Ts > struct common_comparison_category : detail :: common_cmpcat_base < ( 0u | ... | ( std:: is_same_v < Ts, std:: strong_ordering > ? 0u : std:: is_same_v < Ts, std:: weak_ordering > ? 4u : std:: is_same_v < Ts, std:: partial_ordering > ? 2u : 1u ) ) > { } ; [ edit ] Example This section is incomplete Reason: no example [ edit ] See also strong_ordering (C++20) the result type of 3-way comparison that supports all 6 operators and is substitutable (class) [edit] weak_ordering (C++20) the result type of 3-way comparison that supports all 6 operators and is not substitutable (class) [edit] partial_ordering (C++20) the result type of 3-way comparison that supports all 6 operators, is not substitutable, and allows incomparable values (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/compare/common_comparison_category&oldid=170995 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 17 April 2024, at 11:27. Privacy policy About cppreference.com Disclaimers