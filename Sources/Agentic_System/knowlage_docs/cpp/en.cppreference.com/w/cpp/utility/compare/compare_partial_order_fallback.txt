std::compare_partial_order_fallback - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: compare_partial_order_fallback From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Defined in header <compare> inline namespace /* unspecified */ { inline constexpr /* unspecified */ compare_partial_order_fallback = /* unspecified */ ; } (since C++20) Call signature template < class T, class U > requires /* see below */ constexpr std:: partial_ordering compare_partial_order_fallback ( T && t, U && u ) noexcept ( /* see below */ ) ; (since C++20) Performs three-way comparison on subexpressions t and u and produces a result of type std::partial_ordering , even if the operator <=> is unavailable. If std:: decay_t < T > and std:: decay_t < U >> are the same type, std :: compare_partial_order_fallback ( t, u ) is expression-equivalent to: std:: partial_order ( t, u ) , if it is a well-formed expression; otherwise, t == u ? std :: partial_ordering :: equivalent : t < u ? std :: partial_ordering :: less : u < t ? std :: partial_ordering :: greater : std :: partial_ordering :: unordered , if the expressions t == u , t < u and u < t are all well-formed and each of decltype ( t == u ) , decltype ( t < u ) and decltype ( u < t ) models boolean-testable , except that t and u are evaluated only once. In all other cases, std :: compare_partial_order_fallback ( t, u ) is ill-formed, which can result in substitution failure when it appears in the immediate context of a template instantiation. Contents 1 Customization point objects 2 Example 3 Defect reports 4 See also Customization point objects The name std::compare_partial_order_fallback denotes a customization point object , which is a const function object of a literal semiregular class type. See CustomizationPointObject for details. [ edit ] Example This section is incomplete Reason: no example [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2114 ( P2167R3 ) C++20 the fallback mechanism only required return types to be convertible to bool constraints strengthened LWG 3465 C++20 the fallback mechanism did not require u < t to be well-formed required LWG 4157 C++20 P2167R3 overwrote the resolution of LWG issue 3465 restored the resolution [ edit ] See also partial_order (C++20) performs 3-way comparison and produces a result of type std::partial_ordering (customization point object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/compare/compare_partial_order_fallback&oldid=180948 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 19 February 2025, at 20:12. Privacy policy About cppreference.com Disclaimers