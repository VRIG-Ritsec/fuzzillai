std::weak_order - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: weak_order From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Defined in header <compare> inline namespace /* unspecified */ { inline constexpr /* unspecified */ weak_order = /* unspecified */ ; } (since C++20) Call signature template < class T, class U > requires /* see below */ constexpr std:: weak_ordering weak_order ( T && t, U && u ) noexcept ( /* see below */ ) ; Compares two values using 3-way comparison and produces a result of type std::weak_ordering . Let t and u be expressions and T and U denote decltype ( ( t ) ) and decltype ( ( u ) ) respectively, std :: weak_order ( t, u ) is expression-equivalent to: If std:: is_same_v < std:: decay_t < T > , std:: decay_t < U >> is true : std:: weak_ordering ( weak_order ( t, u ) ) , if it is a well-formed expression with overload resolution performed in a context that does not include a declaration of std::weak_order , otherwise, if T is a floating-point type: if std:: numeric_limits < T > :: is_iec559 is true , performs the weak ordering comparison of floating-point values (see below) and returns that result as a value of type std::weak_ordering , otherwise, yields a value of type std::weak_ordering that is consistent with the ordering observed by T 's comparison operators, otherwise, std:: weak_ordering ( std:: compare_three_way ( ) ( t, u ) ) , if it is well-formed, otherwise, std:: weak_ordering ( std:: strong_order ( t, u ) ) , if it is well-formed. In all other cases, the expression is ill-formed, which can result in substitution failure when it appears in the immediate context of a template instantiation. Contents 1 Customization point objects 1.1 Strict weak order of IEEE floating-point types 2 Example 3 See also Customization point objects The name std::weak_order denotes a customization point object , which is a const function object of a literal semiregular class type. See CustomizationPointObject for details. [ edit ] Strict weak order of IEEE floating-point types Let x and y be values of same IEEE floating-point type, and weak_order_less ( x, y ) be the boolean result indicating if x precedes y in the strict weak order defined by the C++ standard. If neither x nor y is NaN, then weak_order_less ( x, y ) == true if and only if x < y , i.e. all representations of equal floating-point value are equivalent; If x is negative NaN and y is not negative NaN, then weak_order_less ( x, y ) == true ; If x is not positive NaN and y is positive NaN, then weak_order_less ( x, y ) == true ; If both x and y are NaNs with the same sign, then ( weak_order_less ( x, y ) || weak_order_less ( y, x ) ) == false , i.e. all NaNs with the same sign are equivalent. [ edit ] Example This section is incomplete Reason: no example [ edit ] See also weak_ordering (C++20) the result type of 3-way comparison that supports all 6 operators and is not substitutable (class) [edit] strong_order (C++20) performs 3-way comparison and produces a result of type std::strong_ordering (customization point object) [edit] partial_order (C++20) performs 3-way comparison and produces a result of type std::partial_ordering (customization point object) [edit] compare_weak_order_fallback (C++20) performs 3-way comparison and produces a result of type std::weak_ordering , even if operator <=> is unavailable (customization point object) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/compare/weak_order&oldid=150892 " Category : Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 22 April 2023, at 23:39. Privacy policy About cppreference.com Disclaimers