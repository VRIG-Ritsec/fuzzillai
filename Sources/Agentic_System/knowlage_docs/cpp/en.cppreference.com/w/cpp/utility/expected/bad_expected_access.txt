std::bad_expected_access - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: bad_expected_access From cppreference.com < cpp ‎ | utility ‎ | expected C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::expected Member functions expected::expected expected::~expected expected::operator= Observers expected::operator-> expected::operator* expected::operator bool expected::has_value expected::value expected::error expected::value_or expected::error_or Monadic operations expected::and_then expected::or_else expected::transform expected::transform_error Modifiers expected::emplace expected::swap Non-member functions operator== (std::expected) swap (std::expected) Helper classes unexpected bad_expected_access unexpect_t unexpect [edit] Defined in header <expected> template < class E > class bad_expected_access : public std :: bad_expected_access < void > (1) (since C++23) template <> class bad_expected_access < void > : public std:: exception (2) (since C++23) 1) Defines a type of object to be thrown by std::expected::value when accessing an expected object that contains an unexpected value. bad_expected_access<E> stores a copy of the unexpected value. 2) bad_expected_access < void > is the base class of all other bad_expected_access specializations. All member functions of std::bad_expected_access are constexpr : it is possible to create and use std::bad_expected_access objects in the evaluation of a constant expression. However, std::bad_expected_access objects generally cannot be constexpr , because any dynamically allocated storage must be released in the same evaluation of constant expression. (since C++26) This section is incomplete Reason: inheritance diagram Contents 1 Members of the primary template 2 std::bad_expected_access:: bad_expected_access 3 std::bad_expected_access:: error 4 std::bad_expected_access:: what 4.1 Return value 4.2 Notes 5 Inherited from std:: bad_expected_access < void > 5.1 Members of the bad_expected_access < void > specialization 6 Inherited from std:: exception 6.1 Member functions 6.2 Notes 6.3 Example 6.4 See also [ edit ] Members of the primary template (constructor) constructs a bad_expected_access object (public member function) error returns the stored value (public member function) what returns the explanatory string (public member function) std::bad_expected_access:: bad_expected_access explicit bad_expected_access ( E e ) ; (since C++23) (constexpr since C++26) Constructs a new bad_expected_access<E> object. Initializes the stored value with std::move(e) . std::bad_expected_access:: error const E & error ( ) const & noexcept ; (1) (since C++23) (constexpr since C++26) E & error ( ) & noexcept ; (2) (since C++23) (constexpr since C++26) const E && error ( ) const && noexcept ; (3) (since C++23) (constexpr since C++26) E && error ( ) && noexcept ; (4) (since C++23) (constexpr since C++26) Returns a reference to the stored value. std::bad_expected_access:: what const char * what ( ) const noexcept override ; (since C++23) (constexpr since C++26) Returns the explanatory string. Return value Pointer to a null-terminated string with explanatory information. The string is suitable for conversion and display as a std::wstring . The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function (e.g., copy assignment operator) on the exception object is called. The returned string is encoded with the ordinary literal encoding during constant evaluation. (since C++26) Notes Implementations are allowed but not required to override what() . Inherited from std:: bad_expected_access < void > Members of the bad_expected_access < void > specialization (constructor) constructs a bad_expected_access < void > object (protected member function) (destructor) destroys the bad_expected_access < void > object (protected member function) operator= replaces the bad_expected_access < void > object (protected member function) what returns the explanatory string (public member function) Special member functions of bad_expected_access < void > are protected. They can only be called by derived classes. Inherited from std:: exception Member functions (destructor) [virtual] destroys the exception object (virtual public member function of std::exception ) [edit] what [virtual] returns an explanatory string (virtual public member function of std::exception ) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_constexpr_exceptions 202502L (C++26) constexpr std::bad_expected_access [ edit ] Example This section is incomplete Reason: no example [ edit ] See also bad_optional_access (C++17) exception indicating checked access to an optional that doesn't contain a value (class) [edit] bad_variant_access (C++17) exception thrown on invalid accesses to the value of a variant (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected/bad_expected_access&oldid=182966 " Categories : Todo with reason Todo no example Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français 日本語 Русский 中文 This page was last modified on 1 May 2025, at 15:38. Privacy policy About cppreference.com Disclaimers