std::make_optional - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: make_optional From cppreference.com < cpp ‎ | utility ‎ | optional C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::optional Member functions optional::optional optional::~optional optional::operator= Observers optional::operator-> optional::operator* optional::operator bool optional::has_value optional::value optional::value_or Iterators optional::begin (C++26) optional::end (C++26) Monadic operations optional::and_then (C++23) optional::transform (C++23) optional::or_else (C++23) Modifiers optional::emplace optional::swap optional::reset Non-member functions operator== operator!= operator< operator<= operator> operator>= operator<=> (C++20) make_optional swap (std::optional) Deduction guides Helper classes hash <std::optional> nullopt_t in_place_t bad_optional_access Helper objects nullopt in_place [edit] Defined in header <optional> template < class T > constexpr std:: optional < std:: decay_t < T >> make_optional ( T && value ) ; (1) (since C++17) template < class T, class ... Args > constexpr std:: optional < T > make_optional ( Args && ... args ) ; (2) (since C++17) template < class T, class U, class ... Args > constexpr std:: optional < T > make_optional ( std:: initializer_list < U > il, Args && ... args ) ; (3) (since C++17) 1) Creates an optional object from value . Effectively calls std:: optional < std:: decay_t < T >> ( std:: forward < T > ( value ) ) . 2) Creates an optional object constructed in-place from args... . Equivalent to return std:: optional < T > ( std:: in_place , std:: forward < Args > ( args ) ... ) ; . This overload participates in overload resolution only if std:: is_constructible_v < T, Args... > is true . 3) Creates an optional object constructed in-place from il and args... . Equivalent to return std:: optional < T > ( std:: in_place , il, std:: forward < Args > ( args ) ... ) ; . This overload participates in overload resolution only if std:: is_constructible_v < T, std:: initializer_list < U > & , Args... > is true . Contents 1 Parameters 2 Return value 3 Exceptions 4 Notes 5 Example 6 See also [ edit ] Parameters value - the value to construct optional object with il, args - arguments to be passed to the constructor of T [ edit ] Return value The constructed optional object. [ edit ] Exceptions Throws any exception thrown by the constructor of T . [ edit ] Notes T need not be movable for overloads ( 2,3 ) due to guaranteed copy elision. [ edit ] Example Run this code #include <iomanip> #include <iostream> #include <optional> #include <string> #include <vector> int main ( ) { auto op1 = std :: make_optional < std:: vector < char >> ( { 'a' , 'b' , 'c' } ) ; std:: cout << "op1: " ; for ( char c : op1. value ( ) ) std:: cout << c << ',' ; auto op2 = std :: make_optional < std:: vector < int >> ( 5 , 2 ) ; std:: cout << " \n op2: " ; for ( int i : * op2 ) std:: cout << i << ',' ; std:: string str { "hello world" } ; auto op3 = std :: make_optional < std:: string > ( std :: move ( str ) ) ; std:: cout << " \n op3: " << std:: quoted ( op3. value_or ( "empty value" ) ) << ' \n ' ; std:: cout << "str: " << std:: quoted ( str ) << ' \n ' ; } Possible output: op1: a,b,c, op2: 2,2,2,2,2, op3: "hello world" str: "" [ edit ] See also (constructor) constructs the optional object (public member function) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/optional/make_optional&oldid=176015 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 11 September 2024, at 07:19. Privacy policy About cppreference.com Disclaimers