std::nullopt_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: nullopt_t From cppreference.com < cpp ‎ | utility ‎ | optional C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::optional Member functions optional::optional optional::~optional optional::operator= Observers optional::operator-> optional::operator* optional::operator bool optional::has_value optional::value optional::value_or Iterators optional::begin (C++26) optional::end (C++26) Monadic operations optional::and_then (C++23) optional::transform (C++23) optional::or_else (C++23) Modifiers optional::emplace optional::swap optional::reset Non-member functions operator== operator!= operator< operator<= operator> operator>= operator<=> (C++20) make_optional swap (std::optional) Deduction guides Helper classes hash <std::optional> nullopt_t in_place_t bad_optional_access Helper objects nullopt in_place [edit] Defined in header <optional> struct nullopt_t ; (since C++17) std::nullopt_t is an empty class type used to indicate that an std::optional does not contain a value. std::nullopt_t is a non-aggregate LiteralType that has no default constructor, no initializer-list constructor, but does have a constexpr constructor that takes an implementation-defined literal type. [ edit ] Notes The constraints on nullopt_t 's constructors exist to support both op = { } ; and op = nullopt ; as the syntax for disengaging an optional object. A possible implementation of this class is struct nullopt_t { constexpr explicit nullopt_t ( int ) { } } ; [ edit ] See also nullopt (C++17) an object of type nullopt_t (constant) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/optional/nullopt_t&oldid=172375 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 13 June 2024, at 03:45. Privacy policy About cppreference.com Disclaimers