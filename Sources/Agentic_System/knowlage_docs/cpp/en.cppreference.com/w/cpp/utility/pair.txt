std::pair - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: pair From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::pair Member functions pair::pair pair::operator= pair::swap (C++11) Non-member functions make_pair operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::pair) (C++11) get (std::pair) (C++11) Helper classes tuple_size <std::pair> (C++11) tuple_element <std::pair> (C++11) basic_common_reference <std::pair> (C++23) common_type <std::pair> (C++23) formatter <std::pair> (C++23) piecewise_construct_t (C++11) Deduction guides (C++17) [edit] Defined in header <utility> template < class T1, class T2 > struct pair ; std::pair is a class template that provides a way to store two heterogeneous objects as a single unit. A pair is a specific case of a std::tuple with two elements. If neither T1 nor T2 is a possibly cv-qualified class type with non-trivial destructor, or array thereof, the destructor of pair is trivial. Contents 1 Template parameters 2 Member types 3 Member objects 4 Member functions 5 Non-member functions 6 Helper classes 7 Helper specializations 8 Deduction guides (since C++17) 9 Defect reports 10 See also [ edit ] Template parameters T1, T2 - the types of the elements that the pair stores. [ edit ] Member types Member type Definition first_type T1 second_type T2 [ edit ] Member objects Member name Type first T1 second T2 [ edit ] Member functions (constructor) constructs new pair (public member function) [edit] operator= assigns the contents (public member function) [edit] swap (C++11) swaps the contents (public member function) [edit] [ edit ] Non-member functions make_pair creates a pair object of type, determined by the argument types (function template) [edit] operator== operator!= operator< operator<= operator> operator>= operator<=> (removed in C++20) (removed in C++20) (removed in C++20) (removed in C++20) (removed in C++20) (C++20) lexicographically compares the values in the pair (function template) [edit] std::swap (std::pair) (C++11) specializes the std::swap algorithm (function template) [edit] get (std::pair) (C++11) accesses an element of a pair (function template) [edit] [ edit ] Helper classes std::tuple_size <std::pair> (C++11) obtains the size of a pair (class template specialization) [edit] std::tuple_element <std::pair> (C++11) obtains the type of the elements of pair (class template specialization) [edit] std::basic_common_reference <std::pair> (C++23) determines the common reference type of two pair s (class template specialization) [edit] std::common_type <std::pair> (C++23) determines the common type of two pair s (class template specialization) [edit] std::formatter <std::pair> (C++23) formatting support for pair (class template specialization) [edit] [ edit ] Helper specializations template < class T, class U > constexpr bool enable_nonlocking_formatter_optimization < std :: pair < T, U >> = enable_nonlocking_formatter_optimization < T > && enable_nonlocking_formatter_optimization < U > ; (since C++23) This specialization of std::enable_nonlocking_formatter_optimization enables efficient implementation of std::print and std::println for printing a pair object when both T and U enable it. [ edit ] Deduction guides (since C++17) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2796 C++98 triviality of the destructor of pair was unspecified specified [ edit ] See also tuple (C++11) implements fixed size container, which holds elements of possibly different types (class template) [edit] tie (C++11) creates a tuple of lvalue references or unpacks a tuple into individual objects (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/pair&oldid=181396 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Česky Deutsch Español Français Italiano 日本語 한국어 Polski Português Русский 中文 This page was last modified on 6 March 2025, at 17:10. Privacy policy About cppreference.com Disclaimers