std::get(std::pair) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: get (std::pair) From cppreference.com < cpp ‎ | utility ‎ | pair C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::pair Member functions pair::pair pair::operator= pair::swap (C++11) Non-member functions make_pair operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::pair) (C++11) get (std::pair) (C++11) Helper classes tuple_size <std::pair> (C++11) tuple_element <std::pair> (C++11) basic_common_reference <std::pair> (C++23) common_type <std::pair> (C++23) formatter <std::pair> (C++23) piecewise_construct_t (C++11) Deduction guides (C++17) [edit] Defined in header <utility> template < std:: size_t I, class T1, class T2 > typename std:: tuple_element < I, std:: pair < T1,T2 > > :: type & get ( std:: pair < T1, T2 > & p ) noexcept ; (1) (since C++11) (constexpr since C++14) template < std:: size_t I, class T1, class T2 > const typename std:: tuple_element < I, std:: pair < T1,T2 > > :: type & get ( const std:: pair < T1,T2 > & p ) noexcept ; (2) (since C++11) (constexpr since C++14) template < std:: size_t I, class T1, class T2 > typename std:: tuple_element < I, std:: pair < T1,T2 > > :: type && get ( std:: pair < T1,T2 > && p ) noexcept ; (3) (since C++11) (constexpr since C++14) template < std:: size_t I, class T1, class T2 > const typename std:: tuple_element < I, std:: pair < T1,T2 > > :: type && get ( const std:: pair < T1,T2 > && p ) noexcept ; (4) (since C++11) (constexpr since C++14) template < class T, class U > constexpr T & get ( std:: pair < T, U > & p ) noexcept ; (5) (since C++14) template < class T, class U > constexpr const T & get ( const std:: pair < T, U > & p ) noexcept ; (6) (since C++14) template < class T, class U > constexpr T && get ( std:: pair < T, U > && p ) noexcept ; (7) (since C++14) template < class T, class U > constexpr const T && get ( const std:: pair < T, U > && p ) noexcept ; (8) (since C++14) template < class T, class U > constexpr T & get ( std:: pair < U, T > & p ) noexcept ; (9) (since C++14) template < class T, class U > constexpr const T & get ( const std:: pair < U, T > & p ) noexcept ; (10) (since C++14) template < class T, class U > constexpr T && get ( std:: pair < U, T > && p ) noexcept ; (11) (since C++14) template < class T, class U > constexpr const T && get ( const std:: pair < U, T > && p ) noexcept ; (12) (since C++14) Extracts an element from the pair using tuple-like interface. 1-4) The index-based overloads fail to compile if the index I is neither ​ 0 ​ nor 1 . 5-12) The type-based overloads fail to compile if the types T and U are the same. Contents 1 Parameters 2 Return value 3 Example 4 Defect reports 5 See also [ edit ] Parameters p - pair whose contents to extract [ edit ] Return value 1-4) Returns a reference to p. first if I == 0 and a reference to p. second if I == 1 . 5-8) Returns a reference to p. first . 9-12) Returns a reference to p. second . [ edit ] Example Run this code #include <iostream> #include <utility> int main ( ) { auto p = std:: make_pair ( 1 , 3.14 ) ; std:: cout << '(' << std :: get < 0 > ( p ) << ", " << std :: get < 1 > ( p ) << ") \n " ; std:: cout << '(' << std :: get < int > ( p ) << ", " << std :: get < double > ( p ) << ") \n " ; } Output: (1, 3.14) (1, 3.14) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2485 C++11 (by index) C++14 (by type) there are no overloads for const pair&& the overloads are added [ edit ] See also Structured binding (C++17) binds the specified names to sub-objects or tuple elements of the initializer [edit] get (std::tuple) (C++11) tuple accesses specified element (function template) [edit] get (std::array) (C++11) accesses an element of an array (function template) [edit] get (std::variant) (C++17) reads the value of the variant given the index or the type (if the type is unique), throws on error (function template) [edit] get (std::ranges::subrange) (C++20) obtains iterator or sentinel from a std::ranges::subrange (function template) [edit] get (std::complex) (C++26) obtains a reference to real or imaginary part from a std::complex (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/pair/get&oldid=175379 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 22 August 2024, at 09:22. Privacy policy About cppreference.com Disclaimers