std::piecewise_construct, std::piecewise_construct_t - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: piecewise_construct, std:: piecewise_construct_t From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::pair Member functions pair::pair pair::operator= pair::swap (C++11) Non-member functions make_pair operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::pair) (C++11) get (std::pair) (C++11) Helper classes tuple_size <std::pair> (C++11) tuple_element <std::pair> (C++11) basic_common_reference <std::pair> (C++23) common_type <std::pair> (C++23) formatter <std::pair> (C++23) piecewise_construct_t (C++11) Deduction guides (C++17) [edit] Defined in header <utility> struct piecewise_construct_t { explicit piecewise_construct_t ( ) = default ; } ; (1) (since C++11) constexpr std:: piecewise_construct_t piecewise_construct { } ; (2) (since C++11) (inline since C++17) 1) std::piecewise_construct_t is an empty class tag type used to disambiguate between different functions that take two tuple arguments. 2) The constant std::piecewise_construct is an instance of (1) . The overloads that do not use std::piecewise_construct_t assume that each tuple argument becomes the element of a pair. The overloads that use std::piecewise_construct_t assume that each tuple argument is used to construct, piecewise, a new object of specified type, which will become the element of the pair. Contents 1 Standard library 2 Example 3 Defect reports 4 See also [ edit ] Standard library The following standard library types and functions use it as a disambiguation tag: pair implements binary tuple, i.e. a pair of values (class template) [edit] uses_allocator_construction_args (C++20) prepares the argument list matching the flavor of uses-allocator construction required by the given type (function template) [edit] ranges::repeat_view views::repeat (C++23) a view consisting of a generated sequence by repeatedly producing the same value (class template) (customization point object) [edit] [ edit ] Example [edit] Run this code #include <iostream> #include <tuple> #include <utility> struct Foo { Foo ( std:: tuple < int , float > ) { std:: cout << "Constructed a Foo from a tuple \n " ; } Foo ( int , float ) { std:: cout << "Constructed a Foo from an int and a float \n " ; } } ; int main ( ) { std:: tuple < int , float > t ( 1 , 3.14 ) ; std:: cout << "Creating p1... \n " ; std:: pair < Foo, Foo > p1 ( t, t ) ; std:: cout << "Creating p2... \n " ; std:: pair < Foo, Foo > p2 ( std :: piecewise_construct , t, t ) ; } Output: Creating p1... Constructed a Foo from a tuple Constructed a Foo from a tuple Creating p2... Constructed a Foo from an int and a float Constructed a Foo from an int and a float [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2510 C++11 the default constructor was non-explicit, which could lead to ambiguity made explicit [ edit ] See also (constructor) constructs new pair (public member function of std::pair<T1,T2> ) Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/piecewise_construct&oldid=173771 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 18 July 2024, at 04:04. Privacy policy About cppreference.com Disclaimers