Program support utilities - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions Program support utilities From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Program support utilities Program termination abort exit quick_exit (C++11) _Exit (C++11) atexit at_quick_exit (C++11) EXIT_SUCCESS EXIT_FAILURE Unreachable control flow unreachable (C++23) Communicating with the environment system getenv Signals signal raise sig_atomic_t SIG_DFL SIG_IGN SIG_ERR Signal types SIGABRT SIGFPE SIGILL SIGINT SIGSEGV SIGTERM Non-local jumps setjmp longjmp Types jmp_buf [edit] Contents 1 Program termination 2 Unreachable control flow 3 Communicating with the environment 4 Signals 4.1 Signal types 5 Non-local jumps 5.1 Types 6 See also [ edit ] Program termination The following functions manage program termination and resource cleanup. Defined in header <cstdlib> abort causes abnormal program termination (without cleaning up) (function) [edit] exit causes normal program termination with cleaning up (function) [edit] quick_exit (C++11) causes quick program termination without completely cleaning up (function) [edit] _Exit (C++11) causes normal program termination without cleaning up (function) [edit] atexit registers a function to be called on std::exit() invocation (function) [edit] at_quick_exit (C++11) registers a function to be called on std::quick_exit invocation (function) [edit] EXIT_SUCCESS EXIT_FAILURE indicates program execution status (macro constant) [edit] Unreachable control flow Defined in header <utility> unreachable (C++23) marks unreachable point of execution (function) [edit] (since C++23) [ edit ] Communicating with the environment Defined in header <cstdlib> system calls the host environment's command processor (function) [edit] getenv access to the list of environment variables (function) [edit] [ edit ] Signals Several functions and macro constants for signal management are provided. Defined in header <csignal> signal sets a signal handler for particular signal (function) [edit] raise runs the signal handler for particular signal (function) [edit] sig_atomic_t the integer type that can be accessed as an atomic entity from an asynchronous signal handler (typedef) SIG_DFL SIG_IGN defines signal handling strategies (macro constant) [edit] SIG_ERR return value of signal specifying that an error was encountered (macro constant) [edit] Signal types SIGABRT SIGFPE SIGILL SIGINT SIGSEGV SIGTERM defines signal types (macro constant) [edit] [ edit ] Non-local jumps Defined in header <csetjmp> setjmp saves the context (function macro) [edit] longjmp jumps to specified location (function) [edit] Types jmp_buf execution context type (typedef) [edit] [ edit ] See also C documentation for Program support utilities Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/program&oldid=165990 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 16 December 2023, at 07:12. Privacy policy About cppreference.com Disclaimers