std::_Exit - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: _Exit From cppreference.com < cpp ‎ | utility ‎ | program C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Program support utilities Program termination abort exit quick_exit (C++11) _Exit (C++11) atexit at_quick_exit (C++11) EXIT_SUCCESS EXIT_FAILURE Unreachable control flow unreachable (C++23) Communicating with the environment system getenv Signals signal raise sig_atomic_t SIG_DFL SIG_IGN SIG_ERR Signal types SIGABRT SIGFPE SIGILL SIGINT SIGSEGV SIGTERM Non-local jumps setjmp longjmp Types jmp_buf [edit] Defined in header <cstdlib> [ [ noreturn ] ] void _Exit ( int exit_code ) noexcept ; (since C++11) Causes normal program termination to occur without completely cleaning the resources. Destructors of variables with automatic, thread local and static storage durations are not called. Functions passed to std::at_quick_exit() or std::atexit() are not called. Whether open resources such as files are closed is implementation defined. If exit_code is 0 or EXIT_SUCCESS , an implementation-defined status indicating successful termination is returned to the host environment. If exit_code is EXIT_FAILURE , an implementation-defined status, indicating unsuccessful termination, is returned. In other cases implementation-defined status value is returned. A freestanding implementation is required to provide std::_Exit . (since C++23) Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters exit_code - exit status of the program [ edit ] Return value (none) [ edit ] Notes Although _Exit is required to be freestanding since C++23, it is not required to be available in a freestanding C implementation. [ edit ] Example Run this code #include <iostream> class Static { public : ~Static ( ) { std:: cout << "Static dtor \n " ; } } ; class Local { public : ~Local ( ) { std:: cout << "Local dtor \n " ; } } ; Static static_variable ; // dtor of this object will *not* be called void atexit_handler ( ) { std:: cout << "atexit handler \n " ; } int main ( ) { Local local_variable ; // dtor of this object will *not* be called // handler will *not* be called const int result = std:: atexit ( atexit_handler ) ; if ( result ! = 0 ) { std:: cerr << "atexit registration failed \n " ; return EXIT_FAILURE ; } std:: cout << "test" << std:: endl ; // flush from std::endl // needs to be here, otherwise nothing will be printed std :: _Exit ( EXIT_FAILURE ) ; } Output: test [ edit ] See also abort causes abnormal program termination (without cleaning up) (function) [edit] exit causes normal program termination with cleaning up (function) [edit] C documentation for _Exit Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/program/_Exit&oldid=178765 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 24 December 2024, at 19:29. Privacy policy About cppreference.com Disclaimers