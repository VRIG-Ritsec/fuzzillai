Type support (basic types, RTTI) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions Type support (basic types, RTTI) From cppreference.com < cpp C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Type support Basic types Fixed width integer types (C++11) Fixed width floating-point types (C++23) ptrdiff_t size_t max_align_t (C++11) byte (C++17) nullptr_t (C++11) offsetof NULL Numeric limits numeric_limits C numeric limits interface Runtime type information type_info type_index (C++11) bad_typeid bad_cast [edit] See also type system overview and fundamental types defined by the language . Contents 1 Additional basic types and macros 2 Fixed width integer types (since C++11) 3 Fixed width floating-point types (since C++23) 4 Numeric limits 4.1 C numeric limits interface 5 Runtime type identification 6 Defect reports 7 See also [ edit ] Additional basic types and macros Defined in header <cstddef> size_t unsigned integer type returned by the sizeof operator (typedef) [edit] ptrdiff_t signed integer type returned when subtracting two pointers (typedef) [edit] nullptr_t (C++11) the type of the null pointer literal nullptr (typedef) [edit] NULL implementation-defined null pointer constant (macro constant) [edit] max_align_t (C++11) trivial type with alignment requirement as great as any other scalar type (typedef) [edit] offsetof byte offset from the beginning of a standard-layout type to specified member (function macro) [edit] byte (C++17) the byte type (enum) [edit] Defined in header <cstdbool> (deprecated) (until C++20) Defined in header <stdbool.h> __bool_true_false_are_defined (C++11) (deprecated) C compatibility macro constant, expands to integer literal 1 (macro constant) [edit] Defined in header <cstdalign> (deprecated) (until C++20) Defined in header <stdalign.h> __alignas_is_defined (C++11) (deprecated) C compatibility macro constant, expands to integer literal 1 (macro constant) [edit] __alignof_is_defined (C++11) (deprecated) C compatibility macro constant, expands to integer literal 1 (macro constant) [edit] [ edit ] Fixed width integer types (since C++11) [ edit ] Fixed width floating-point types (since C++23) [ edit ] Numeric limits Defined in header <limits> numeric_limits provides an interface to query properties of all fundamental numeric types (class template) [edit] [ edit ] C numeric limits interface [ edit ] Runtime type identification Defined in header <typeinfo> type_info contains some type’s information, the class returned by the typeid operator (class) [edit] bad_typeid exception that is thrown if an argument in a typeid expression is null (class) [edit] bad_cast exception that is thrown by an invalid dynamic_cast expression, i.e. a cast of reference type fails (class) [edit] Defined in header <typeindex> type_index (C++11) wrapper around a type_info object, that can be used as index in associative and unordered associative containers (class) [edit] [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 4036 C++11 __alignof_is_defined was underspecified in the C++ standard specified and deprecated [ edit ] See also Type traits and metaprogramming library C documentation for Type support library Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/types&oldid=170737 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 9 April 2024, at 08:49. Privacy policy About cppreference.com Disclaimers