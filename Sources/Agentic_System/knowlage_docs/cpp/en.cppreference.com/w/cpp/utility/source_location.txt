std::source_location - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: source_location From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::source_location Member functions Creation source_location::source_location source_location::current Field access source_location::line source_location::column source_location::file_name source_location::function_name [edit] Defined in header <source_location> struct source_location ; (since C++20) The std::source_location class represents certain information about the source code, such as file names, line numbers, and function names. Previously, functions that desire to obtain this information about the call site (for logging, testing, or debugging purposes) must use macros so that predefined macros like __LINE__ and __FILE__ are expanded in the context of the caller. The std::source_location class provides a better alternative. std::source_location meets the DefaultConstructible , CopyConstructible , CopyAssignable , Destructible and Swappable requirements. Additionally, the following conditions are true : std:: is_nothrow_move_constructible_v < std :: source_location > , std:: is_nothrow_move_assignable_v < std :: source_location > , and std:: is_nothrow_swappable_v < std :: source_location > . It is intended that std::source_location has a small size and can be copied efficiently. It is unspecified whether the copy/move constructors and the copy/move assignment operators of std::source_location are trivial and/or constexpr. Contents 1 Member functions 1.1 Creation 1.2 Field access 2 Notes 3 Example 4 See also [ edit ] Member functions Creation (constructor) constructs a new source_location with implementation-defined values (public member function) [edit] current [static] constructs a new source_location corresponding to the location of the call site (public static member function) [edit] Field access line return the line number represented by this object (public member function) [edit] column return the column number represented by this object (public member function) [edit] file_name return the file name represented by this object (public member function) [edit] function_name return the name of the function represented by this object, if any (public member function) [edit] [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_source_location 201907L (C++20) Source-code information capture ( std::source_location ) [ edit ] Example Run this code #include <iostream> #include <source_location> #include <string_view> void log ( const std:: string_view message, const std :: source_location location = std :: source_location :: current ( ) ) { std:: clog << "file: " << location. file_name ( ) << '(' << location. line ( ) << ':' << location. column ( ) << ") `" << location. function_name ( ) << "`: " << message << ' \n ' ; } template < typename T > void fun ( T x ) { log ( x ) ; // line 20 } int main ( int , char * [ ] ) { log ( "Hello world!" ) ; // line 25 fun ( "Hello C++20!" ) ; } Possible output: file: main.cpp(25:8) `int main(int, char**)`: Hello world! file: main.cpp(20:8) `void fun(T) [with T = const char*]`: Hello C++20! [ edit ] See also #line changes the source code's line number and, optionally, the current file name (preprocessing directive) [edit] stacktrace_entry (C++23) representation of an evaluation in a stacktrace (class) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/source_location&oldid=177178 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 20 October 2024, at 14:41. Privacy policy About cppreference.com Disclaimers