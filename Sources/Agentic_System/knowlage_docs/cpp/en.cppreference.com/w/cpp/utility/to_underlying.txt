std::to_underlying - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: to_underlying From cppreference.com < cpp ‎ | utility C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] Defined in header <utility> template < class Enum > constexpr std:: underlying_type_t < Enum > to_underlying ( Enum e ) noexcept ; (since C++23) Converts an enumeration to its underlying type. Equivalent to return static_cast < std:: underlying_type_t < Enum >> ( e ) ; . Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters e - enumeration value to convert [ edit ] Return value The integer value of the underlying type of Enum , converted from e . [ edit ] Notes std::to_underlying can be used to avoid converting an enumeration to an integer type other than its underlying type. Feature-test macro Value Std Feature __cpp_lib_to_underlying 202102L (C++23) std::to_underlying [ edit ] Example Run this code #include <cstdint> #include <iomanip> #include <iostream> #include <type_traits> #include <utility> enum class E1 : char { e } ; static_assert ( std:: is_same_v < char , decltype ( std :: to_underlying ( E1 :: e ) ) > ) ; enum struct E2 : long { e } ; static_assert ( std:: is_same_v < long , decltype ( std :: to_underlying ( E2 :: e ) ) > ) ; enum E3 : unsigned { e } ; static_assert ( std:: is_same_v < unsigned , decltype ( std :: to_underlying ( e ) ) > ) ; int main ( ) { enum class ColorMask : std:: uint32_t { red = 0xFF , green = ( red << 8 ) , blue = ( green << 8 ) , alpha = ( blue << 8 ) } ; std:: cout << std:: hex << std:: uppercase << std:: setfill ( '0' ) << std:: setw ( 8 ) << std :: to_underlying ( ColorMask :: red ) << ' \n ' << std:: setw ( 8 ) << std :: to_underlying ( ColorMask :: green ) << ' \n ' << std:: setw ( 8 ) << std :: to_underlying ( ColorMask :: blue ) << ' \n ' << std:: setw ( 8 ) << std :: to_underlying ( ColorMask :: alpha ) << ' \n ' ; // std::underlying_type_t<ColorMask> x = ColorMask::alpha; // Error: no known conversion [ [ maybe_unused ] ] std:: underlying_type_t < ColorMask > y = std :: to_underlying ( ColorMask :: alpha ) ; // OK } Output: 000000FF 0000FF00 00FF0000 FF000000 [ edit ] See also underlying_type (C++11) obtains the underlying integer type for a given enumeration type (class template) [edit] is_enum (C++11) checks if a type is an enumeration type (class template) [edit] is_scoped_enum (C++23) checks if a type is a scoped enumeration type (class template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/to_underlying&oldid=158870 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español 日本語 Русский 中文 This page was last modified on 12 September 2023, at 07:23. Privacy policy About cppreference.com Disclaimers