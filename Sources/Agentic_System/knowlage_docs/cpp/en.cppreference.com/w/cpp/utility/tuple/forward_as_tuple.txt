std::forward_as_tuple - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: forward_as_tuple From cppreference.com < cpp ‎ | utility ‎ | tuple C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::tuple Member functions tuple::tuple tuple::operator= tuple::swap Non-member functions make_tuple tie forward_as_tuple tuple_cat operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::tuple) get (std::tuple) Helper concepts tuple-like (C++23) Helper classes tuple_size <std::tuple> tuple_element <std::tuple> uses_allocator <std::tuple> basic_common_reference <std::tuple> (C++23) common_type <std::tuple> (C++23) formatter <std::tuple> (C++23) ignore Deduction guides (C++17) [edit] Defined in header <tuple> template < class ... Types > std:: tuple < Types && ... > forward_as_tuple ( Types && ... args ) noexcept ; (since C++11) (constexpr since C++14) Constructs a tuple of references to the arguments in args suitable for forwarding as an argument to a function. The tuple has rvalue reference data members when rvalues are used as arguments, and otherwise has lvalue reference data members. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 See also [ edit ] Parameters args - zero or more arguments to construct the tuple from [ edit ] Return value A std::tuple object created as if by std:: tuple < Types && ... > ( std:: forward < Types > ( args ) ... ) [ edit ] Notes If the arguments are temporaries, forward_as_tuple does not extend their lifetime; they have to be used before the end of the full expression. [ edit ] Example Run this code #include <iostream> #include <map> #include <string> #include <tuple> int main ( ) { std:: map < int , std:: string > m ; m. emplace ( std:: piecewise_construct , std :: forward_as_tuple ( 6 ) , std :: forward_as_tuple ( 9 , 'g' ) ) ; std:: cout << "m[6] = " << m [ 6 ] << ' \n ' ; // The following is an error: it produces a // std::tuple<int&&, char&&> holding two dangling references. // // auto t = std::forward_as_tuple(20, 'a'); // m.emplace(std::piecewise_construct, std::forward_as_tuple(10), t); } Output: m[6] = ggggggggg [ edit ] See also make_tuple (C++11) creates a tuple object of the type defined by the argument types (function template) [edit] tie (C++11) creates a tuple of lvalue references or unpacks a tuple into individual objects (function template) [edit] tuple_cat (C++11) creates a tuple by concatenating any number of tuples (function template) [edit] apply (C++17) calls a function with a tuple of arguments (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/forward_as_tuple&oldid=177795 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 21 November 2024, at 13:34. Privacy policy About cppreference.com Disclaimers