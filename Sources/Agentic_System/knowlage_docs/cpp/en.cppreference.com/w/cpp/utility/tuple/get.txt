std::get(std::tuple) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: get (std::tuple) From cppreference.com < cpp ‎ | utility ‎ | tuple C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::tuple Member functions tuple::tuple tuple::operator= tuple::swap Non-member functions make_tuple tie forward_as_tuple tuple_cat operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::tuple) get (std::tuple) Helper concepts tuple-like (C++23) Helper classes tuple_size <std::tuple> tuple_element <std::tuple> uses_allocator <std::tuple> basic_common_reference <std::tuple> (C++23) common_type <std::tuple> (C++23) formatter <std::tuple> (C++23) ignore Deduction guides (C++17) [edit] Defined in header <tuple> template < std:: size_t I, class ... Types > typename std:: tuple_element < I, std:: tuple < Types... >> :: type & get ( std:: tuple < Types... > & t ) noexcept ; (1) (since C++11) (constexpr since C++14) template < std:: size_t I, class ... Types > typename std:: tuple_element < I, std:: tuple < Types... >> :: type && get ( std:: tuple < Types... > && t ) noexcept ; (2) (since C++11) (constexpr since C++14) template < std:: size_t I, class ... Types > const typename std:: tuple_element < I, std:: tuple < Types... >> :: type & get ( const std:: tuple < Types... > & t ) noexcept ; (3) (since C++11) (constexpr since C++14) template < std:: size_t I, class ... Types > const typename std:: tuple_element < I, std:: tuple < Types... >> :: type && get ( const std:: tuple < Types... > && t ) noexcept ; (4) (since C++11) (constexpr since C++14) template < class T, class ... Types > constexpr T & get ( std:: tuple < Types... > & t ) noexcept ; (5) (since C++14) template < class T, class ... Types > constexpr T && get ( std:: tuple < Types... > && t ) noexcept ; (6) (since C++14) template < class T, class ... Types > constexpr const T & get ( const std:: tuple < Types... > & t ) noexcept ; (7) (since C++14) template < class T, class ... Types > constexpr const T && get ( const std:: tuple < Types... > && t ) noexcept ; (8) (since C++14) 1-4) Extracts the I th element from the tuple. I must be an integer value in [ ​ 0 ​ , sizeof... ( Types ) ) . 5-8) Extracts the element of the tuple t whose type is T . Fails to compile unless the tuple has exactly one element of that type. Contents 1 Parameters 2 Return value 3 Notes 4 Example 5 Defect reports 6 See also [ edit ] Parameters t - tuple whose contents to extract [ edit ] Return value A reference to the selected element of t . [ edit ] Notes Feature-test macro Value Std Feature __cpp_lib_tuples_by_type 201304L (C++14) Addressing tuples by type ( 5-8 ) [ edit ] Example Run this code #include <cassert> #include <iostream> #include <string> #include <tuple> int main ( ) { auto x = std:: make_tuple ( 1 , "Foo" , 3.14 ) ; // Index-based access std:: cout << "( " << std :: get < 0 > ( x ) << ", " << std :: get < 1 > ( x ) << ", " << std :: get < 2 > ( x ) << " ) \n " ; // Type-based access (since C++14) std:: cout << "( " << std :: get < int > ( x ) << ", " << std :: get < const char * > ( x ) << ", " << std :: get < double > ( x ) << " ) \n " ; const std:: tuple < int , const int , double , double > y ( 1 , 2 , 6.9 , 9.6 ) ; const int & i1 = std :: get < int > ( y ) ; // OK: not ambiguous assert ( i1 == 1 ) ; const int & i2 = std :: get < const int > ( y ) ; // OK: not ambiguous assert ( i2 == 2 ) ; // const double& d = std::get<double>(y); // Error: ill-formed (ambiguous) // Note: std::tie and structured binding can be // used to unpack a tuple into individual objects. } Output: ( 1, Foo, 3.14 ) ( 1, Foo, 3.14 ) [ edit ] Defect reports The following behavior-changing defect reports were applied retroactively to previously published C++ standards. DR Applied to Behavior as published Correct behavior LWG 2485 C++11 (by index) C++14 (by type) there are no overloads for const tuple && added these overloads ( ( 4 ) and ( 8 ) ) [ edit ] See also get (std::array) (C++11) accesses an element of an array (function template) [edit] get (std::pair) (C++11) accesses an element of a pair (function template) [edit] get (std::variant) (C++17) reads the value of the variant given the index or the type (if the type is unique), throws on error (function template) [edit] get (std::ranges::subrange) (C++20) obtains iterator or sentinel from a std::ranges::subrange (function template) [edit] get (std::complex) (C++26) obtains a reference to real or imaginary part from a std::complex (function template) [edit] tie (C++11) creates a tuple of lvalue references or unpacks a tuple into individual objects (function template) [edit] Structured binding (C++17) binds the specified names to sub-objects or tuple elements of the initializer [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/get&oldid=178494 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 19 December 2024, at 08:25. Privacy policy About cppreference.com Disclaimers