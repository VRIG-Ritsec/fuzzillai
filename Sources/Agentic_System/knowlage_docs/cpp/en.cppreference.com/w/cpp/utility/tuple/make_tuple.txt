std::make_tuple - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: make_tuple From cppreference.com < cpp ‎ | utility ‎ | tuple C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::tuple Member functions tuple::tuple tuple::operator= tuple::swap Non-member functions make_tuple tie forward_as_tuple tuple_cat operator== operator!= operator< operator<= operator> operator>= operator<=> (until C++20) (until C++20) (until C++20) (until C++20) (until C++20) (C++20) swap (std::tuple) get (std::tuple) Helper concepts tuple-like (C++23) Helper classes tuple_size <std::tuple> tuple_element <std::tuple> uses_allocator <std::tuple> basic_common_reference <std::tuple> (C++23) common_type <std::tuple> (C++23) formatter <std::tuple> (C++23) ignore Deduction guides (C++17) [edit] Defined in header <tuple> template < class ... Types > std:: tuple < VTypes... > make_tuple ( Types && ... args ) ; (since C++11) (constexpr since C++14) Creates a tuple object, deducing the target type from the types of arguments. For each Ti in Types... , the corresponding type Vi in VTypes... is std:: decay < Ti > :: type unless application of std::decay results in std:: reference_wrapper < X > for some type X , in which case the deduced type is X& . Contents 1 Parameters 2 Return value 3 Possible implementation 4 Example 5 See also [ edit ] Parameters args - zero or more arguments to construct the tuple from [ edit ] Return value A std::tuple object containing the given values, created as if by std:: tuple < VTypes... > ( std:: forward < Types > ( t ) ... ) . [ edit ] Possible implementation template < class T > struct unwrap_refwrapper { using type = T ; } ; template < class T > struct unwrap_refwrapper < std:: reference_wrapper < T >> { using type = T & ; } ; template < class T > using unwrap_decay_t = typename unwrap_refwrapper < typename std:: decay < T > :: type > :: type ; // or use std::unwrap_ref_decay_t (since C++20) template < class ... Types > constexpr // since C++14 std:: tuple < unwrap_decay_t < Types > ... > make_tuple ( Types && ... args ) { return std:: tuple < unwrap_decay_t < Types > ... > ( std:: forward < Types > ( args ) ... ) ; } [ edit ] Example Run this code #include <iostream> #include <tuple> #include <functional> std:: tuple < int , int > f ( ) // this function returns multiple values { int x = 5 ; return std :: make_tuple ( x, 7 ) ; // return {x,7}; in C++17 } int main ( ) { // heterogeneous tuple construction int n = 1 ; auto t = std :: make_tuple ( 10 , "Test" , 3.14 , std:: ref ( n ) , n ) ; n = 7 ; std:: cout << "The value of t is (" << std :: get < 0 > ( t ) << ", " << std :: get < 1 > ( t ) << ", " << std :: get < 2 > ( t ) << ", " << std :: get < 3 > ( t ) << ", " << std :: get < 4 > ( t ) << ") \n " ; // function returning multiple values int a, b ; std:: tie ( a, b ) = f ( ) ; std:: cout << a << ' ' << b << ' \n ' ; } Output: The value of t is (10, Test, 3.14, 7, 1) 5 7 [ edit ] See also tie (C++11) creates a tuple of lvalue references or unpacks a tuple into individual objects (function template) [edit] forward_as_tuple (C++11) creates a tuple of forwarding references (function template) [edit] tuple_cat (C++11) creates a tuple by concatenating any number of tuples (function template) [edit] apply (C++17) calls a function with a tuple of arguments (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/make_tuple&oldid=147386 " Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Deutsch Español Français Italiano 日本語 Português Русский 中文 This page was last modified on 2 February 2023, at 09:46. Privacy policy About cppreference.com Disclaimers