std::get_if (std::variant) - cppreference.com cppreference.com Create account Log in Namespaces Page Discussion Variants Views View Edit History Actions std:: get_if (std::variant) From cppreference.com < cpp ‎ | utility ‎ | variant C++ Compiler support Freestanding and hosted Language Standard library Standard library headers Named requirements Feature test macros (C++20) Language support library Concepts library (C++20) Diagnostics library Memory management library Metaprogramming library (C++11) General utilities library Containers library Iterators library Ranges library (C++20) Algorithms library Strings library Text processing library Numerics library Date and time library Input/output library Filesystem library (C++17) Concurrency support library (C++11) Execution control library (C++26) Technical specifications Symbols index External libraries [edit] Utilities library Language support Type support (basic types, RTTI) Library feature-test macros (C++20) Program utilities Variadic functions initializer_list (C++11) is_constant_evaluated (C++20) is_within_lifetime (C++26) source_location (C++20) Coroutine support (C++20) Contract support (C++26) Three-way comparison three_way_comparable three_way_comparable_with (C++20) (C++20) strong_ordering (C++20) weak_ordering (C++20) partial_ordering (C++20) common_comparison_category (C++20) compare_three_way_result (C++20) compare_three_way (C++20) strong_order (C++20) weak_order (C++20) partial_order (C++20) compare_strong_order_fallback (C++20) compare_weak_order_fallback (C++20) compare_partial_order_fallback (C++20) is_eq is_lt is_lteq (C++20) (C++20) (C++20) is_neq is_gt is_gteq (C++20) (C++20) (C++20) General utilities Function objects Bit manipulation (C++20) C-style bit manipulation (C++26) bitset hash (C++11) Relational operators (deprecated in C++20) rel_ops::operator!= rel_ops::operator> rel_ops::operator<= rel_ops::operator>= Integer comparison functions cmp_equal cmp_less cmp_less_than (C++20) (C++20) (C++20) cmp_not_equal cmp_greater cmp_greater_than (C++20) (C++20) (C++20) in_range (C++20) Swap and type operations swap ranges::swap (C++20) exchange (C++14) declval (C++11) to_underlying (C++23) forward (C++11) forward_like (C++23) move (C++11) move_if_noexcept (C++11) as_const (C++17) Common vocabulary types pair tuple (C++11) optional (C++17) any (C++17) variant (C++17) tuple_size (C++11) tuple_element (C++11) apply (C++17) make_from_tuple (C++17) expected (C++23) [edit] std::variant Member functions variant::variant variant::~variant variant::operator= Observers variant::index variant::valueless_by_exception Modifiers variant::emplace variant::swap Visitation variant::visit (C++26) Non-member functions visit (std::variant) holds_alternative get (std::variant) get_if operator== operator!= operator< operator<= operator> operator>= operator<=> (C++20) swap (std::variant) Helper classes monostate bad_variant_access variant_size variant_alternative hash <std::variant> Helper objects variant_npos [edit] Defined in header <variant> (1) (since C++17) template < std:: size_t I, class ... Types > constexpr std:: add_pointer_t < std:: variant_alternative_t < I, std:: variant < Types... >>> get_if ( std:: variant < Types... > * pv ) noexcept ; template < std:: size_t I, class ... Types > constexpr std:: add_pointer_t < const std:: variant_alternative_t < I, std:: variant < Types... >>> get_if ( const std:: variant < Types... > * pv ) noexcept ; (2) (since C++17) template < class T, class ... Types > constexpr std:: add_pointer_t < T > get_if ( std:: variant < Types... > * pv ) noexcept ; template < class T, class ... Types > constexpr std:: add_pointer_t < const T > get_if ( const std:: variant < Types... > * pv ) noexcept ; 1) Index-based non-throwing accessor: If pv is not a null pointer and pv - > index ( ) == I , returns a pointer to the value stored in the variant pointed to by pv . Otherwise, returns a null pointer value. The call is ill-formed if I is not a valid index in the variant. 2) Type-based non-throwing accessor: Equivalent to (1) with I being the zero-based index of T in Types... . The call is ill-formed if T is not a unique element of Types... . Contents 1 Template parameters 2 Parameters 3 Return value 4 Example 5 See also [ edit ] Template parameters I - index to look up Type - unique type to look up [ edit ] Parameters pv - pointer to a variant [ edit ] Return value Pointer to the value stored in the pointed-to variant or null pointer on error. [ edit ] Example Run this code #include <iostream> #include <variant> int main ( ) { auto check_value = [ ] ( const std:: variant < int , float > & v ) { if ( const int * pval = std :: get_if < int > ( & v ) ) std:: cout << "variant value: " << * pval << ' \n ' ; else std:: cout << "failed to get value!" << ' \n ' ; } ; std:: variant < int , float > v { 12 } , w { 3 . f } ; check_value ( v ) ; check_value ( w ) ; } Output: variant value: 12 failed to get value! [ edit ] See also get (std::variant) (C++17) reads the value of the variant given the index or the type (if the type is unique), throws on error (function template) [edit] Retrieved from " https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/get_if&oldid=172847 " Category : Uses of dcl rev begin with nonempty note Navigation Support us Recent changes FAQ Offline version Toolbox What links here Related changes Upload file Special pages Printable version Permanent link Page information In other languages Español 日本語 Русский 中文 This page was last modified on 25 June 2024, at 16:39. Privacy policy About cppreference.com Disclaimers