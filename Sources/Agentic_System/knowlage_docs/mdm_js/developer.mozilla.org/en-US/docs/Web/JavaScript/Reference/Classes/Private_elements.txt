Private elements - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Classes Private elements Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Русский 中文 (简体) Private elements Private elements are counterparts of the regular class elements which are public, including class fields , class methods, etc. Private elements get created by using a hash # prefix and cannot be legally referenced outside of the class. The privacy encapsulation of these class elements is enforced by JavaScript itself. The only way to access a private element is via dot notation , and you can only do so within the class that defines the private element. Private elements were not native to the language before this syntax existed. In prototypal inheritance, its behavior may be emulated with WeakMap objects or closures , but they can't compare to the # syntax in terms of ergonomics. Note: On MDN, we avoid using the term "private property". A property in JavaScript has a string or symbol key, and has attributes like writable , enumerable , and configurable , but private elements have none. While private elements are accessed with the familiar dot notation, they cannot be proxied , enumerated, deleted, or interacted with using any Object method. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js class ClassWithPrivate { #privateField; #privateFieldWithInitializer = 42; #privateMethod() { // … } static #privateStaticField; static #privateStaticFieldWithInitializer = 42; static #privateStaticMethod() { // … } } There are some additional syntax restrictions: All private identifiers declared within a class must be unique. The namespace is shared between static and instance elements. The only exception is when the two declarations define a getter-setter pair. The private identifier cannot be #constructor . Description Most class elements have their private counterparts: Private fields Private methods Private static fields Private static methods Private getters Private setters Private static getters Private static setters These features are collectively called private elements . However, constructors cannot be private in JavaScript. To prevent classes from being constructed outside of the class, you have to use a private flag . Private elements are declared with # names (pronounced "hash names"), which are identifiers prefixed with # . The hash prefix is an inherent part of the property name — you can draw relationship with the old underscore prefix convention _privateField — but it's not an ordinary string property, so you can't dynamically access it with the bracket notation . It is a syntax error to refer to # names from outside of the class. It is also a syntax error to refer to private elements that were not declared in the class body, or to attempt to remove declared elements with delete . js class ClassWithPrivateField { #privateField; constructor() { delete this.#privateField; // Syntax error this.#undeclaredField = 42; // Syntax error } } const instance = new ClassWithPrivateField(); instance.#privateField; // Syntax error JavaScript, being a dynamic language, is able to perform this compile-time check because of the special hash identifier syntax, making it different from normal properties on the syntax level. Note: Code run in the Chrome console can access private elements outside the class. This is a DevTools-only relaxation of the JavaScript syntax restriction. If you access a private element from an object that doesn't have the element, a TypeError is thrown, instead of returning undefined as normal properties do. js class C { #x; static getX(obj) { return obj.#x; } } console.log(C.getX(new C())); // undefined console.log(C.getX({})); // TypeError: Cannot read private member #x from an object whose class did not declare it This example also illustrates that you can access private elements within static functions too, and on externally defined instances of the class. You can use the in operator to check whether an externally defined object possesses a private element. This will return true if the private field or method exists, and false otherwise. js class C { #x; constructor(x) { this.#x = x; } static getX(obj) { if (#x in obj) return obj.#x; return "obj must be an instance of C"; } } console.log(C.getX(new C("foo"))); // "foo" console.log(C.getX(new C(0.196))); // 0.196 console.log(C.getX(new C(new Date()))); // the current date and time console.log(C.getX({})); // "obj must be an instance of C" Note a corollary of private names being always pre-declared and non-deletable: if you found that an object possesses one private element of the current class (either from a try...catch or an in check), it must possess all other private elements. An object possessing the private elements of a class generally means it was constructed by that class (although not always ). Private elements are not part of the prototypical inheritance model since they can only be accessed within the current class's body and aren't inherited by subclasses. Private elements with the same name within different classes are entirely different and do not interoperate with each other. See them as external metadata attached to each instance, managed by the class. For this reason, structuredClone() does not clone private elements, and Object.freeze() and Object.seal() have no effect on private elements. For more information on how and when private fields are initialized, see public class fields . Examples Private fields Private fields include private instance fields and private static fields. Private fields are only accessible from inside the class declaration. Private instance fields Like their public counterparts, private instance fields: are added before the constructor runs in a base class, or immediately after super() is invoked in a subclass, and are only available on instances of the class. js class ClassWithPrivateField { #privateField; constructor() { this.#privateField = 42; } } class Subclass extends ClassWithPrivateField { #subPrivateField; constructor() { super(); this.#subPrivateField = 23; } } new Subclass(); // In some dev tools, it shows Subclass {#privateField: 42, #subPrivateField: 23} Note: #privateField from the ClassWithPrivateField base class is private to ClassWithPrivateField and is not accessible from the derived Subclass . Returning overriding object A class's constructor can return a different object, which will be used as the new this for the derived class constructor. The derived class may then define private fields on that returned object — meaning it is possible to "stamp" private fields onto unrelated objects. js class Stamper extends class { // A base class whose constructor returns the object it's given constructor(obj) { return obj; } } { // This declaration will "stamp" the private field onto the object // returned by the base class constructor #stamp = 42; static getStamp(obj) { return obj.#stamp; } } const obj = {}; new Stamper(obj); // `Stamper` calls `Base`, which returns `obj`, so `obj` is // now the `this` value. `Stamper` then defines `#stamp` on `obj` console.log(obj); // In some dev tools, it shows {#stamp: 42} console.log(Stamper.getStamp(obj)); // 42 console.log(obj instanceof Stamper); // false // You cannot stamp private elements twice new Stamper(obj); // Error: Initializing an object twice is an error with private fields Warning: This is a potentially very confusing thing to do. You are generally advised to avoid returning anything from the constructor — especially something unrelated to this . Private static fields Like their public counterparts, private static fields: are added to the class constructor at class evaluation time, and are only available on the class itself. js class ClassWithPrivateStaticField { static #privateStaticField = 42; static publicStaticMethod() { return ClassWithPrivateStaticField.#privateStaticField; } } console.log(ClassWithPrivateStaticField.publicStaticMethod()); // 42 There is a restriction on private static fields: only the class which defines the private static field can access the field. This can lead to unexpected behavior when using this . In the following example, this refers to the Subclass class (not the ClassWithPrivateStaticField class) when we try to call Subclass.publicStaticMethod() , and so causes a TypeError . js class ClassWithPrivateStaticField { static #privateStaticField = 42; static publicStaticMethod() { return this.#privateStaticField; } } class Subclass extends ClassWithPrivateStaticField {} Subclass.publicStaticMethod(); // TypeError: Cannot read private member #privateStaticField from an object whose class did not declare it This is the same if you call the method with super , because super methods are not called with the super class as this . js class ClassWithPrivateStaticField { static #privateStaticField = 42; static publicStaticMethod() { // When invoked through super, `this` still refers to Subclass return this.#privateStaticField; } } class Subclass extends ClassWithPrivateStaticField { static callSuperMethod() { return super.publicStaticMethod(); } } Subclass.callSuperMethod(); // TypeError: Cannot read private member #privateStaticField from an object whose class did not declare it You are advised to always access private static fields through the class name, not through this , so inheritance doesn't break the method. Private methods Private methods include private instance methods and private static methods. Private methods are only accessible from inside the class declaration. Private instance methods Unlike their public counterparts, private instance methods: are installed immediately before the instance fields are installed, and are only available on instances of the class, not on its .prototype property. js class ClassWithPrivateMethod { #privateMethod() { return 42; } publicMethod() { return this.#privateMethod(); } } const instance = new ClassWithPrivateMethod(); console.log(instance.publicMethod()); // 42 Private instance methods may be generator, async, or async generator functions. Private getters and setters are also possible, and follow the same syntax requirements as their public getter and setter counterparts. js class ClassWithPrivateAccessor { #message; get #decoratedMessage() { return `🎬${this.#message}🛑`; } set #decoratedMessage(msg) { this.#message = msg; } constructor() { this.#decoratedMessage = "hello world"; console.log(this.#decoratedMessage); } } new ClassWithPrivateAccessor(); // 🎬hello world🛑 Unlike public methods, private methods are not accessible on the .prototype property of their class. js class C { #method() {} static getMethod(x) { return x.#method; } } console.log(C.getMethod(new C())); // [Function: #method] console.log(C.getMethod(C.prototype)); // TypeError: Receiver must be an instance of class C Private static methods Like their public counterparts, private static methods: are added to the class constructor at class evaluation time, and are only available on the class itself. js class ClassWithPrivateStaticMethod { static #privateStaticMethod() { return 42; } static publicStaticMethod() { return ClassWithPrivateStaticMethod.#privateStaticMethod(); } } console.log(ClassWithPrivateStaticMethod.publicStaticMethod()); // 42 Private static methods may be generator, async, and async generator functions. The same restriction previously mentioned for private static fields holds for private static methods, and similarly can lead to unexpected behavior when using this . In the following example, when we try to call Subclass.publicStaticMethod() , this refers to the Subclass class (not the ClassWithPrivateStaticMethod class) and so causes a TypeError . js class ClassWithPrivateStaticMethod { static #privateStaticMethod() { return 42; } static publicStaticMethod() { return this.#privateStaticMethod(); } } class Subclass extends ClassWithPrivateStaticMethod {} console.log(Subclass.publicStaticMethod()); // TypeError: Cannot read private member #privateStaticMethod from an object whose class did not declare it Simulating private constructors Many other languages include the capability to mark a constructor as private, which prevents the class from being instantiated outside of the class itself — you can only use static factory methods that create instances, or not be able to create instances at all. JavaScript does not have a native way to do this, but it can be accomplished by using a private static flag. js class PrivateConstructor { static #isInternalConstructing = false; constructor() { if (!PrivateConstructor.#isInternalConstructing) { throw new TypeError("PrivateConstructor is not constructable"); } PrivateConstructor.#isInternalConstructing = false; // More initialization logic } static create() { PrivateConstructor.#isInternalConstructing = true; const instance = new PrivateConstructor(); return instance; } } new PrivateConstructor(); // TypeError: PrivateConstructor is not constructable PrivateConstructor.create(); // PrivateConstructor {} Specifications Specification ECMAScript® 2026 Language Specification # prod-PrivateIdentifier ECMAScript® 2026 Language Specification # prod-00OK517S Browser compatibility javascript.classes.private_class_fields Loading… javascript.classes.private_class_fields_in Loading… javascript.classes.private_class_methods Loading… See also Using classes guide Classes Public class fields class Private Syntax FAQ in the TC39 class-fields proposal The semantics of all JS class elements by Shu-yu Guo (2018) Public and private class fields on v8.dev (2018) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 8, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar JavaScript Tutorials and guides JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and strings Representing dates & times Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Resource management Internationalization JavaScript modules Intermediate Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures Advanced Inheritance and the prototype chain Meta programming Memory Management References Built-in objects AggregateError Array ArrayBuffer AsyncDisposableStack AsyncFunction AsyncGenerator AsyncGeneratorFunction AsyncIterator Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() DisposableStack encodeURI() encodeURIComponent() Error escape() Deprecated eval() EvalError FinalizationRegistry Float16Array Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int8Array Int16Array Int32Array InternalError Non-standard Intl isFinite() isNaN() Iterator JSON Map Math NaN Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String SuppressedError Symbol SyntaxError Temporal Experimental TypedArray TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array undefined unescape() Deprecated URIError WeakMap WeakRef WeakSet Expressions & operators Addition (+) Addition assignment (+=) Assignment (=) async function expression async function* expression await Bitwise AND (&) Bitwise AND assignment (&=) Bitwise NOT (~) Bitwise OR (|) Bitwise OR assignment (|=) Bitwise XOR (^) Bitwise XOR assignment (^=) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete Destructuring Division (/) Division assignment (/=) Equality (==) Exponentiation (**) Exponentiation assignment (**=) function expression function* expression Greater than (>) Greater than or equal (>=) Grouping operator ( ) import.meta import.meta.resolve() import() in Increment (++) Inequality (!=) instanceof Left shift (<<) Left shift assignment (<<=) Less than (<) Less than or equal (<=) Logical AND (&&) Logical AND assignment (&&=) Logical NOT (!) Logical OR (||) Logical OR assignment (||=) Multiplication (*) Multiplication assignment (*=) new new.target null Nullish coalescing assignment (??=) Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder (%) Remainder assignment (%=) Right shift (>>) Right shift assignment (>>=) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction (-) Subtraction assignment (-=) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift (>>>) Unsigned right shift assignment (>>>=) void operator yield yield* Statements & declarations async function async function* await using Block statement break class const continue debugger do...while Empty statement export Expression statement for for await...of for...in for...of function function* if...else import Import attributes Labeled statement let return switch throw try...catch using var while with Deprecated Functions Arrow function expressions Default parameters get Method definitions Rest parameters set The arguments object [Symbol.iterator]() callee Deprecated length Classes constructor extends Private elements Public class fields static Static initialization blocks Regular expressions Backreference: \1, \2 Capturing group: (...) Character class escape: \d, \D, \w, \W, \s, \S Character class: [...], [^...] Character escape: \n, \u{...} Disjunction: | Input boundary assertion: ^, $ Literal character: a, b Lookahead assertion: (?=...), (?!...) Lookbehind assertion: (?<=...), (?<!...) Modifier: (?ims-ims:...) Named backreference: \k<name> Named capturing group: (?<name>...) Non-capturing group: (?:...) Quantifier: *, +, ?, {n}, {n,}, {n,m} Unicode character class escape: \p{...}, \P{...} Wildcard: . Word boundary assertion: \b, \B Errors AggregateError: No Promise in Promise.any was resolved Error: Permission denied to access property "x" InternalError: too much recursion RangeError: argument is not a valid code point RangeError: BigInt division by zero RangeError: BigInt negative exponent RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' RangeError: invalid array length RangeError: invalid date RangeError: precision is out of range RangeError: radix must be an integer RangeError: repeat count must be less than infinity RangeError: repeat count must be non-negative RangeError: x can't be converted to BigInt because it isn't an integer ReferenceError: "x" is not defined ReferenceError: assignment to undeclared variable "x" ReferenceError: can't access lexical declaration 'X' before initialization ReferenceError: must call super constructor before using 'this' in derived class constructor ReferenceError: super() called twice in derived class constructor SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code SyntaxError: "0"-prefixed octal literals are deprecated SyntaxError: "use strict" not allowed in function with non-simple parameters SyntaxError: "x" is a reserved identifier SyntaxError: \ at end of pattern SyntaxError: a declaration in the head of a for-of loop can't have an initializer SyntaxError: applying the 'delete' operator to an unqualified name is deprecated SyntaxError: arguments is not valid in fields SyntaxError: await is only valid in async functions, async generators and modules SyntaxError: await/yield expression can't be used in parameter SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions SyntaxError: character class escape cannot be used in class range in regular expression SyntaxError: continue must be inside loop SyntaxError: duplicate capture group name in regular expression SyntaxError: duplicate formal argument x SyntaxError: for-in loop head declarations may not have initializers SyntaxError: function statement requires a name SyntaxError: functions cannot be labelled SyntaxError: getter and setter for private name #x should either be both static or non-static SyntaxError: getter functions must have no arguments SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character SyntaxError: import declarations may only appear at top level of a module SyntaxError: incomplete quantifier in regular expression SyntaxError: invalid assignment left-hand side SyntaxError: invalid BigInt syntax SyntaxError: invalid capture group name in regular expression SyntaxError: invalid character in class in regular expression SyntaxError: invalid class set operation in regular expression SyntaxError: invalid decimal escape in regular expression SyntaxError: invalid identity escape in regular expression SyntaxError: invalid named capture reference in regular expression SyntaxError: invalid property name in regular expression SyntaxError: invalid range in character class SyntaxError: invalid regexp group SyntaxError: invalid regular expression flag "x" SyntaxError: invalid unicode escape in regular expression SyntaxError: JSON.parse: bad parsing SyntaxError: label not found SyntaxError: missing : after property id SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ] after element list SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing = in const declaration SyntaxError: missing formal parameter SyntaxError: missing name after . operator SyntaxError: missing variable name SyntaxError: negated character class with strings in regular expression SyntaxError: new keyword cannot be used with an optional chain SyntaxError: nothing to repeat SyntaxError: numbers out of order in {} quantifier. SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code SyntaxError: parameter after rest parameter SyntaxError: private fields can't be deleted SyntaxError: property name __proto__ appears more than once in object literal SyntaxError: raw bracket is not allowed in regular expression with unicode flag SyntaxError: redeclaration of formal parameter "x" SyntaxError: reference to undeclared private field or method #x SyntaxError: rest parameter may not have a default SyntaxError: return not in function SyntaxError: setter functions must have one argument SyntaxError: string literal contains an unescaped line break SyntaxError: super() is only valid in derived class constructors SyntaxError: tagged template cannot be used with optional chain SyntaxError: Unexpected '#' used outside of class body SyntaxError: Unexpected token SyntaxError: unlabeled break must be inside loop or switch SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' SyntaxError: use of super property/member accesses only valid within methods or eval code within methods SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed TypeError: 'x' is not iterable TypeError: "x" is (not) "y" TypeError: "x" is not a constructor TypeError: "x" is not a function TypeError: "x" is not a non-null object TypeError: "x" is read-only TypeError: already executing generator TypeError: BigInt value can't be serialized in JSON TypeError: calling a builtin X constructor without new is forbidden TypeError: can't access/set private field or method: object is not the right class TypeError: can't assign to property "x" on "y": not an object TypeError: can't convert BigInt to number TypeError: can't convert x to BigInt TypeError: can't define property "x": "obj" is not extensible TypeError: can't delete non-configurable array element TypeError: can't redefine non-configurable property "x" TypeError: can't set prototype of this object TypeError: can't set prototype: it would cause a prototype chain cycle TypeError: cannot use 'in' operator to search for 'x' in 'y' TypeError: class constructors must be invoked with 'new' TypeError: cyclic object value TypeError: derived class constructor returned invalid value x TypeError: getting private setter-only property TypeError: Initializing an object twice is an error with private fields/methods TypeError: invalid 'instanceof' operand 'x' TypeError: invalid Array.prototype.sort argument TypeError: invalid assignment to const "x" TypeError: Iterator/AsyncIterator constructor can't be used directly TypeError: matchAll/replaceAll must be called with a global RegExp TypeError: More arguments needed TypeError: null/undefined has no properties TypeError: property "x" is non-configurable and can't be deleted TypeError: Reduce of empty array with no initial value TypeError: setting getter-only property "x" TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol TypeError: X.prototype.y called on incompatible type URIError: malformed URI sequence Warning: -file- is being assigned a //# sourceMappingURL, but already has one Warning: unreachable code after return statement Misc JavaScript technologies overview Execution model Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .