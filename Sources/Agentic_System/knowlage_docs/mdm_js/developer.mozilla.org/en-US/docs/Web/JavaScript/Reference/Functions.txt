Functions - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Functions Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Functions Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback Generally speaking, a function is a "subprogram" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body . Values can be passed to a function as parameters, and the function will return a value. In JavaScript, functions are first-class objects , because they can be passed to other functions, returned from functions, and assigned to variables and properties. They can also have properties and methods just like any other object. What distinguishes them from other objects is that functions can be called. For more examples and explanations, see the JavaScript guide about functions . In this article Description Examples Specifications Browser compatibility See also Description Function values are typically instances of Function . See Function for information on properties and methods of Function objects. Callable values cause typeof to return "function" instead of "object" . Note: Not all callable values are instanceof Function . For example, the Function.prototype object is callable but not an instance of Function . You can also manually set the prototype chain of your function so it no longer inherits from Function.prototype . However, such cases are extremely rare. Return value By default, if a function's execution doesn't end at a return statement, or if the return keyword doesn't have an expression after it, then the return value is undefined . The return statement allows you to return an arbitrary value from the function. One function call can only return one value, but you can simulate the effect of returning multiple values by returning an object or array and destructuring the result. Note: Constructors called with new have a different set of logic to determine their return values. Passing arguments Parameters and arguments have slightly different meanings, but in MDN web docs, we often use them interchangeably. For a quick reference: js function formatNumber(num) { return num.toFixed(2); } formatNumber(2); In this example, the num variable is called the function's parameter : it's declared in the parenthesis-enclosed list of the function's definition. The function expects the num parameter to be a number — although this is not enforceable in JavaScript without writing runtime validation code. In the formatNumber(2) call, the number 2 is the function's argument : it's the value that is actually passed to the function in the function call. The argument value can be accessed inside the function body through the corresponding parameter name or the arguments object. Arguments are always passed by value and never passed by reference . This means that if a function reassigns a parameter, the value won't change outside the function. More precisely, object arguments are passed by sharing , which means if the object's properties are mutated, the change will impact the outside of the function. For example: js function updateBrand(obj) { // Mutating the object is visible outside the function obj.brand = "Toyota"; // Try to reassign the parameter, but this won't affect // the variable's value outside the function obj = null; } const car = { brand: "Honda", model: "Accord", year: 1998, }; console.log(car.brand); // Honda // Pass object reference to the function updateBrand(car); // updateBrand mutates car console.log(car.brand); // Toyota The this keyword refers to the object that the function is accessed on — it does not refer to the currently executing function, so you must refer to the function value by name, even within the function body. Defining functions Broadly speaking, JavaScript has four kinds of functions: Regular function: can return anything; always runs to completion after invocation Generator function: returns a Generator object; can be paused and resumed with the yield operator Async function: returns a Promise ; can be paused and resumed with the await operator Async generator function: returns an AsyncGenerator object; both the await and yield operators can be used For every kind of function, there are multiple ways to define it: Declaration function , function* , async function , async function* Expression function , function* , async function , async function* Constructor Function() , GeneratorFunction() , AsyncFunction() , AsyncGeneratorFunction() In addition, there are special syntaxes for defining arrow functions and methods , which provide more precise semantics for their usage. Classes are conceptually not functions (because they throw an error when called without new ), but they also inherit from Function.prototype and have typeof MyClass === "function" . js // Constructor const multiply = new Function("x", "y", "return x * y"); // Declaration function multiply(x, y) { return x * y; } // No need for semicolon here // Expression; the function is anonymous but assigned to a variable const multiply = function (x, y) { return x * y; }; // Expression; the function has its own name const multiply = function funcName(x, y) { return x * y; }; // Arrow function const multiply = (x, y) => x * y; // Method const obj = { multiply(x, y) { return x * y; }, }; All syntaxes do approximately the same thing, but there are some subtle behavior differences. The Function() constructor, function expression, and function declaration syntaxes create full-fledged function objects, which can be constructed with new . However, arrow functions and methods cannot be constructed. Async functions, generator functions, and async generator functions are not constructible regardless of syntax. The function declaration creates functions that are hoisted . Other syntaxes do not hoist the function and the function value is only visible after the definition. The arrow function and Function() constructor always create anonymous functions, which means they can't easily call themselves recursively. One way to call an arrow function recursively is by assigning it to a variable. The arrow function syntax does not have access to arguments or this . The Function() constructor cannot access any local variables — it only has access to the global scope. The Function() constructor causes runtime compilation and is often slower than other syntaxes. For function expressions, there is a distinction between the function name and the variable the function is assigned to. The function name cannot be changed, while the variable the function is assigned to can be reassigned. The function name can be different from the variable the function is assigned to — they have no relation to each other. The function name can be used only within the function's body. Attempting to use it outside the function's body results in an error (or gets another value, if the same name is declared elsewhere). For example: js const y = function x() {}; console.log(x); // ReferenceError: x is not defined On the other hand, the variable the function is assigned to is limited only by its scope, which is guaranteed to include the scope in which the function is declared. A function declaration also creates a variable with the same name as the function name. Thus, unlike those defined by function expressions, functions defined by function declarations can be accessed by their name in the scope they were defined in, as well as in their own body. A function defined by new Function will dynamically have its source assembled, which is observable when you serialize it. For example, console.log(new Function().toString()) gives: js function anonymous( ) { } This is the actual source used to compile the function. However, although the Function() constructor will create the function with name anonymous , this name is not added to the scope of the body. The body only ever has access to global variables. For example, the following would result in an error: js new Function("alert(anonymous);")(); A function defined by a function expression or by a function declaration inherits the current scope. That is, the function forms a closure. On the other hand, a function defined by a Function constructor does not inherit any scope other than the global scope (which all functions inherit). js // p is a global variable globalThis.p = 5; function myFunc() { // p is a local variable const p = 9; function decl() { console.log(p); } const expr = function () { console.log(p); }; const cons = new Function("\tconsole.log(p);"); decl(); expr(); cons(); } myFunc(); // Logs: // 9 (for 'decl' by function declaration (current scope)) // 9 (for 'expr' by function expression (current scope)) // 5 (for 'cons' by Function constructor (global scope)) Functions defined by function expressions and function declarations are parsed only once, while a function defined by the Function constructor parses the string passed to it each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than new Function(...) . Therefore the Function constructor should generally be avoided whenever possible. A function declaration may be unintentionally turned into a function expression when it appears in an expression context. js // A function declaration function foo() { console.log("FOO!"); } doSomething( // A function expression passed as an argument function foo() { console.log("FOO!"); }, ); On the other hand, a function expression may also be turned into a function declaration. An expression statement cannot begin with the function or async function keywords, which is a common mistake when implementing IIFEs (Immediately Invoked Function Expressions). js function () { // SyntaxError: Function statements require a function name console.log("FOO!"); }(); function foo() { console.log("FOO!"); }(); // SyntaxError: Unexpected token ')' Instead, start the expression statement with something else, so that the function keyword unambiguously starts a function expression. Common options include grouping and using void . js (function () { console.log("FOO!"); })(); void function () { console.log("FOO!"); }(); Function parameters Each function parameter is a simple identifier that you can access in the local scope. js function myFunc(a, b, c) { // You can access the values of a, b, and c here } There are three special parameter syntaxes: Default parameters allow formal parameters to be initialized with default values if no value or undefined is passed. The rest parameter allows representing an indefinite number of arguments as an array. Destructuring allows unpacking elements from arrays, or properties from objects, into distinct variables. js function myFunc({ a, b }, c = 1, ...rest) { // You can access the values of a, b, c, and rest here } There are some consequences if one of the above non-simple parameter syntaxes is used: You cannot apply "use strict" to the function body — this causes a syntax error . Even if the function is not in strict mode , certain strict mode function features apply, including that the arguments object stops syncing with the named parameters, arguments.callee throws an error when accessed, and duplicate parameter names are not allowed. The arguments object You can refer to a function's arguments within the function by using the arguments object. arguments An array-like object containing the arguments passed to the currently executing function. arguments.callee The currently executing function. arguments.length The number of arguments passed to the function. Getter and setter functions You can define accessor properties on any standard built-in object or user-defined object that supports the addition of new properties. Within object literals and classes , you can use special syntaxes to define the getter and setter of an accessor property. get Binds an object property to a function that will be called when that property is looked up. set Binds an object property to a function to be called when there is an attempt to set that property. Note that these syntaxes create an object property , not a method . The getter and setter functions themselves can only be accessed using reflective APIs such as Object.getOwnPropertyDescriptor() . Block-level functions In strict mode , functions inside blocks are scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode. js "use strict"; function f() { return 1; } { function f() { return 2; } } f() === 1; // true // f() === 2 in non-strict mode Block-level functions in non-strict code In a word: Don't. In non-strict code, function declarations inside blocks behave strangely. For example: js if (shouldDefineZero) { function zero() { // DANGER: compatibility risk console.log("This is zero."); } } The semantics of this in strict mode are well-specified — zero only ever exists within that scope of the if block. If shouldDefineZero is false, then zero should never be defined, since the block never executes. However, historically, this was left unspecified, so different browsers implemented it differently in non-strict mode. For more information, see the function declaration reference. A safer way to define functions conditionally is to assign a function expression to a variable: js // Using a var makes it available as a global variable, // with closer behavior to a top-level function declaration var zero; if (shouldDefineZero) { zero = function () { console.log("This is zero."); }; } Examples Returning a formatted number The following function returns a string containing the formatted representation of a number padded with leading zeros. js // This function returns a string padded with leading zeros function padZeros(num, totalLen) { let numStr = num.toString(); // Initialize return value as string const numZeros = totalLen - numStr.length; // Calculate no. of zeros for (let i = 1; i <= numZeros; i++) { numStr = `0${numStr}`; } return numStr; } The following statements call the padZeros function. js let result; result = padZeros(42, 4); // returns "0042" result = padZeros(42, 2); // returns "42" result = padZeros(5, 4); // returns "0005" Determining whether a function exists You can determine whether a function exists by using the typeof operator. In the following example, a test is performed to determine if the window object has a property called noFunc that is a function. If so, it is used; otherwise, some other action is taken. js if (typeof window.noFunc === "function") { // use noFunc() } else { // do something else } Note that in the if test, a reference to noFunc is used — there are no parentheses () after the function name so the actual function is not called. Specifications Specification ECMAScript® 2026 Language Specification # sec-function-definitions Browser compatibility Loading… See also Functions guide Classes function function expression Function Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 8, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar JavaScript Tutorials and guides JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and strings Representing dates & times Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Resource management Internationalization JavaScript modules Intermediate Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures Advanced Inheritance and the prototype chain Meta programming Memory Management References Built-in objects AggregateError Array ArrayBuffer AsyncDisposableStack AsyncFunction AsyncGenerator AsyncGeneratorFunction AsyncIterator Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() DisposableStack encodeURI() encodeURIComponent() Error escape() Deprecated eval() EvalError FinalizationRegistry Float16Array Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int8Array Int16Array Int32Array InternalError Non-standard Intl isFinite() isNaN() Iterator JSON Map Math NaN Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String SuppressedError Symbol SyntaxError Temporal Experimental TypedArray TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array undefined unescape() Deprecated URIError WeakMap WeakRef WeakSet Expressions & operators Addition (+) Addition assignment (+=) Assignment (=) async function expression async function* expression await Bitwise AND (&) Bitwise AND assignment (&=) Bitwise NOT (~) Bitwise OR (|) Bitwise OR assignment (|=) Bitwise XOR (^) Bitwise XOR assignment (^=) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete Destructuring Division (/) Division assignment (/=) Equality (==) Exponentiation (**) Exponentiation assignment (**=) function expression function* expression Greater than (>) Greater than or equal (>=) Grouping operator ( ) import.meta import.meta.resolve() import() in Increment (++) Inequality (!=) instanceof Left shift (<<) Left shift assignment (<<=) Less than (<) Less than or equal (<=) Logical AND (&&) Logical AND assignment (&&=) Logical NOT (!) Logical OR (||) Logical OR assignment (||=) Multiplication (*) Multiplication assignment (*=) new new.target null Nullish coalescing assignment (??=) Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder (%) Remainder assignment (%=) Right shift (>>) Right shift assignment (>>=) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction (-) Subtraction assignment (-=) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift (>>>) Unsigned right shift assignment (>>>=) void operator yield yield* Statements & declarations async function async function* await using Block statement break class const continue debugger do...while Empty statement export Expression statement for for await...of for...in for...of function function* if...else import Import attributes Labeled statement let return switch throw try...catch using var while with Deprecated Functions Arrow function expressions Default parameters get Method definitions Rest parameters set The arguments object [Symbol.iterator]() callee Deprecated length Classes constructor extends Private elements Public class fields static Static initialization blocks Regular expressions Backreference: \1, \2 Capturing group: (...) Character class escape: \d, \D, \w, \W, \s, \S Character class: [...], [^...] Character escape: \n, \u{...} Disjunction: | Input boundary assertion: ^, $ Literal character: a, b Lookahead assertion: (?=...), (?!...) Lookbehind assertion: (?<=...), (?<!...) Modifier: (?ims-ims:...) Named backreference: \k<name> Named capturing group: (?<name>...) Non-capturing group: (?:...) Quantifier: *, +, ?, {n}, {n,}, {n,m} Unicode character class escape: \p{...}, \P{...} Wildcard: . Word boundary assertion: \b, \B Errors AggregateError: No Promise in Promise.any was resolved Error: Permission denied to access property "x" InternalError: too much recursion RangeError: argument is not a valid code point RangeError: BigInt division by zero RangeError: BigInt negative exponent RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' RangeError: invalid array length RangeError: invalid date RangeError: precision is out of range RangeError: radix must be an integer RangeError: repeat count must be less than infinity RangeError: repeat count must be non-negative RangeError: x can't be converted to BigInt because it isn't an integer ReferenceError: "x" is not defined ReferenceError: assignment to undeclared variable "x" ReferenceError: can't access lexical declaration 'X' before initialization ReferenceError: must call super constructor before using 'this' in derived class constructor ReferenceError: super() called twice in derived class constructor SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code SyntaxError: "0"-prefixed octal literals are deprecated SyntaxError: "use strict" not allowed in function with non-simple parameters SyntaxError: "x" is a reserved identifier SyntaxError: \ at end of pattern SyntaxError: a declaration in the head of a for-of loop can't have an initializer SyntaxError: applying the 'delete' operator to an unqualified name is deprecated SyntaxError: arguments is not valid in fields SyntaxError: await is only valid in async functions, async generators and modules SyntaxError: await/yield expression can't be used in parameter SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions SyntaxError: character class escape cannot be used in class range in regular expression SyntaxError: continue must be inside loop SyntaxError: duplicate capture group name in regular expression SyntaxError: duplicate formal argument x SyntaxError: for-in loop head declarations may not have initializers SyntaxError: function statement requires a name SyntaxError: functions cannot be labelled SyntaxError: getter and setter for private name #x should either be both static or non-static SyntaxError: getter functions must have no arguments SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character SyntaxError: import declarations may only appear at top level of a module SyntaxError: incomplete quantifier in regular expression SyntaxError: invalid assignment left-hand side SyntaxError: invalid BigInt syntax SyntaxError: invalid capture group name in regular expression SyntaxError: invalid character in class in regular expression SyntaxError: invalid class set operation in regular expression SyntaxError: invalid decimal escape in regular expression SyntaxError: invalid identity escape in regular expression SyntaxError: invalid named capture reference in regular expression SyntaxError: invalid property name in regular expression SyntaxError: invalid range in character class SyntaxError: invalid regexp group SyntaxError: invalid regular expression flag "x" SyntaxError: invalid unicode escape in regular expression SyntaxError: JSON.parse: bad parsing SyntaxError: label not found SyntaxError: missing : after property id SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ] after element list SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing = in const declaration SyntaxError: missing formal parameter SyntaxError: missing name after . operator SyntaxError: missing variable name SyntaxError: negated character class with strings in regular expression SyntaxError: new keyword cannot be used with an optional chain SyntaxError: nothing to repeat SyntaxError: numbers out of order in {} quantifier. SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code SyntaxError: parameter after rest parameter SyntaxError: private fields can't be deleted SyntaxError: property name __proto__ appears more than once in object literal SyntaxError: raw bracket is not allowed in regular expression with unicode flag SyntaxError: redeclaration of formal parameter "x" SyntaxError: reference to undeclared private field or method #x SyntaxError: rest parameter may not have a default SyntaxError: return not in function SyntaxError: setter functions must have one argument SyntaxError: string literal contains an unescaped line break SyntaxError: super() is only valid in derived class constructors SyntaxError: tagged template cannot be used with optional chain SyntaxError: Unexpected '#' used outside of class body SyntaxError: Unexpected token SyntaxError: unlabeled break must be inside loop or switch SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' SyntaxError: use of super property/member accesses only valid within methods or eval code within methods SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed TypeError: 'x' is not iterable TypeError: "x" is (not) "y" TypeError: "x" is not a constructor TypeError: "x" is not a function TypeError: "x" is not a non-null object TypeError: "x" is read-only TypeError: already executing generator TypeError: BigInt value can't be serialized in JSON TypeError: calling a builtin X constructor without new is forbidden TypeError: can't access/set private field or method: object is not the right class TypeError: can't assign to property "x" on "y": not an object TypeError: can't convert BigInt to number TypeError: can't convert x to BigInt TypeError: can't define property "x": "obj" is not extensible TypeError: can't delete non-configurable array element TypeError: can't redefine non-configurable property "x" TypeError: can't set prototype of this object TypeError: can't set prototype: it would cause a prototype chain cycle TypeError: cannot use 'in' operator to search for 'x' in 'y' TypeError: class constructors must be invoked with 'new' TypeError: cyclic object value TypeError: derived class constructor returned invalid value x TypeError: getting private setter-only property TypeError: Initializing an object twice is an error with private fields/methods TypeError: invalid 'instanceof' operand 'x' TypeError: invalid Array.prototype.sort argument TypeError: invalid assignment to const "x" TypeError: Iterator/AsyncIterator constructor can't be used directly TypeError: matchAll/replaceAll must be called with a global RegExp TypeError: More arguments needed TypeError: null/undefined has no properties TypeError: property "x" is non-configurable and can't be deleted TypeError: Reduce of empty array with no initial value TypeError: setting getter-only property "x" TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol TypeError: X.prototype.y called on incompatible type URIError: malformed URI sequence Warning: -file- is being assigned a //# sourceMappingURL, but already has one Warning: unreachable code after return statement Misc JavaScript technologies overview Execution model Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .