Array[Symbol.species] - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array [Symbol.species] Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Русский 中文 (简体) Array[Symbol.species] Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. Learn more See full compatibility Report feedback The Array[Symbol.species] static accessor property returns the constructor used to construct return values from array methods. Warning: The existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature . Avoid relying on it if possible. Modern array methods, such as toReversed() , do not use [Symbol.species] and always return a new Array base class instance. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js Array[Symbol.species] Return value The value of the constructor ( this ) on which get [Symbol.species] was called. The return value is used to construct return values from array methods that create new arrays. Description The [Symbol.species] accessor property returns the default constructor for Array objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically: js // Hypothetical underlying implementation for illustration class Array { static get [Symbol.species]() { return this; } } Because of this polymorphic implementation, [Symbol.species] of derived subclasses would also return the constructor itself by default. js class SubArray extends Array {} SubArray[Symbol.species] === SubArray; // true When calling array methods that do not mutate the existing array but return a new array instance (for example, filter() and map() ), the array's constructor[Symbol.species] will be accessed. The returned constructor will be used to construct the return value of the array method. This makes it technically possible to make array methods return objects unrelated to arrays. js class NotAnArray { constructor(length) { this.length = length; } } const arr = [0, 1, 2]; arr.constructor = { [Symbol.species]: NotAnArray }; arr.map((i) => i); // NotAnArray { '0': 0, '1': 1, '2': 2, length: 3 } arr.filter((i) => i); // NotAnArray { '0': 1, '1': 2, length: 0 } arr.concat([1, 2]); // NotAnArray { '0': 0, '1': 1, '2': 2, '3': 1, '4': 2, length: 5 } Examples Species in ordinary objects The [Symbol.species] property returns the default constructor function, which is the Array constructor for Array . js Array[Symbol.species]; // [Function: Array] Species in derived objects In an instance of a custom Array subclass, such as MyArray , the MyArray species is the MyArray constructor. However, you might want to overwrite this, in order to return parent Array objects in your derived class methods: js class MyArray extends Array { // Overwrite MyArray species to the parent Array constructor static get [Symbol.species]() { return Array; } } Specifications Specification ECMAScript® 2026 Language Specification # sec-get-array-%symbol.species% Browser compatibility Loading… See also Polyfill of Array[Symbol.species] and support of [Symbol.species] in all affected Array methods in core-js Indexed collections guide Array Symbol.species Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .