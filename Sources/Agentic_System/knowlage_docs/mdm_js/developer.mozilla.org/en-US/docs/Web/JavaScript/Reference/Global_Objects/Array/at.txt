Array.prototype.at() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array at() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Array.prototype.at() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨March 2022⁩. Learn more See full compatibility Report feedback The at() method of Array instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [5, 12, 8, 130, 44]; let index = 2; console.log(`An index of ${index} returns ${array.at(index)}`); // Expected output: "An index of 2 returns 8" index = -2; console.log(`An index of ${index} returns ${array.at(index)}`); // Expected output: "An index of -2 returns 130" Syntax js at(index) Parameters index Zero-based index of the array element to be returned, converted to an integer . Negative index counts back from the end of the array — if index < 0 , index + array.length is accessed. Return value The element in the array matching the given index. Always returns undefined if index < -array.length or index >= array.length without attempting to access the corresponding property. Description The at() method is equivalent to the bracket notation when index is a non-negative integer. For example, array[0] and array.at(0) both return the first item. However, when counting elements from the end of the array, you cannot use array[-1] like you may in Python or R, because all values inside the square brackets are treated literally as string properties, so you will end up reading array["-1"] , which is just a normal string property instead of an array index. The usual practice is to access length and calculate the index from that — for example, array[array.length - 1] . The at() method allows relative indexing, so this can be shortened to array.at(-1) . By combining at() with with() , you can both read and write (respectively) an array using negative indices. The at() method is generic . It only expects the this value to have a length property and integer-keyed properties. Examples Return the last value of an array The following example provides a function which returns the last element found in a specified array. js // Our array with items const cart = ["apple", "banana", "pear"]; // A function which returns the last item of a given array function returnLast(arr) { return arr.at(-1); } // Get the last item of our array 'cart' const item1 = returnLast(cart); console.log(item1); // 'pear' // Add an item to our 'cart' array cart.push("orange"); const item2 = returnLast(cart); console.log(item2); // 'orange' Comparing methods This example compares different ways to select the penultimate (last but one) item of an Array . While all the methods shown below are valid, this example highlights the succinctness and readability of the at() method. js // Our array with items const colors = ["red", "green", "blue"]; // Using length property const lengthWay = colors[colors.length - 2]; console.log(lengthWay); // 'green' // Using slice() method. Note an array is returned const sliceWay = colors.slice(-2, -1); console.log(sliceWay[0]); // 'green' // Using at() method const atWay = colors.at(-2); console.log(atWay); // 'green' Calling at() on non-array objects The at() method reads the length property of this and calculates the index to access. js const arrayLike = { length: 2, 0: "a", 1: "b", 2: "c", // ignored by at() since length is 2 }; console.log(Array.prototype.at.call(arrayLike, 0)); // "a" console.log(Array.prototype.at.call(arrayLike, 2)); // undefined Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.at Browser compatibility Loading… See also Polyfill of Array.prototype.at in core-js es-shims polyfill of Array.prototype.at Indexed collections guide Array Array.prototype.findIndex() Array.prototype.indexOf() Array.prototype.with() TypedArray.prototype.at() String.prototype.at() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .