Array.prototype.fill() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array fill() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Array.prototype.fill() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. Learn more See full compatibility Report feedback The fill() method of Array instances changes all elements within a range of indices in an array to a static value. It returns the modified array. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [1, 2, 3, 4]; // Fill with 0 from position 2 until position 4 console.log(array.fill(0, 2, 4)); // Expected output: Array [1, 2, 0, 0] // Fill with 5 from position 1 console.log(array.fill(5, 1)); // Expected output: Array [1, 5, 5, 5] console.log(array.fill(6)); // Expected output: Array [6, 6, 6, 6] Syntax js fill(value) fill(value, start) fill(value, start, end) Parameters value Value to fill the array with. Note all elements in the array will be this exact value: if value is an object, each slot in the array will reference that object. start Optional Zero-based index at which to start filling, converted to an integer . Negative index counts back from the end of the array — if -array.length <= start < 0 , start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length , no index is filled. end Optional Zero-based index at which to end filling, converted to an integer . fill() fills up to but not including end . Negative index counts back from the end of the array — if -array.length <= end < 0 , end + array.length is used. If end < -array.length , 0 is used. If end >= array.length or end is omitted or undefined , array.length is used, causing all indices until the end to be filled. If end implies a position before or at the position that start implies, nothing is filled. Return value The modified array, filled with value . Description The fill() method is a mutating method . It does not alter the length of this , but it will change the content of this . The fill() method fills empty slots in sparse arrays with value as well. The fill() method is generic . It only expects the this value to have a length property. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable. Note: Using Array.prototype.fill() on an empty array ( length = 0 ) would not modify it as the array has nothing to be modified. To use Array.prototype.fill() when declaring an array, make sure the array has non-zero length . See example . Examples Using fill() js console.log([1, 2, 3].fill(4)); // [4, 4, 4] console.log([1, 2, 3].fill(4, 1)); // [1, 4, 4] console.log([1, 2, 3].fill(4, 1, 2)); // [1, 4, 3] console.log([1, 2, 3].fill(4, 1, 1)); // [1, 2, 3] console.log([1, 2, 3].fill(4, 3, 3)); // [1, 2, 3] console.log([1, 2, 3].fill(4, -3, -2)); // [4, 2, 3] console.log([1, 2, 3].fill(4, NaN, NaN)); // [1, 2, 3] console.log([1, 2, 3].fill(4, 3, 5)); // [1, 2, 3] console.log(Array(3).fill(4)); // [4, 4, 4] // A single object, referenced by each slot of the array: const arr = Array(3).fill({}); // [{}, {}, {}] arr[0].hi = "hi"; // [{ hi: "hi" }, { hi: "hi" }, { hi: "hi" }] Using fill() to create a matrix of all 1 This example shows how to create a matrix of all 1, like the ones() function of Octave or MATLAB. js const arr = new Array(3); for (let i = 0; i < arr.length; i++) { arr[i] = new Array(4).fill(1); // Creating an array of size 4 and filled of 1 } arr[0][0] = 10; console.log(arr[0][0]); // 10 console.log(arr[1][0]); // 1 console.log(arr[2][0]); // 1 Using fill() to populate an empty array This example shows how to populate an array, setting all elements to a specific value. The end parameter does not have to be specified. js const tempGirls = Array(5).fill("girl", 0); Note that the array was initially a sparse array with no assigned indices. fill() is still able to fill this array. Calling fill() on non-array objects The fill() method reads the length property of this and sets the value of each integer-keyed property from start to end . js const arrayLike = { length: 2 }; console.log(Array.prototype.fill.call(arrayLike, 1)); // { '0': 1, '1': 1, length: 2 } Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.fill Browser compatibility Loading… See also Polyfill of Array.prototype.fill in core-js Indexed collections guide Array TypedArray.prototype.fill() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .