Array.prototype.find() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array find() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Array.prototype.find() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. Learn more See full compatibility Report feedback The find() method of Array instances returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned. If you need the index of the found element in the array, use findIndex() . If you need to find the index of a value , use indexOf() . (It's similar to findIndex() , but checks each element for equality with the value instead of using a testing function.) If you need to find if a value exists in an array, use includes() . Again, it checks each element for equality with the value instead of using a testing function. If you need to find if any element satisfies the provided testing function, use some() . If you need to find all elements that satisfy the provided testing function, use filter() . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [5, 12, 8, 130, 44]; const found = array.find((element) => element > 10); console.log(found); // Expected output: 12 Syntax js find(callbackFn) find(callbackFn, thisArg) Parameters callbackFn A function to execute for each element in the array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array find() was called upon. thisArg Optional A value to use as this when executing callbackFn . See iterative methods . Return value The first element in the array that satisfies the provided testing function. Otherwise, undefined is returned. Description The find() method is an iterative method . It calls a provided callbackFn function once for each element in an array in ascending-index order, until callbackFn returns a truthy value. find() then returns that element and stops iterating through the array. If callbackFn never returns a truthy value, find() returns undefined . Read the iterative methods section for more information about how these methods work in general. callbackFn is invoked for every index of the array, not just those with assigned values. Empty slots in sparse arrays behave the same as undefined . The find() method is generic . It only expects the this value to have a length property and integer-keyed properties. Examples Find an object in an array by one of its properties js const inventory = [ { name: "apples", quantity: 2 }, { name: "bananas", quantity: 0 }, { name: "cherries", quantity: 5 }, ]; function isCherries(fruit) { return fruit.name === "cherries"; } console.log(inventory.find(isCherries)); // { name: 'cherries', quantity: 5 } Using arrow function and destructuring js const inventory = [ { name: "apples", quantity: 2 }, { name: "bananas", quantity: 0 }, { name: "cherries", quantity: 5 }, ]; const result = inventory.find(({ name }) => name === "cherries"); console.log(result); // { name: 'cherries', quantity: 5 } Find the first prime number in an array The following example returns the first element in the array that is a prime number, or undefined if there is no prime number. js function isPrime(n) { if (n < 2) { return false; } if (n % 2 === 0) { return n === 2; } for (let factor = 3; factor * factor <= n; factor += 2) { if (n % factor === 0) { return false; } } return true; } console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found console.log([4, 5, 8, 12].find(isPrime)); // 5 Note: The isPrime() implementation is for demonstration only. For a real-world application, you would want to use a heavily memoized algorithm such as the Sieve of Eratosthenes to avoid repeated calculations. Using the third argument of callbackFn The array argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses filter() to extract the positive values and then uses find() to find the first element that is less than its neighbors. js const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6]; const firstTrough = numbers .filter((num) => num > 0) .find((num, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. if (idx > 0 && num >= arr[idx - 1]) return false; if (idx < arr.length - 1 && num >= arr[idx + 1]) return false; return true; }); console.log(firstTrough); // 1 Using find() on sparse arrays Empty slots in sparse arrays are visited, and are treated the same as undefined . js // Declare array with no elements at indexes 2, 3, and 4 const array = [0, 1, , , , 5, 6]; // Shows all indexes, not just those with assigned values array.find((value, index) => { console.log("Visited index", index, "with value", value); return false; }); // Visited index 0 with value 0 // Visited index 1 with value 1 // Visited index 2 with value undefined // Visited index 3 with value undefined // Visited index 4 with value undefined // Visited index 5 with value 5 // Visited index 6 with value 6 // Shows all indexes, including deleted array.find((value, index) => { // Delete element 5 on first iteration if (index === 0) { console.log("Deleting array[5] with value", array[5]); delete array[5]; } // Element 5 is still visited even though deleted console.log("Visited index", index, "with value", value); return false; }); // Deleting array[5] with value 5 // Visited index 0 with value 0 // Visited index 1 with value 1 // Visited index 2 with value undefined // Visited index 3 with value undefined // Visited index 4 with value undefined // Visited index 5 with value undefined // Visited index 6 with value 6 Calling find() on non-array objects The find() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length . js const arrayLike = { length: 3, "-1": 0.1, // ignored by find() since -1 < 0 0: 2, 1: 7.3, 2: 4, }; console.log(Array.prototype.find.call(arrayLike, (x) => !Number.isInteger(x))); // 7.3 Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.find Browser compatibility Loading… See also Polyfill of Array.prototype.find in core-js es-shims polyfill of Array.prototype.find Indexed collections guide Array Array.prototype.findIndex() Array.prototype.findLast() Array.prototype.findLastIndex() Array.prototype.includes() Array.prototype.filter() Array.prototype.every() Array.prototype.some() TypedArray.prototype.find() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .