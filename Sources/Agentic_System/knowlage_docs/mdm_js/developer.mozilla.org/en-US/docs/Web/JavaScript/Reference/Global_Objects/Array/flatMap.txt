Array.prototype.flatMap() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array flatMap() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Array.prototype.flatMap() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. Learn more See full compatibility Report feedback The flatMap() method of Array instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 ( arr.map(...args).flat() ), but slightly more efficient than calling those two methods separately. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const arr = [1, 2, 1]; const result = arr.flatMap((num) => (num === 2 ? [2, 2] : 1)); console.log(result); // Expected output: Array [1, 2, 2, 1] Syntax js flatMap(callbackFn) flatMap(callbackFn, thisArg) Parameters callbackFn A function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array flatMap() was called upon. thisArg Optional A value to use as this when executing callbackFn . See iterative methods . Return value A new array with each element being the result of the callback function and flattened by a depth of 1. Description The flatMap() method is an iterative method . See Array.prototype.map() for a detailed description of the callback function. The flatMap() method is identical to map(callbackFn, thisArg) followed by flat(1) — for each element, it produces an array of new elements, and concatenates the resulting arrays together to form a new array. Read the iterative methods section for more information about how these methods work in general. The flatMap() method is generic . It only expects the this value to have a length property and integer-keyed properties. However, the value returned from callbackFn must be an array if it is to be flattened. Alternative Pre-allocate and explicitly iterate js const arr = [1, 2, 3, 4]; arr.flatMap((x) => [x, x * 2]); // is equivalent to const n = arr.length; const acc = new Array(n * 2); for (let i = 0; i < n; i++) { const x = arr[i]; acc[i * 2] = x; acc[i * 2 + 1] = x * 2; } // [1, 2, 2, 4, 3, 6, 4, 8] Note that in this particular case the flatMap approach is slower than the for-loop approach — due to the creation of temporary arrays that must be garbage collected, as well as the return array not needing to be frequently resized. However, flatMap may still be the correct solution in cases where its flexibility and readability are desired. Examples map() and flatMap() js const arr = [1, 2, 3, 4]; arr.map((x) => [x * 2]); // [[2], [4], [6], [8]] arr.flatMap((x) => [x * 2]); // [2, 4, 6, 8] // only one level is flattened arr.flatMap((x) => [[x * 2]]); // [[2], [4], [6], [8]] While the above could have been achieved by using map itself, here is an example that better showcases the use of flatMap() . Let's generate a list of words from a list of sentences. js const arr = ["it's Sunny in", "", "California"]; arr.map((x) => x.split(" ")); // [["it's","Sunny","in"],[""],["California"]] arr.flatMap((x) => x.split(" ")); // ["it's","Sunny","in", "", "California"] Notice, the output list length can be different from the input list length. For adding and removing items during a map() flatMap can be used as a way to add and remove items (modify the number of items) during a map . In other words, it allows you to map many items to many items (by handling each input item separately), rather than always one-to-one . In this sense, it works like the opposite of filter . Return a 1-element array to keep the item, a multiple-element array to add items, or a 0-element array to remove the item. js // Let's say we want to remove all the negative numbers // and split the odd numbers into an even number and a 1 const a = [5, 4, -3, 20, 17, -33, -4, 18]; // |\ \ x | | \ x x | // [4,1, 4, 20, 16, 1, 18] const result = a.flatMap((n) => { if (n < 0) { return []; } return n % 2 === 0 ? [n] : [n - 1, 1]; }); console.log(result); // [4, 1, 4, 20, 16, 1, 18] Using the third argument of callbackFn The array argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses filter() to extract operational stations and then uses flatMap() to create a new array where each element contains a station and its next station. On the last station, it returns an empty array to exclude it from the final array. js const stations = ["New Haven", "West Haven", "Milford (closed)", "Stratford"]; const line = stations .filter((name) => !name.endsWith("(closed)")) .flatMap((name, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. if (idx === arr.length - 1) return []; // last station has no next station return [`${name} - ${arr[idx + 1]}`]; }); console.log(line); // ['New Haven - West Haven', 'West Haven - Stratford'] The array argument is not the array that is being built — there is no way to access the array being built from the callback function. Using flatMap() on sparse arrays The callbackFn won't be called for empty slots in the source array because map() doesn't, while flat() ignores empty slots in the returned arrays. js console.log([1, 2, , 4, 5].flatMap((x) => [x, x * 2])); // [1, 2, 2, 4, 4, 8, 5, 10] console.log([1, 2, 3, 4].flatMap((x) => [, x * 2])); // [2, 4, 6, 8] Calling flatMap() on non-array objects The flatMap() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length . If the return value of the callback function is not an array, it is always directly appended to the result array. js const arrayLike = { length: 3, 0: 1, 1: 2, 2: 3, 3: 4, // ignored by flatMap() since length is 3 }; console.log(Array.prototype.flatMap.call(arrayLike, (x) => [x, x * 2])); // [1, 2, 2, 4, 3, 6] // Array-like objects returned from the callback won't be flattened console.log( Array.prototype.flatMap.call(arrayLike, (x) => ({ length: 1, 0: x, })), ); // [ { '0': 1, length: 1 }, { '0': 2, length: 1 }, { '0': 3, length: 1 } ] Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.flatmap Browser compatibility Loading… See also Polyfill of Array.prototype.flatMap in core-js es-shims polyfill of Array.prototype.flatMap Indexed collections guide Array Array.prototype.concat() Array.prototype.flat() Array.prototype.map() Array.prototype.reduce() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .