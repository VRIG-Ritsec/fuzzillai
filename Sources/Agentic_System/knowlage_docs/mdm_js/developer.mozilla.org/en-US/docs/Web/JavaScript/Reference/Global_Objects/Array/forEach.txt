Array.prototype.forEach() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array forEach() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Array.prototype.forEach() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The forEach() method of Array instances executes a provided function once for each array element. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = ["a", "b", "c"]; array.forEach((element) => console.log(element)); // Expected output: "a" // Expected output: "b" // Expected output: "c" Syntax js forEach(callbackFn) forEach(callbackFn, thisArg) Parameters callbackFn A function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array forEach() was called upon. thisArg Optional A value to use as this when executing callbackFn . See iterative methods . Return value None ( undefined ). Description The forEach() method is an iterative method . It calls a provided callbackFn function once for each element in an array in ascending-index order. Unlike map() , forEach() always returns undefined and is not chainable. The typical use case is to execute side effects at the end of a chain. Read the iterative methods section for more information about how these methods work in general. callbackFn is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays . The forEach() method is generic . It only expects the this value to have a length property and integer-keyed properties. There is no way to stop or break a forEach() loop other than by throwing an exception. If you need such behavior, the forEach() method is the wrong tool. Early termination may be accomplished with looping statements like for , for...of , and for...in . Array methods like every() , some() , find() , and findIndex() also stops iteration immediately when further iteration is not necessary. forEach() expects a synchronous function — it does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as forEach callbacks. js const ratings = [5, 4, 5]; let sum = 0; const sumFunction = async (a, b) => a + b; ratings.forEach(async (rating) => { sum = await sumFunction(sum, rating); }); console.log(sum); // Naively expected output: 14 // Actual output: 0 To run a series of asynchronous operations sequentially or concurrently, see promise composition . Examples Converting a for loop to forEach js const items = ["item1", "item2", "item3"]; const copyItems = []; // before for (let i = 0; i < items.length; i++) { copyItems.push(items[i]); } // after items.forEach((item) => { copyItems.push(item); }); Printing the contents of an array Note: In order to display the content of an array in the console, you can use console.table() , which prints a formatted version of the array. The following example illustrates an alternative approach, using forEach() . The following code logs a line for each element in an array: js const logArrayElements = (element, index /*, array */) => { console.log(`a[${index}] = ${element}`); }; // Notice that index 2 is skipped, since there is no item at // that position in the array. [2, 5, , 9].forEach(logArrayElements); // Logs: // a[0] = 2 // a[1] = 5 // a[3] = 9 Using thisArg The following (contrived) example updates an object's properties from each entry in the array: js class Counter { constructor() { this.sum = 0; this.count = 0; } add(array) { // Only function expressions have their own this bindings. array.forEach(function countEntry(entry) { this.sum += entry; ++this.count; }, this); } } const obj = new Counter(); obj.add([2, 5, 9]); console.log(obj.count); // 3 console.log(obj.sum); // 16 Since the thisArg parameter ( this ) is provided to forEach() , it is passed to callback each time it's invoked. The callback uses it as its this value. Note: If passing the callback function used an arrow function expression , the thisArg parameter could be omitted, since all arrow functions lexically bind the this value. An object copy function The following code creates a copy of a given object. There are different ways to create a copy of an object. The following is just one way and is presented to explain how Array.prototype.forEach() works by using Object.* utility functions. js const copy = (obj) => { const copy = Object.create(Object.getPrototypeOf(obj)); const propNames = Object.getOwnPropertyNames(obj); propNames.forEach((name) => { const desc = Object.getOwnPropertyDescriptor(obj, name); Object.defineProperty(copy, name, desc); }); return copy; }; const obj1 = { a: 1, b: 2 }; const obj2 = copy(obj1); // obj2 looks like obj1 now Flatten an array The following example is only here for learning purpose. If you want to flatten an array using built-in methods, you can use Array.prototype.flat() . js const flatten = (arr) => { const result = []; arr.forEach((item) => { if (Array.isArray(item)) { result.push(...flatten(item)); } else { result.push(item); } }); return result; }; // Usage const nested = [1, 2, 3, [4, 5, [6, 7], 8, 9]]; console.log(flatten(nested)); // [1, 2, 3, 4, 5, 6, 7, 8, 9] Using the third argument of callbackFn The array argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses filter() to extract the positive values and then uses forEach() to log its neighbors. js const numbers = [3, -1, 1, 4, 1, 5]; numbers .filter((num) => num > 0) .forEach((num, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. console.log(arr[idx - 1], num, arr[idx + 1]); }); // undefined 3 1 // 3 1 4 // 1 4 1 // 4 1 5 // 1 5 undefined Using forEach() on sparse arrays js const arraySparse = [1, 3, /* empty */, 7]; let numCallbackRuns = 0; arraySparse.forEach((element) => { console.log({ element }); numCallbackRuns++; }); console.log({ numCallbackRuns }); // { element: 1 } // { element: 3 } // { element: 7 } // { numCallbackRuns: 3 } The callback function is not invoked for the missing value at index 2. Calling forEach() on non-array objects The forEach() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length . js const arrayLike = { length: 3, 0: 2, 1: 3, 2: 4, 3: 5, // ignored by forEach() since length is 3 }; Array.prototype.forEach.call(arrayLike, (x) => console.log(x)); // 2 // 3 // 4 Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.foreach Browser compatibility Loading… See also Polyfill of Array.prototype.forEach in core-js es-shims polyfill of Array.prototype.forEach Indexed collections guide Array Array.prototype.find() Array.prototype.map() Array.prototype.filter() Array.prototype.every() Array.prototype.some() TypedArray.prototype.forEach() Map.prototype.forEach() Set.prototype.forEach() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .