Array.fromAsync() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array fromAsync() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 한국어 中文 (简体) Array.fromAsync() Baseline 2024 Newly available Since ⁨January 2024⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The Array.fromAsync() static method creates a new, shallow-copied Array instance from an async iterable , iterable , or array-like object. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js Array.fromAsync(items) Array.fromAsync(items, mapFn) Array.fromAsync(items, mapFn, thisArg) Parameters items An async iterable, iterable, or array-like object to convert to an array. mapFn Optional A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and mapFn 's return value is added to the array instead (after being awaited ). The function is called with the following arguments: element The current element being processed in the array. If items is a sync iterable or array-like object, then all elements are first awaited , and element will never be a thenable . If items is an async iterable, then each yielded value is passed as-is. index The index of the current element being processed in the array. thisArg Optional Value to use as this when executing mapFn . Return value A new Promise whose fulfillment value is a new Array instance. Description Array.fromAsync() lets you create arrays from: async iterable objects (objects such as ReadableStream and AsyncGenerator ); or, if the object is not async iterable, iterable objects (objects such as Map and Set ); or, if the object is not iterable, array-like objects (objects with a length property and indexed elements). Array.fromAsync() iterates the async iterable in a fashion very similar to for await...of . Array.fromAsync(items) is generally equivalent to the following code, if items is an async iterable or sync iterable: js const result = []; for await (const element of items) { result.push(element); } Array.fromAsync() is almost equivalent to Array.from() in terms of behavior, except the following: Array.fromAsync() handles async iterable objects. Array.fromAsync() returns a Promise that fulfills to the array instance. If Array.fromAsync() is called with a non-async iterable object, each element to be added to the array is first awaited . If a mapFn is provided, its output is also internally awaited. Array.fromAsync() and Promise.all() can both turn an iterable of promises into a promise of an array. However, there are two key differences: Array.fromAsync() awaits each value yielded from the object sequentially. Promise.all() awaits all values concurrently. Array.fromAsync() iterates the iterable lazily, and doesn't retrieve the next value until the current one is settled. Promise.all() retrieves all values in advance and awaits them all. Examples Array from an async iterable js const asyncIterable = (async function* () { for (let i = 0; i < 5; i++) { await new Promise((resolve) => setTimeout(resolve, 10 * i)); yield i; } })(); Array.fromAsync(asyncIterable).then((array) => console.log(array)); // [0, 1, 2, 3, 4] When items is an async iterable where each result's value is also a promise, then those promises are added to the resulting array without being awaited. This is consistent with the behavior of for await...of . js function createAsyncIter() { let i = 0; return { [Symbol.asyncIterator]() { return { async next() { if (i > 2) return { done: true }; i++; return { value: Promise.resolve(i), done: false }; }, }; }, }; } Array.fromAsync(createAsyncIter()).then((array) => console.log(array)); // (3) [Promise, Promise, Promise] Note: In practice, you will rarely encounter an async iterable that yields promises, because if you implement it using an async generator function , then the yield expression automatically unwraps promises. Array from a sync iterable js Array.fromAsync( new Map([ [1, 2], [3, 4], ]), ).then((array) => console.log(array)); // [[1, 2], [3, 4]] Array from a sync iterable that yields promises js Array.fromAsync( new Set([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]), ).then((array) => console.log(array)); // [1, 2, 3] Array from an array-like object of promises js Array.fromAsync({ length: 3, 0: Promise.resolve(1), 1: Promise.resolve(2), 2: Promise.resolve(3), }).then((array) => console.log(array)); // [1, 2, 3] Using mapFn with a sync iterable When items is a sync iterable or array-like object, both the input and output of mapFn are awaited internally by Array.fromAsync() . js function delayedValue(v) { return new Promise((resolve) => setTimeout(() => resolve(v), 100)); } Array.fromAsync( [delayedValue(1), delayedValue(2), delayedValue(3)], (element) => delayedValue(element * 2), ).then((array) => console.log(array)); // [2, 4, 6] Using mapFn with an async iterable When items is an async iterable, the input to mapFn is not awaited, but the output is. Using the same createAsyncIter function as above: js Array.fromAsync(createAsyncIter(), async (element) => (await element) * 2).then( (array) => console.log(array), ); // [2, 4, 6] Curiously, this means that Array.fromAsync(createAsyncIter()) is not equivalent to Array.fromAsync(createAsyncIter(), (element) => element) , because the latter awaits each yielded value, while the former does not. js Array.fromAsync(createAsyncIter(), (element) => element).then((array) => console.log(array), ); // [1, 2, 3] Comparison with Promise.all() Array.fromAsync() awaits each value yielded from the object sequentially. Promise.all() awaits all values concurrently. js function* makeIterableOfPromises() { for (let i = 0; i < 5; i++) { yield new Promise((resolve) => setTimeout(resolve, 100)); } } (async () => { console.time("Array.fromAsync() time"); await Array.fromAsync(makeIterableOfPromises()); console.timeEnd("Array.fromAsync() time"); // Array.fromAsync() time: 503.610ms console.time("Promise.all() time"); await Promise.all(makeIterableOfPromises()); console.timeEnd("Promise.all() time"); // Promise.all() time: 101.728ms })(); No error handling for sync iterables Similar to for await...of , if the object being iterated is a sync iterable, and an error is thrown while iterating, the return() method of the underlying iterator will not be called, so the iterator is not closed. js function* generatorWithRejectedPromises() { try { yield 0; yield Promise.reject(new Error("error")); } finally { console.log("called finally"); } } (async () => { try { await Array.fromAsync(generatorWithRejectedPromises()); } catch (e) { console.log("caught", e); } })(); // caught Error: error // No "called finally" message If you need to close the iterator, you need to use a for...of loop instead, and await each value yourself. js (async () => { const arr = []; try { for (const val of generatorWithRejectedPromises()) { arr.push(await val); } } catch (e) { console.log("caught", e); } })(); // called finally // caught 3 Specifications Specification ES Array.fromAsync # sec-array.fromAsync Browser compatibility Loading… See also Polyfill of Array.fromAsync in core-js Indexed collections guide Array Array() Array.of() Array.from() for await...of Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .