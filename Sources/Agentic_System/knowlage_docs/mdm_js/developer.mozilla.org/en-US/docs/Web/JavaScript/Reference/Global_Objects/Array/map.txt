Array.prototype.map() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array map() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Array.prototype.map() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [1, 4, 9, 16]; // Pass a function to map const mapped = array.map((x) => x * 2); console.log(mapped); // Expected output: Array [2, 8, 18, 32] Syntax js map(callbackFn) map(callbackFn, thisArg) Parameters callbackFn A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array map() was called upon. thisArg Optional A value to use as this when executing callbackFn . See iterative methods . Return value A new array with each element being the result of the callback function. Description The map() method is an iterative method . It calls a provided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. callbackFn is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays . The map() method is generic . It only expects the this value to have a length property and integer-keyed properties. Since map builds a new array, calling it without using the returned array is an anti-pattern; use forEach or for...of instead. Examples Mapping an array of numbers to an array of square roots The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array. js const numbers = [1, 4, 9]; const roots = numbers.map((num) => Math.sqrt(num)); // roots is now [1, 2, 3] // numbers is still [1, 4, 9] Using map to reformat objects in an array The following code takes an array of objects and creates a new array containing the newly reformatted objects. js const kvArray = [ { key: 1, value: 10 }, { key: 2, value: 20 }, { key: 3, value: 30 }, ]; const reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value })); console.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }] console.log(kvArray); // [ // { key: 1, value: 10 }, // { key: 2, value: 20 }, // { key: 3, value: 30 } // ] Using parseInt() with map() It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider: js ["1", "2", "3"].map(parseInt); While one might expect [1, 2, 3] , the actual result is [1, NaN, NaN] . parseInt is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, Array.prototype.map passes 3 arguments: the element, the index, and the array. The third argument is ignored by parseInt — but not the second one! This is the source of possible confusion. Here is a concise example of the iteration steps: js /* first iteration (index is 0): */ parseInt("1", 0); // 1 /* second iteration (index is 1): */ parseInt("2", 1); // NaN /* third iteration (index is 2): */ parseInt("3", 2); // NaN To solve this, define another function that only takes one argument: js ["1", "2", "3"].map((str) => parseInt(str, 10)); // [1, 2, 3] You can also use the Number function, which only takes one argument: js ["1", "2", "3"].map(Number); // [1, 2, 3] // But unlike parseInt(), Number() will also return a float or (resolved) exponential notation: ["1.1", "2.2e2", "3e300"].map(Number); // [1.1, 220, 3e+300] // For comparison, if we use parseInt() on the array above: ["1.1", "2.2e2", "3e300"].map((str) => parseInt(str, 10)); // [1, 2, 3] See A JavaScript optional argument hazard by Allen Wirfs-Brock for more discussions. Mapped array contains undefined When undefined or nothing is returned, the resulting array contains undefined . If you want to delete the element instead, chain a filter() method, or use the flatMap() method and return an empty array to signify deletion. js const numbers = [1, 2, 3, 4]; const filteredNumbers = numbers.map((num, index) => { if (index < 3) { return num; } }); // index goes from 0, so the filterNumbers are 1,2,3 and undefined. // filteredNumbers is [1, 2, 3, undefined] // numbers is still [1, 2, 3, 4] Side-effectful mapping The callback can have side effects. js const cart = [5, 15, 25]; let total = 0; const withTax = cart.map((cost) => { total += cost; return cost * 1.2; }); console.log(withTax); // [6, 18, 30] console.log(total); // 45 This is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice. js const cart = [5, 15, 25]; const total = cart.reduce((acc, cost) => acc + cost, 0); const withTax = cart.map((cost) => cost * 1.2); Sometimes this pattern goes to its extreme and the only useful thing that map() does is causing side effects. js const products = [ { name: "sports car" }, { name: "laptop" }, { name: "phone" }, ]; products.map((product) => { product.price = 100; }); As mentioned previously, this is an anti-pattern. If you don't use the return value of map() , use forEach() or a for...of loop instead. js products.forEach((product) => { product.price = 100; }); Or, if you want to create a new array instead: js const productsWithPrice = products.map((product) => ({ ...product, price: 100, })); Using the third argument of callbackFn The array argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses filter() to extract the positive values and then uses map() to create a new array where each element is the average of its neighbors and itself. js const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6]; const averaged = numbers .filter((num) => num > 0) .map((num, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. const prev = arr[idx - 1]; const next = arr[idx + 1]; let count = 1; let total = num; if (prev !== undefined) { count++; total += prev; } if (next !== undefined) { count++; total += next; } const average = total / count; // Keep two decimal places return Math.round(average * 100) / 100; }); console.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4] The array argument is not the array that is being built — there is no way to access the array being built from the callback function. Using map() on sparse arrays A sparse array remains sparse after map() . The indices of empty slots are still empty in the returned array, and the callback function won't be called on them. js console.log( [1, , 3].map((x, index) => { console.log(`Visit ${index}`); return x * 2; }), ); // Visit 0 // Visit 2 // [2, empty, 6] Calling map() on non-array objects The map() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length . js const arrayLike = { length: 3, 0: 2, 1: 3, 2: 4, 3: 5, // ignored by map() since length is 3 }; console.log(Array.prototype.map.call(arrayLike, (x) => x ** 2)); // [ 4, 9, 16 ] This example shows how to iterate through a collection of objects collected by querySelectorAll . This is because querySelectorAll returns a NodeList (which is a collection of objects). In this case, we return all the selected option s' values on the screen: js const elems = document.querySelectorAll("select option:checked"); const values = Array.prototype.map.call(elems, ({ value }) => value); You can also use Array.from() to transform elems to an array, and then access the map() method. Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.map Browser compatibility Loading… See also Polyfill of Array.prototype.map in core-js es-shims polyfill of Array.prototype.map Indexed collections guide Array Array.prototype.forEach() Array.from() TypedArray.prototype.map() Map Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .