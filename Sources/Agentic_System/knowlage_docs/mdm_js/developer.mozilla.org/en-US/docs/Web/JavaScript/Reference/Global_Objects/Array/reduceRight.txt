Array.prototype.reduceRight() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array reduceRight() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Array.prototype.reduceRight() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The reduceRight() method of Array instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value. See also Array.prototype.reduce() for left-to-right. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [ [0, 1], [2, 3], [4, 5], ]; const result = array.reduceRight((accumulator, currentValue) => accumulator.concat(currentValue), ); console.log(result); // Expected output: Array [4, 5, 2, 3, 0, 1] Syntax js reduceRight(callbackFn) reduceRight(callbackFn, initialValue) Parameters callbackFn A function to execute for each element in the array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn . For the last invocation, the return value becomes the return value of reduceRight() . The function is called with the following arguments: accumulator The value resulting from the previous call to callbackFn . On the first call, its value is initialValue if the latter is specified; otherwise its value is the last element of the array. currentValue The value of the current element. On the first call, its value is the last element if initialValue is specified; otherwise its value is the second-to-last element. currentIndex The index position of currentValue in the array. On the first call, its value is array.length - 1 if initialValue is specified, otherwise array.length - 2 . array The array reduceRight() was called upon. initialValue Optional Value to use as accumulator to the first call of the callbackFn . If no initial value is supplied, the last element in the array will be used and skipped. Calling reduceRight() on an empty array without an initial value creates a TypeError . Return value The value that results from the reduction. Description The reduceRight() method is an iterative method . It runs a "reducer" callback function over all elements in the array, in descending-index order, and accumulates them into a single value. Read the iterative methods section for more information about how these methods work in general. callbackFn is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays . Unlike other iterative methods , reduceRight() does not accept a thisArg argument. callbackFn is always called with undefined as this , which gets substituted with globalThis if callbackFn is non-strict. The reduceRight() method is generic . It only expects the this value to have a length property and integer-keyed properties. All caveats about reduce discussed in when to not use reduce() apply to reduceRight as well. Because JavaScript has no lazy evaluation semantics, there is no performance difference between reduce and reduceRight . Examples How reduceRight() works without an initial value The call to the reduceRight callbackFn would look something like this: js arr.reduceRight((accumulator, currentValue, index, array) => { // … }); The first time the function is called, the accumulator and currentValue can be one of two values. If an initialValue was provided in the call to reduceRight , then accumulator will be equal to initialValue and currentValue will be equal to the last value in the array. If no initialValue was provided, then accumulator will be equal to the last value in the array and currentValue will be equal to the second-to-last value. If the array is empty and no initialValue was provided, TypeError would be thrown. If the array has only one element (regardless of position) and no initialValue was provided, or if initialValue is provided but the array is empty, the solo value would be returned without calling callbackFn . Some example run-throughs of the function would look like this: js [0, 1, 2, 3, 4].reduceRight( (accumulator, currentValue, index, array) => accumulator + currentValue, ); The callback would be invoked four times, with the arguments and return values in each call being as follows: accumulator currentValue index Return value First call 4 3 3 7 Second call 7 2 2 9 Third call 9 1 1 10 Fourth call 10 0 0 10 The array parameter never changes through the process — it's always [0, 1, 2, 3, 4] . The value returned by reduceRight would be that of the last callback invocation ( 10 ). How reduceRight() works with an initial value Here we reduce the same array using the same algorithm, but with an initialValue of 10 passed as the second argument to reduceRight() : js [0, 1, 2, 3, 4].reduceRight( (accumulator, currentValue, index, array) => accumulator + currentValue, 10, ); accumulator currentValue index Return value First call 10 4 4 14 Second call 14 3 3 17 Third call 17 2 2 19 Fourth call 19 1 1 20 Fifth call 20 0 0 20 The value returned by reduceRight this time would be, of course, 20 . Sum up all values within an array js const sum = [0, 1, 2, 3].reduceRight((a, b) => a + b); // sum is 6 Run a list of asynchronous functions with callbacks in series each passing their results to the next js const waterfall = (...functions) => (callback, ...args) => functions.reduceRight( (composition, fn) => (...results) => fn(composition, ...results), callback, )(...args); const randInt = (max) => Math.floor(Math.random() * max); const add5 = (callback, x) => { setTimeout(callback, randInt(1000), x + 5); }; const mul3 = (callback, x) => { setTimeout(callback, randInt(1000), x * 3); }; const sub2 = (callback, x) => { setTimeout(callback, randInt(1000), x - 2); }; const split = (callback, x) => { setTimeout(callback, randInt(1000), x, x); }; const add = (callback, x, y) => { setTimeout(callback, randInt(1000), x + y); }; const div4 = (callback, x) => { setTimeout(callback, randInt(1000), x / 4); }; const computation = waterfall(add5, mul3, sub2, split, add, div4); computation(console.log, 5); // Logs 14 // same as: const computation2 = (input, callback) => { const f6 = (x) => div4(callback, x); const f5 = (x, y) => add(f6, x, y); const f4 = (x) => split(f5, x); const f3 = (x) => sub2(f4, x); const f2 = (x) => mul3(f3, x); add5(f2, input); }; Difference between reduce and reduceRight js const a = ["1", "2", "3", "4", "5"]; const left = a.reduce((prev, cur) => prev + cur); const right = a.reduceRight((prev, cur) => prev + cur); console.log(left); // "12345" console.log(right); // "54321" Defining composable functions Function composition is a mechanism for combining functions, in which the output of each function is passed into the next one, and the output of the last function is the final result. In this example we use reduceRight() to implement function composition. See also Function composition on Wikipedia. js const compose = (...args) => (value) => args.reduceRight((acc, fn) => fn(acc), value); // Increment passed number const inc = (n) => n + 1; // Doubles the passed value const double = (n) => n * 2; // using composition function console.log(compose(double, inc)(2)); // 6 // using composition function console.log(compose(inc, double)(2)); // 5 Using reduceRight() with sparse arrays reduceRight() skips missing elements in sparse arrays, but it does not skip undefined values. js console.log([1, 2, , 4].reduceRight((a, b) => a + b)); // 7 console.log([1, 2, undefined, 4].reduceRight((a, b) => a + b)); // NaN Calling reduceRight() on non-array objects The reduceRight() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length . js const arrayLike = { length: 3, 0: 2, 1: 3, 2: 4, 3: 99, // ignored by reduceRight() since length is 3 }; console.log(Array.prototype.reduceRight.call(arrayLike, (x, y) => x - y)); // -1, which is 4 - 3 - 2 Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.reduceright Browser compatibility Loading… See also Polyfill of Array.prototype.reduceRight in core-js es-shims polyfill of Array.prototype.reduceRight Indexed collections guide Array Array.prototype.map() Array.prototype.flat() Array.prototype.flatMap() Array.prototype.reduce() TypedArray.prototype.reduceRight() Object.groupBy() Map.groupBy() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .