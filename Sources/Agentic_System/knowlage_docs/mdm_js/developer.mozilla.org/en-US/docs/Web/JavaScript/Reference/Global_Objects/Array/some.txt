Array.prototype.some() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array some() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Array.prototype.some() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The some() method of Array instances returns true if it finds one element in the array that satisfies the provided testing function. Otherwise, it returns false . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const array = [1, 2, 3, 4, 5]; // Checks whether an element is even const even = (element) => element % 2 === 0; console.log(array.some(even)); // Expected output: true Syntax js some(callbackFn) some(callbackFn, thisArg) Parameters callbackFn A function to execute for each element in the array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array some() was called upon. thisArg Optional A value to use as this when executing callbackFn . See iterative methods . Return value false unless callbackFn returns a truthy value for an array element, in which case true is immediately returned. Description The some() method is an iterative method . It calls a provided callbackFn function once for each element in an array, until the callbackFn returns a truthy value. If such an element is found, some() immediately returns true and stops iterating through the array. Otherwise, if callbackFn returns a falsy value for all elements, some() returns false . Read the iterative methods section for more information about how these methods work in general. some() acts like the "there exists" quantifier in mathematics. In particular, for an empty array, it returns false for any condition. callbackFn is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays . some() does not mutate the array on which it is called, but the function provided as callbackFn can. Note, however, that the length of the array is saved before the first invocation of callbackFn . Therefore: callbackFn will not visit any elements added beyond the array's initial length when the call to some() began. Changes to already-visited indexes do not cause callbackFn to be invoked on them again. If an existing, yet-unvisited element of the array is changed by callbackFn , its value passed to the callbackFn will be the value at the time that element gets visited. Deleted elements are not visited. Warning: Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases). The some() method is generic . It only expects the this value to have a length property and integer-keyed properties. Examples Testing value of array elements The following example tests whether any element in the array is bigger than 10. js function isBiggerThan10(element, index, array) { return element > 10; } [2, 5, 8, 1, 4].some(isBiggerThan10); // false [12, 5, 8, 1, 4].some(isBiggerThan10); // true Testing array elements using arrow functions Arrow functions provide a shorter syntax for the same test. js [2, 5, 8, 1, 4].some((x) => x > 10); // false [12, 5, 8, 1, 4].some((x) => x > 10); // true Checking whether a value exists in an array To mimic the function of the includes() method, this custom function returns true if the element exists in the array: js const fruits = ["apple", "banana", "mango", "guava"]; function checkAvailability(arr, val) { return arr.some((arrVal) => val === arrVal); } checkAvailability(fruits, "grapefruit"); // false checkAvailability(fruits, "banana"); // true Converting any value to Boolean js const TRUTHY_VALUES = [true, "true", 1]; function getBoolean(value) { if (typeof value === "string") { value = value.toLowerCase().trim(); } return TRUTHY_VALUES.some((t) => t === value); } getBoolean(false); // false getBoolean("false"); // false getBoolean(1); // true getBoolean("true"); // true Using the third argument of callbackFn The array argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses filter() to extract the positive values and then uses some() to check whether the array is strictly increasing. js const numbers = [3, -1, 1, 4, 1, 5]; const isIncreasing = !numbers .filter((num) => num > 0) .some((num, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. if (idx === 0) return false; return num <= arr[idx - 1]; }); console.log(isIncreasing); // false Using some() on sparse arrays some() will not run its predicate on empty slots. js console.log([1, , 3].some((x) => x === undefined)); // false console.log([1, , 1].some((x) => x !== 1)); // false console.log([1, undefined, 1].some((x) => x !== 1)); // true Calling some() on non-array objects The some() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length until they all have been accessed or callbackFn returns true . js const arrayLike = { length: 3, 0: "a", 1: "b", 2: "c", 3: 3, // ignored by some() since length is 3 }; console.log(Array.prototype.some.call(arrayLike, (x) => typeof x === "number")); // false Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.some Browser compatibility Loading… See also Polyfill of Array.prototype.some in core-js es-shims polyfill of Array.prototype.some Indexed collections guide Array Array.prototype.every() Array.prototype.forEach() Array.prototype.find() Array.prototype.includes() TypedArray.prototype.some() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 28, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .