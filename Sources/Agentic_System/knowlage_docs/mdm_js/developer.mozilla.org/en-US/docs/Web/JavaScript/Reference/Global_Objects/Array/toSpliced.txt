Array.prototype.toSpliced() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Array toSpliced() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 한국어 中文 (简体) Array.prototype.toSpliced() Baseline 2023 Newly available Since ⁨July 2023⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The toSpliced() method of Array instances is the copying version of the splice() method. It returns a new array with some elements removed and/or replaced at a given index. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js toSpliced(start) toSpliced(start, skipCount) toSpliced(start, skipCount, item1) toSpliced(start, skipCount, item1, item2) toSpliced(start, skipCount, item1, item2, /* …, */ itemN) Parameters start Zero-based index at which to start changing the array, converted to an integer . Negative index counts back from the end of the array — if -array.length <= start < 0 , start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length , no element will be deleted, but the method will behave as an adding function, adding as many elements as provided. skipCount Optional An integer indicating the number of elements in the array to remove (or, to skip) from start . If skipCount is omitted, or if its value is greater than or equal to the number of elements after the position specified by start , then all the elements from start to the end of the array will be deleted. However, if you wish to pass any itemN parameter, you should pass Infinity as skipCount to delete all elements after start , because an explicit undefined gets converted to 0 . If skipCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below). item1 , …, itemN Optional The elements to add to the array, beginning from start . If you do not specify any elements, toSpliced() will only remove elements from the array. Return value A new array that consists of all elements before start , item1 , item2 , …, itemN , and all elements after start + skipCount . Description The toSpliced() method, like splice() , does multiple things at once: it removes the given number of elements from the array, starting at a given index, and then inserts the given elements at the same index. However, it returns a new array instead of modifying the original array. The deleted elements therefore are not returned from this method, but they remain accessible in the original array. The toSpliced() method never produces a sparse array . If the source array is sparse, the empty slots will be replaced with undefined in the new array. The toSpliced() method is generic . It only expects the this value to have a length property and integer-keyed properties. Examples Deleting, adding, and replacing elements You can use toSpliced() to delete, add, and replace elements in an array and create a new array more efficiently than using slice() and concat() . js const months = ["Jan", "Mar", "Apr", "May"]; // Inserting an element at index 1 const months2 = months.toSpliced(1, 0, "Feb"); console.log(months2); // ["Jan", "Feb", "Mar", "Apr", "May"] // Deleting two elements starting from index 2 const months3 = months2.toSpliced(2, 2); console.log(months3); // ["Jan", "Feb", "May"] // Replacing one element at index 1 with two new elements const months4 = months3.toSpliced(1, 1, "Feb", "Mar"); console.log(months4); // ["Jan", "Feb", "Mar", "May"] // Original array is not modified console.log(months); // ["Jan", "Mar", "Apr", "May"] Using toSpliced() on sparse arrays The toSpliced() method always creates a dense array. js const arr = [1, , 3, 4, , 6]; console.log(arr.toSpliced(1, 2)); // [1, 4, undefined, 6] Calling toSpliced() on non-array objects The toSpliced() method reads the length property of this . It then reads the integer-keyed properties needed and writes them into the new array. js const arrayLike = { length: 3, unrelated: "foo", 0: 5, 2: 4, }; console.log(Array.prototype.toSpliced.call(arrayLike, 0, 1, 2, 3)); // [2, 3, undefined, 4] Specifications Specification ECMAScript® 2026 Language Specification # sec-array.prototype.tospliced Browser compatibility Loading… See also Polyfill of Array.prototype.toSpliced in core-js es-shims polyfill of Array.prototype.toSpliced Array.prototype.splice() Array.prototype.toReversed() Array.prototype.toSorted() Array.prototype.with() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Array Constructor Array() Static methods from() fromAsync() isArray() of() Static properties [Symbol .species] Instance methods at() concat() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() flat() flatMap() forEach() includes() indexOf() join() keys() lastIndexOf() map() pop() push() reduce() reduceRight() reverse() shift() slice() some() sort() splice() toLocaleString() toReversed() toSorted() toSpliced() toString() unshift() values() with() [Symbol .iterator]() Instance properties length [Symbol .unscopables] Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .