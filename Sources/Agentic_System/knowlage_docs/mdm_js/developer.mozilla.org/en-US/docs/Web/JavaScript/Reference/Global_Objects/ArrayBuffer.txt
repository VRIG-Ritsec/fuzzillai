ArrayBuffer - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects ArrayBuffer Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) ArrayBuffer Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The ArrayBuffer object is used to represent a generic raw binary data buffer. It is an array of bytes, often referred to in other languages as a "byte array". You cannot directly manipulate the contents of an ArrayBuffer ; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer. The ArrayBuffer() constructor creates a new ArrayBuffer of the given length in bytes. You can also get an array buffer from existing data, for example, from a Base64 string or from a local file . ArrayBuffer is a transferable object . In this article Description Constructor Static properties Static methods Instance properties Instance methods Examples Specifications Browser compatibility See also Description Resizing ArrayBuffers ArrayBuffer objects can be made resizable by including the maxByteLength option when calling the ArrayBuffer() constructor. You can query whether an ArrayBuffer is resizable and what its maximum size is by accessing its resizable and maxByteLength properties, respectively. You can assign a new size to a resizable ArrayBuffer with a resize() call. New bytes are initialized to 0. These features make resizing ArrayBuffer s more efficient — otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (Wasm linear memory can be resized with WebAssembly.Memory.prototype.grow() ). Transferring ArrayBuffers ArrayBuffer objects can be transferred between different execution contexts, like Web Workers or Service Workers , using the structured clone algorithm . This is done by passing the ArrayBuffer as a transferable object in a call to Worker.postMessage() or ServiceWorker.postMessage() . In pure JavaScript, you can also transfer the ownership of memory from one ArrayBuffer to another using its transfer() or transferToFixedLength() method. When an ArrayBuffer is transferred, its original copy becomes detached — this means it is no longer usable. At any moment, there will only be one copy of the ArrayBuffer that actually has access to the underlying memory. Detached buffers have the following behaviors: byteLength becomes 0 (in both the buffer and the associated typed array views). Methods, such as resize() and slice() , throw a TypeError when invoked. The associated typed array views' methods also throw a TypeError . You can check whether an ArrayBuffer is detached by its detached property. Constructor ArrayBuffer() Creates a new ArrayBuffer object. Static properties ArrayBuffer[Symbol.species] The constructor function that is used to create derived objects. Static methods ArrayBuffer.isView() Returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView . Returns false otherwise. Instance properties These properties are defined on ArrayBuffer.prototype and shared by all ArrayBuffer instances. ArrayBuffer.prototype.byteLength The size, in bytes, of the ArrayBuffer . This is established when the array is constructed and can only be changed using the ArrayBuffer.prototype.resize() method if the ArrayBuffer is resizable. ArrayBuffer.prototype.constructor The constructor function that created the instance object. For ArrayBuffer instances, the initial value is the ArrayBuffer constructor. ArrayBuffer.prototype.detached Read-only. Returns true if the ArrayBuffer has been detached (transferred), or false if not. ArrayBuffer.prototype.maxByteLength The read-only maximum length, in bytes, that the ArrayBuffer can be resized to. This is established when the array is constructed and cannot be changed. ArrayBuffer.prototype.resizable Read-only. Returns true if the ArrayBuffer can be resized, or false if not. ArrayBuffer.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "ArrayBuffer" . This property is used in Object.prototype.toString() . Instance methods ArrayBuffer.prototype.resize() Resizes the ArrayBuffer to the specified size, in bytes. ArrayBuffer.prototype.slice() Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer 's bytes from begin (inclusive) up to end (exclusive). If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. ArrayBuffer.prototype.transfer() Creates a new ArrayBuffer with the same byte content as this buffer, then detaches this buffer. ArrayBuffer.prototype.transferToFixedLength() Creates a new non-resizable ArrayBuffer with the same byte content as this buffer, then detaches this buffer. Examples Creating an ArrayBuffer In this example, we create a 8-byte buffer with a Int32Array view referring to the buffer: js const buffer = new ArrayBuffer(8); const view = new Int32Array(buffer); Specifications Specification ECMAScript® 2026 Language Specification # sec-arraybuffer-objects Browser compatibility Loading… See also Polyfill of ArrayBuffer in core-js JavaScript typed arrays guide SharedArrayBuffer RangeError: invalid array length Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects ArrayBuffer Constructor ArrayBuffer() Static methods isView() Static properties [Symbol .species] Instance methods resize() slice() transfer() transferToFixedLength() Instance properties byteLength detached maxByteLength resizable Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .