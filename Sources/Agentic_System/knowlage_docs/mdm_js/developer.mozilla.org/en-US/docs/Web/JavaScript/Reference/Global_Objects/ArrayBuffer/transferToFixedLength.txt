ArrayBuffer.prototype.transferToFixedLength() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects ArrayBuffer transferToFixedLength() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 한국어 中文 (简体) ArrayBuffer.prototype.transferToFixedLength() Baseline 2024 Newly available Since ⁨March 2024⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The transferToFixedLength() method of ArrayBuffer instances creates a new non-resizable ArrayBuffer with the same byte content as this buffer, then detaches this buffer. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js transferToFixedLength() transferToFixedLength(newByteLength) Parameters newByteLength The byteLength of the new ArrayBuffer . Defaults to the byteLength of this ArrayBuffer . If newByteLength is smaller than the byteLength of this ArrayBuffer , the "overflowing" bytes are dropped. If newByteLength is larger than the byteLength of this ArrayBuffer , the extra bytes are filled with zeros. Return value A new ArrayBuffer object. Its contents are initialized to the contents of this ArrayBuffer , and extra bytes, if any, are filled with zeros. The new ArrayBuffer is always non-resizable. The original ArrayBuffer is detached. Exceptions TypeError Thrown if this ArrayBuffer is already detached, or if it can only be detached by designated operations. Currently, only certain web APIs are capable of creating ArrayBuffer objects with designated detaching methods, such as GPUBuffer.getMappedRange() and WebAssembly.Memory.buffer . Description Unlike transfer() , transferToFixedLength() always creates a non-resizable ArrayBuffer . This means newByteLength can be larger than the maxByteLength , even if this ArrayBuffer is resizable. See transferring ArrayBuffers for more information. Examples Transferring a resizable ArrayBuffer to fixed-length js const buffer = new ArrayBuffer(8, { maxByteLength: 16 }); const view = new Uint8Array(buffer); view[1] = 2; view[7] = 4; const buffer2 = buffer.transferToFixedLength(); console.log(buffer2.byteLength); // 8 console.log(buffer2.resizable); // false const view2 = new Uint8Array(buffer2); console.log(view2[1]); // 2 console.log(view2[7]); // 4 Using transferToFixedLength , newByteLength can be larger than the maxByteLength of the original ArrayBuffer . js const buffer = new ArrayBuffer(8, { maxByteLength: 16 }); const view = new Uint8Array(buffer); view[1] = 2; view[7] = 4; const buffer2 = buffer.transferToFixedLength(20); console.log(buffer2.byteLength); // 20 console.log(buffer2.resizable); // false const view2 = new Uint8Array(buffer2); console.log(view2[1]); // 2 console.log(view2[7]); // 4 Specifications Specification ECMAScript® 2026 Language Specification # sec-arraybuffer.prototype.transfertofixedlength Browser compatibility Loading… See also Polyfill of ArrayBuffer.prototype.transferToFixedLength in core-js es-shims polyfill of ArrayBuffer.prototype.transferToFixedLength ArrayBuffer ArrayBuffer.prototype.detached ArrayBuffer.prototype.transfer() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 21, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects ArrayBuffer Constructor ArrayBuffer() Static methods isView() Static properties [Symbol .species] Instance methods resize() slice() transfer() transferToFixedLength() Instance properties byteLength detached maxByteLength resizable Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .