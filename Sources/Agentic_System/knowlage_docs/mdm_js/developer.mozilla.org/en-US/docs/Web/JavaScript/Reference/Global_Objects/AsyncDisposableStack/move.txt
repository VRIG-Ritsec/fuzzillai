AsyncDisposableStack.prototype.move() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects AsyncDisposableStack move() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) AsyncDisposableStack.prototype.move() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The move() method of AsyncDisposableStack instances creates a new AsyncDisposableStack instance that contains the same disposers as this stack, and then marks this stack as disposed, without calling any disposers. In this article Syntax Examples Specifications Browser compatibility See also Syntax js move() Parameters None. Return value A new AsyncDisposableStack instance. Exceptions ReferenceError Thrown if the stack is already disposed. Examples Claiming ownership of a stack js async function consumeStack(stack) { await using newStack = stack.move(); // newStack now owns the disposers console.log(stack.disposed); // true console.log(newStack.disposed); // false // newStack is disposed here immediately before the function exits } const stack = new AsyncDisposableStack(); console.log(stack.disposed); // false await consumeStack(stack); console.log(stack.disposed); // true Allowing resources to be disposed within two code paths The major use case of move() is when you have one or more resources which could either be disposed right here or could be persisted for later use. In this case, you can put the resources in a AsyncDisposableStack and then call move() when you need to persist the resources for later usage. js class PluginHost { #disposed = false; #disposables; #channel; #socket; static async init() { // Create a AsyncDisposableStack that is disposed when init exits. // If construction succeeds, we move everything out of `stack` and into // `#disposables` to be disposed later. await using stack = new AsyncDisposableStack(); const channel = stack.use(await getChannel()); const socket = stack.use(await getSocket()); // If we made it here, then there were no errors during construction and // we can safely move the disposables out of `stack`. return new PluginHost(channel, socket, stack.move()); // If construction failed, then `stack` would be disposed before reaching // the line above, which would dispose `channel` and `socket` in turn. } constructor(channel, socket, disposables) { this.#channel = channel; this.#socket = socket; this.#disposables = disposables; } [Symbol.asyncDispose]() { if (this.#disposed) { return; } this.#disposed = true; // Put `this.#disposables` into a `using` variable, so it is automatically // disposed when the function exits. await using disposables = this.#disposables; // NOTE: we can free `#socket` and `#channel` here since they will be // disposed by the call to `disposables[Symbol.asyncDispose]()`, below. // This isn't strictly a requirement for every disposable, but is // good housekeeping since these objects will no longer be useable. this.#socket = undefined; this.#channel = undefined; this.#disposables = undefined; } } Specifications Specification ECMAScript Async Explicit Resource Management # sec-asyncdisposablestack.prototype.move Browser compatibility Loading… See also JavaScript resource management AsyncDisposableStack AsyncDisposableStack.prototype.disposeAsync() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 30, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects AsyncDisposableStack Constructor AsyncDisposableStack() Instance methods adopt() defer() disposeAsync() move() use() [Symbol .asyncDispose]() Instance properties disposed Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .