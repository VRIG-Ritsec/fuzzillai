AsyncGenerator.prototype.next() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects AsyncGenerator next() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) AsyncGenerator.prototype.next() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. Learn more See full compatibility Report feedback The next() method of AsyncGenerator instances returns the next value in the sequence. In this article Syntax Examples Specifications Browser compatibility See also Syntax js next() next(value) Parameters value Optional An optional value used to modify the internal state of the generator. A value passed to the next() method will be received by yield Return value A Promise which when resolved returns an Object with two properties: done A boolean value: true if the generator is past the end of its control flow. In this case value specifies the return value of the generator (which may be undefined). false if the generator is able to produce more values. value Any JavaScript value yielded or returned by the generator. Examples Using next() The following example shows a generator and the object that the next method returns: js // An async task. Pretend it's doing something more useful // in practice. function delayedValue(time, value) { return new Promise((resolve, reject) => { setTimeout(() => resolve(value), time); }); } async function* createAsyncGenerator() { yield delayedValue(500, 1); yield delayedValue(500, 2); yield delayedValue(500, 3); } const asyncGen = createAsyncGenerator(); asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false } asyncGen.next().then((res) => console.log(res)); // { value: 2, done: false } asyncGen.next().then((res) => console.log(res)); // { value: 3, done: false } asyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true } Sending values to the generator In this example, next is called with a value. Note: The first call does not log anything, because the generator was not yielding anything initially. js // An async task. Pretend it's doing something more useful // in practice. function sleep(time) { return new Promise((resolve, reject) => { setTimeout(resolve, time); }); } async function* createAsyncGenerator() { while (true) { await sleep(500); const value = yield; console.log(value); } } async function main() { const asyncGen = createAsyncGenerator(); // No log at this step: the first value sent through `next` is lost console.log(await asyncGen.next(1)); // { value: undefined, done: false } // Logs 2: the value sent through `next` console.log(await asyncGen.next(2)); // { value: undefined, done: false } } main(); Specifications Specification ECMAScript® 2026 Language Specification # sec-asyncgenerator-prototype-next Browser compatibility Loading… See also async function* Iterators and generators guide Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects AsyncGenerator Instance methods next() return() throw() Inheritance AsyncIterator Instance methods [Symbol .asyncDispose]() [Symbol .asyncIterator]() Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .