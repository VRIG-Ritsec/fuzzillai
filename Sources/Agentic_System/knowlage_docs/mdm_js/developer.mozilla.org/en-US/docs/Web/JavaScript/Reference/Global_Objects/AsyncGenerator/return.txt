AsyncGenerator.prototype.return() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects AsyncGenerator return() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) AsyncGenerator.prototype.return() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. Learn more See full compatibility Report feedback The return() method of AsyncGenerator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js asyncGeneratorInstance.return() asyncGeneratorInstance.return(value) Parameters value Optional The value to return. Return value A Promise which resolves with an Object with two properties: done A boolean value: true if the generator function's control flow has reached the end. false if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the return is captured in a try...finally and there are more yield expressions in the finally block. value The value that is given as an argument, or, if the yield expression is wrapped in a try...finally , the value yielded/returned from the finally block. Description The return() method, when called, can be seen as if a return value; statement is inserted in the generator's body at the current suspended position, where value is the value passed to the return() method. Therefore, in a typical flow, calling return(value) will return { done: true, value: value } . However, if the yield expression is wrapped in a try...finally block, the control flow doesn't exit the function body, but proceeds to the finally block instead. In this case, the value returned may be different, and done may even be false , if there are more yield expressions within the finally block. Examples Using return() The following example shows an async generator and the return method. js // An async task. Pretend it's doing something more useful // in practice. function delayedValue(time, value) { return new Promise((resolve, reject) => { setTimeout(() => resolve(value), time); }); } async function* createAsyncGenerator() { yield delayedValue(500, 1); yield delayedValue(500, 2); yield delayedValue(500, 3); } const asyncGen = createAsyncGenerator(); asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false } asyncGen.return("foo").then((res) => console.log(res)); // { value: "foo", done: true } asyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true } Using return() once a generator is complete If no value argument is passed into the return() method, the promise will resolve as if the next() method has been called. In this example the generator has completed, so the value returned is undefined . return() can still be called after the generator is in a "completed" state, however the generator will stay in this state. js async function* createAsyncGenerator() { yield Promise.resolve(1); yield await Promise.resolve(2); yield 3; } const asyncGen = createAsyncGenerator(); asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false } asyncGen.next().then((res) => console.log(res)); // { value: 2, done: false } asyncGen.next().then((res) => console.log(res)); // { value: 3, done: false } // value is returned undefined, as no value is passed and generator is 'done' asyncGen.return().then((res) => console.log(res)); // { value: undefined, done: true } // we can still return a value once the generator is complete asyncGen.return(1).then((res) => console.log(res)); // { value: 1, done: true } Specifications Specification ECMAScript® 2026 Language Specification # sec-asyncgenerator-prototype-return Browser compatibility Loading… See also async function* Iterators and generators guide Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects AsyncGenerator Instance methods next() return() throw() Inheritance AsyncIterator Instance methods [Symbol .asyncDispose]() [Symbol .asyncIterator]() Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .