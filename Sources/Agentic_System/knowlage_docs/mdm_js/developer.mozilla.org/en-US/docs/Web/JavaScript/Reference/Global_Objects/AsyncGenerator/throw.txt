AsyncGenerator.prototype.throw() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects AsyncGenerator throw() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) AsyncGenerator.prototype.throw() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. Learn more See full compatibility Report feedback The throw() method of AsyncGenerator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself. In this article Syntax Examples Specifications Browser compatibility See also Syntax js asyncGeneratorInstance.throw(exception) Parameters exception The exception to throw. For debugging purposes, it is useful to make it an instanceof Error . Return value If the thrown error is not caught, it will return a Promise which rejects with the exception passed in. If the exception is caught by a try...catch and the generator resumes to yield more values, it will return a Promise which resolves with an Object with two properties: done A boolean value: true if the generator function's control flow has reached the end. false if the generator function is able to produce more values. value The value yielded from the next yield expression. Examples Using throw() The following example shows a generator and an error that is thrown using the throw method. An error can be caught by a try...catch block as usual. js // An async task. Pretend it's doing something more useful // in practice. function sleep(time) { return new Promise((resolve, reject) => { setTimeout(resolve, time); }); } async function* createAsyncGenerator() { while (true) { try { await sleep(500); yield 42; } catch (e) { console.error(e); } } } const asyncGen = createAsyncGenerator(); asyncGen.next(1).then((res) => console.log(res)); // { value: 42, done: false } asyncGen .throw(new Error("Something went wrong")) // Error: Something went wrong .then((res) => console.log(res)); // { value: 42, done: false } Specifications Specification ECMAScript® 2026 Language Specification # sec-asyncgenerator-prototype-throw Browser compatibility Loading… See also async function* Iterators and generators guide Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects AsyncGenerator Instance methods next() return() throw() Inheritance AsyncIterator Instance methods [Symbol .asyncDispose]() [Symbol .asyncIterator]() Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .