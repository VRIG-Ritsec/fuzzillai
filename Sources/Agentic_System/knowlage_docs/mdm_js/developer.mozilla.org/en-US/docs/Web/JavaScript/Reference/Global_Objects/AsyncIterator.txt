AsyncIterator - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects AsyncIterator Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) AsyncIterator Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨January 2020⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback An AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an [Symbol.asyncIterator]() method that returns the async iterator object itself, making the async iterator also async iterable . Note that AsyncIterator is not a global object, although it will be in the future with the async iterator helpers proposal . The AsyncIterator.prototype object shared by all built-in async iterators can be obtained with the following code: js const AsyncIteratorPrototype = Object.getPrototypeOf( Object.getPrototypeOf(Object.getPrototypeOf((async function* () {})())), ); In this article Description Instance methods Examples Specifications Browser compatibility See also Description Currently, the only built-in JavaScript async iterator is the AsyncGenerator object returned by async generator functions . There are some other built-in async iterators in web API, such as the one of a ReadableStream . Each of these async iterators have a distinct prototype object, which defines the next() method used by the particular async iterator. All of these prototype objects inherit from AsyncIterator.prototype , which provides an [Symbol.asyncIterator]() method that returns the async iterator object itself, making the async iterator also async iterable . Note: AsyncIterator.prototype does not implement [Symbol.iterator]() , so async iterators are not sync iterable by default. Instance methods AsyncIterator.prototype[Symbol.asyncDispose]() Calls and awaits the return() method of this , if it exists. This implements the async disposable protocol and allows it to be disposed when used with await using . AsyncIterator.prototype[Symbol.asyncIterator]() Returns the async iterator object itself. This allows async iterator objects to also be async iterable. Examples Using an async iterator as an async iterable All built-in async iterators are also async iterable, so you can use them in a for await...of loop: js const asyncIterator = (async function* () { yield 1; yield 2; yield 3; })(); (async () => { for await (const value of asyncIterator) { console.log(value); } })(); // Logs: 1, 2, 3 Specifications Specification ECMAScript® 2026 Language Specification # sec-asynciteratorprototype Browser compatibility Loading… See also async function* Iteration protocols Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 29, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects AsyncIterator Instance methods [Symbol .asyncDispose]() [Symbol .asyncIterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .