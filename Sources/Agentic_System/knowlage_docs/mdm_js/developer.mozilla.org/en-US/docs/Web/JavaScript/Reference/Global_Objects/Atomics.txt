Atomics - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Atomics Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Atomics Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨December 2021⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects. In this article Description Static properties Static methods Examples Specifications Browser compatibility See also Description Unlike most global objects, Atomics is not a constructor. You cannot use it with the new operator or invoke the Atomics object as a function. All properties and methods of Atomics are static (just like the Math object). Atomic operations When memory is shared, multiple threads can read and write the same data in memory. Atomic operations make sure that predictable values are written and read, that operations are finished before the next operation starts and that operations are not interrupted. Wait and notify The wait() and notify() methods are modeled on Linux futexes ("fast user-space mutex") and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs. Static properties Atomics[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "Atomics" . This property is used in Object.prototype.toString() . Static methods Atomics.add() Adds the provided value to the existing value at the specified index of the array. Returns the old value at that index. Atomics.and() Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index. Atomics.compareExchange() Stores a value at the specified index of the array, if it equals a value. Returns the old value. Atomics.exchange() Stores a value at the specified index of the array. Returns the old value. Atomics.isLockFree() An optimization primitive that can be used to determine whether to use locks or atomic operations. Returns true if an atomic operation on arrays of the given element size will be implemented using a hardware atomic operation (as opposed to a lock). Experts only. Atomics.load() Returns the value at the specified index of the array. Atomics.notify() Notifies agents that are waiting on the specified index of the array. Returns the number of agents that were notified. Atomics.or() Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index. Atomics.pause() Provides a micro-wait primitive that hints to the CPU that the caller is spinning while waiting on access to a shared resource. This allows the system to reduce the resources allocated to the core (such as power) or thread, without yielding the current thread. Atomics.store() Stores a value at the specified index of the array. Returns the value. Atomics.sub() Subtracts a value at the specified index of the array. Returns the old value at that index. Atomics.wait() Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either "ok" , "not-equal" , or "timed-out" . If waiting is not allowed in the calling agent then it throws an exception. (Most browsers will not allow wait() on the browser's main thread.) Atomics.waitAsync() Waits asynchronously (i.e., without blocking, unlike Atomics.wait ) on a shared memory location and returns an object representing the result of the operation. Atomics.xor() Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index. Examples Using Atomics js const sab = new SharedArrayBuffer(1024); const ta = new Uint8Array(sab); ta[0]; // 0 ta[0] = 5; // 5 Atomics.add(ta, 0, 12); // 5 Atomics.load(ta, 0); // 17 Atomics.and(ta, 0, 1); // 17 Atomics.load(ta, 0); // 1 Atomics.compareExchange(ta, 0, 5, 12); // 1 Atomics.load(ta, 0); // 1 Atomics.exchange(ta, 0, 12); // 1 Atomics.load(ta, 0); // 12 Atomics.isLockFree(1); // true Atomics.isLockFree(2); // true Atomics.isLockFree(3); // false Atomics.isLockFree(4); // true Atomics.or(ta, 0, 1); // 12 Atomics.load(ta, 0); // 13 Atomics.store(ta, 0, 12); // 12 Atomics.sub(ta, 0, 2); // 12 Atomics.load(ta, 0); // 10 Atomics.xor(ta, 0, 1); // 10 Atomics.load(ta, 0); // 11 Waiting and notifying Given a shared Int32Array : js const sab = new SharedArrayBuffer(1024); const int32 = new Int32Array(sab); A reading thread is sleeping and waiting on location 0 because the provided value matches what is stored at the provided index. The reading thread will not move on until the writing thread has called Atomics.notify() on position 0 of the provided typed array. Note that if, after being woken up, the value of location 0 has not been changed by the writing thread, the reading thread will not go back to sleep, but will continue on. js Atomics.wait(int32, 0, 0); console.log(int32[0]); // 123 A writing thread stores a new value and notifies the waiting thread once it has written: js console.log(int32[0]); // 0; Atomics.store(int32, 0, 123); Atomics.notify(int32, 0, 1); Specifications Specification ECMAScript® 2026 Language Specification # sec-atomics-object Browser compatibility Loading… See also ArrayBuffer JavaScript typed arrays guide Web Workers Shared Memory – a brief tutorial in the TC39 ecmascript-sharedmem proposal A Taste of JavaScript's New Parallel Primitives on hacks.mozilla.org (2016) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Atomics Static methods add() and() compareExchange() exchange() isLockFree() load() notify() or() pause() store() sub() wait() waitAsync() xor() Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .