Atomics.pause() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Atomics pause() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 Atomics.pause() Baseline 2025 Newly available Since ⁨April 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The Atomics.pause() static method provides a micro-wait primitive that hints to the CPU that the caller is spinning while waiting on access to a shared resource. This allows the system to reduce the resources allocated to the core (such as power) or thread, without yielding the current thread. pause() has no observable behavior other than timing. The exact behavior is dependent on the CPU architecture and the operating system. For example, in Intel x86, it may be a pause instruction as per Intel's optimization manual . It could be a no-op in certain platforms. In this article Syntax Examples Specifications Browser compatibility See also Syntax js Atomics.pause() Atomics.pause(durationHint) Parameters durationHint Optional An integer that an implementation may use to determine how long to wait. For a value n + 1 , an implementation waits at least as long as it does for a given value n . The exact number has no physical meaning. There may be an internal upper bound on the maximum amount of time paused on the order of tens to hundreds of nanoseconds. This can be used to implement a backoff strategy by increasing the durationHint passed in. There is no guarantee that an implementation will make use of this hint. Return value None ( undefined ). Exceptions TypeError Thrown if durationHint is not an integer or undefined . Examples Using Atomics.pause() Calling Atomics.wait() or Atomics.waitAsync() in order to wait for access to shared memory causes the thread to be scheduled out of the core and then back in again after the wait. This is efficient during times of high contention, where access to the shared memory could take some time. When contention is low, then it is often more efficient to poll on the lock without yielding the thread: this approach is known as busy waiting or spinlocking . The pause() method allows you to spinlock more efficiently while waiting, by providing a hint to the CPU about what the thread is doing, and hence its low need for resources. To cater for both conditions, a common approach is to first spinlock in the hope that contention is low, and then wait if the lock is not gained after a short time. If we acquired the lock via spinlocking already, then the wait() call will be a no-op. The example below shows how this approach can be used with Atomics.pause() and Atomics.wait() . Warning: Using spinlocking on the main thread is not recommended, as it will freeze the entire page. In general, unless designed very carefully, spinlocks may not actually be more performant than a regular wait. js // Imagine another thread also has access to this shared memory const sab = new SharedArrayBuffer(1024); const i32 = new Int32Array(sab); // Fast path: spin the CPU for a short while let spin = 0; do { if (Atomics.compareExchange(i32, 0, 0, 1) === 0) { break; } Atomics.pause(); spin++; } while (spin < 10); // Slow path: wait for the lock // This can only be called in a worker thread, // because the main thread cannot be blocked Atomics.wait(i32, 0, 1); Backoff strategies The durationHint parameter can be used to implement backoff strategies. For example, a thread can start with a small hint and increase it exponentially on each iteration. This is preferable to calling pause() many times because in un-JITed code, function calls themselves have a high overhead. Note: Implementations may not actually use durationHint at all and always wait for a constant time. js // Exponential backoff for (let hint = 1; hint < 1000; hint *= 2) { Atomics.pause(hint); } // Linear backoff for (let hint = 1; hint < 100; hint++) { Atomics.pause(hint); } Specifications Specification Atomics.pause # Atomics.pause Browser compatibility Loading… See also Atomics Atomics.wait() Atomics.waitAsync() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Atomics Static methods add() and() compareExchange() exchange() isLockFree() load() notify() or() pause() store() sub() wait() waitAsync() xor() Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .