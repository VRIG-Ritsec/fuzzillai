Atomics.wait() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Atomics wait() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 中文 (简体) Atomics.wait() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨December 2021⁩. Learn more See full compatibility Report feedback The Atomics.wait() static method verifies that a shared memory location contains a given value and if so sleeps, awaiting a wake-up notification or a time out. It returns a string which is "not-equal" if the memory location does not match the given value, "ok" if woken by Atomics.notify() , or "timed-out" if the timeout expires. Atomics.wait() and Atomics.notify() are used together to enable thread synchronization based on a value in shared memory. A thread can proceed immediately if the synchronization value has changed, or it can wait for notification from another thread when it reaches the synchronization point. This method only works with an Int32Array or BigInt64Array that views a SharedArrayBuffer . It is blocking and cannot be used in the main thread. For a non-blocking, asynchronous version of this method, see Atomics.waitAsync() . In this article Syntax Examples Specifications Browser compatibility See also Syntax js Atomics.wait(typedArray, index, value) Atomics.wait(typedArray, index, value, timeout) Parameters typedArray An Int32Array or BigInt64Array that views a SharedArrayBuffer . index The position in the typedArray to wait on. value The expected value to test. timeout Optional Time to wait in milliseconds. NaN (and values that get converted to NaN , such as undefined ) becomes Infinity . Negative values become 0 . Return value A string which is either "not-equal" , "ok" , or "timed-out" . "not-equal" is returned immediately if the initial value does not equal what is stored at index . "ok" is returned if woken up by a call to Atomics.notify() , regardless of whether the expected value has changed . "timed-out" is returned if a sleeping wait exceeds the specified timeout without being woken up by Atomics.notify() . Exceptions TypeError Thrown in one of the following cases: If typedArray is not an Int32Array or BigInt64Array that views a SharedArrayBuffer . If the current thread cannot be blocked (for example, because it's the main thread). RangeError Thrown if index is out of bounds in the typedArray . Examples Using wait() Given a shared Int32Array : js const sab = new SharedArrayBuffer(1024); const int32 = new Int32Array(sab); A reading thread is sleeping and waiting on location 0 because the provided value matches what is stored at the provided index . The reading thread will not move on until the writing thread has called Atomics.notify() on position 0 of the provided typedArray . Note that if, after being woken up, the value of location 0 has not been changed by the writing thread, the reading thread will not go back to sleep, but will continue on. js Atomics.wait(int32, 0, 0); console.log(int32[0]); // 123 A writing thread stores a new value and notifies the waiting thread once it has written: js console.log(int32[0]); // 0; Atomics.store(int32, 0, 123); Atomics.notify(int32, 0, 1); Specifications Specification ECMAScript® 2026 Language Specification # sec-atomics.wait Browser compatibility Loading… See also Atomics Atomics.waitAsync() Atomics.notify() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Atomics Static methods add() and() compareExchange() exchange() isLockFree() load() notify() or() pause() store() sub() wait() waitAsync() xor() Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .