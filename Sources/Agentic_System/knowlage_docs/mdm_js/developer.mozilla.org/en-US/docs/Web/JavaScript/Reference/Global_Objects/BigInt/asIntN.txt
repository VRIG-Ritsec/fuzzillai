BigInt.asIntN() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects BigInt asIntN() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) BigInt.asIntN() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2020⁩. Learn more See full compatibility Report feedback The BigInt.asIntN() static method truncates a BigInt value to the given number of least significant bits and returns that value as a signed integer. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const I64_CEIL = 2n ** 63n; console.log(BigInt.asIntN(64, I64_CEIL - 1n)); // 9223372036854775807n (2n ** 64n - 1n, the maximum non-wrapping value) console.log(BigInt.asIntN(64, I64_CEIL)); // -9223372036854775808n (wraps to min value) console.log(BigInt.asIntN(64, I64_CEIL + 1n)); // -9223372036854775807n (min value + 1n) console.log(BigInt.asIntN(64, I64_CEIL * 2n)); // 0n (wrapped around to zero) console.log(BigInt.asIntN(64, -I64_CEIL * -42n)); // 0n (also wraps on negative multiples) Syntax js BigInt.asIntN(bits, bigint) Parameters bits The amount of bits available for the returned BigInt. Should be an integer between 0 and 2 53 - 1, inclusive. bigint The BigInt value to truncate to fit into the supplied bits. Return value The value of bigint modulo 2 ** bits , as a signed integer. Exceptions RangeError Thrown if bits is negative or greater than 2 53 - 1. Description The BigInt.asIntN method truncates a BigInt value to the given number of bits, and interprets the result as a signed integer. For example, for BigInt.asIntN(3, 25n) , the value 25n is truncated to 1n : 25n = 00011001 (base 2) ^=== Use only the three remaining bits ===> 001 (base 2) = 1n If the leading bit of the remaining number is 1 , the result is negative. For example, BigInt.asIntN(4, 25n) yields -7n , because 1001 is the encoding of -7 under two's complement: 25n = 00011001 (base 2) ^==== Use only the four remaining bits ===> 1001 (base 2) = -7n Note: BigInt values are always encoded as two's complement in binary. Unlike similar language APIs such as Number.prototype.toExponential() , asIntN is a static property of BigInt , so you always use it as BigInt.asIntN() , rather than as a method of a BigInt value. Exposing asIntN() as a "standard library function" allows interop with asm.js . Examples Staying in 64-bit ranges The BigInt.asIntN() method can be useful to stay in the range of 64-bit arithmetic. js const max = 2n ** (64n - 1n) - 1n; BigInt.asIntN(64, max); // 9223372036854775807n BigInt.asIntN(64, max + 1n); // -9223372036854775808n // negative because the 64th bit of 2^63 is 1 Specifications Specification ECMAScript® 2026 Language Specification # sec-bigint.asintn Browser compatibility Loading… See also BigInt BigInt.asUintN() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects BigInt Constructor BigInt() Static methods asIntN() asUintN() Instance methods toLocaleString() toString() valueOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .