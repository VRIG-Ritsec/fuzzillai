BigInt.prototype.toString() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects BigInt toString() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 中文 (简体) BigInt.prototype.toString() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2020⁩. Learn more See full compatibility Report feedback The toString() method of BigInt values returns a string representing the specified BigInt value. The trailing "n" is not part of the string. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it console.log(1024n.toString()); // Expected output: "1024" console.log(1024n.toString(2)); // Expected output: "10000000000" console.log(1024n.toString(16)); // Expected output: "400" Syntax js toString() toString(radix) Parameters radix Optional An integer in the range 2 through 36 specifying the base to use for representing the BigInt value. Defaults to 10. Return value A string representing the specified BigInt value. Exceptions RangeError Thrown if radix is less than 2 or greater than 36. Description The BigInt object overrides the toString method of Object ; it does not inherit Object.prototype.toString() . For BigInt values, the toString() method returns a string representation of the value in the specified radix. For radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) a through f are used. If the specified BigInt value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the BigInt value preceded by a - sign, not the two's complement of the BigInt value. The toString() method requires its this value to be a BigInt primitive or wrapper object. It throws a TypeError for other this values without attempting to coerce them to BigInt values. Because BigInt doesn't have a [Symbol.toPrimitive]() method, JavaScript calls the toString() method automatically when a BigInt object is used in a context expecting a string, such as in a template literal . However, BigInt primitive values do not consult the toString() method to be coerced to strings — rather, they are directly converted using the same algorithm as the initial toString() implementation. js BigInt.prototype.toString = () => "Overridden"; console.log(`${1n}`); // "1" console.log(`${Object(1n)}`); // "Overridden" Examples Using toString() js 17n.toString(); // "17" 66n.toString(2); // "1000010" 254n.toString(16); // "fe" (-10n).toString(2); // "-1010" (-0xffn).toString(2); // "-11111111" Negative-zero BigInt There is no negative-zero BigInt as there are no negative zeros in integers. -0.0 is an IEEE floating-point concept that only appears in the JavaScript Number type. js (-0n).toString(); // "0" BigInt(-0).toString(); // "0" Specifications Specification ECMAScript® 2026 Language Specification # sec-bigint.prototype.tostring Browser compatibility Loading… See also BigInt.prototype.toLocaleString() BigInt.prototype.valueOf() Number.prototype.toString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects BigInt Constructor BigInt() Static methods asIntN() asUintN() Instance methods toLocaleString() toString() valueOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .