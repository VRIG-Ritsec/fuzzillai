DataView - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects DataView Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) DataView Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer , without having to care about the platform's endianness . In this article Description Constructor Instance properties Instance methods Examples Specifications Browser compatibility See also Description Endianness Multi-byte number formats are represented in memory differently depending on machine architecture — see Endianness for an explanation. DataView accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness. For example, WebAssembly memory is always little-endian, so you should use DataView instead of typed arrays to read and write multi-byte values. See WebAssembly.Memory for an example. js const littleEndian = (() => { const buffer = new ArrayBuffer(2); new DataView(buffer).setInt16(0, 256, true /* littleEndian */); // Int16Array uses the platform's endianness. return new Int16Array(buffer)[0] === 256; })(); console.log(littleEndian); // true or false Note: DataView defaults to big-endian read and write, but most platforms use little-endian. Constructor DataView() Creates a new DataView object. Instance properties These properties are defined on DataView.prototype and shared by all DataView instances. DataView.prototype.buffer Returns the ArrayBuffer referenced by the DataView . DataView.prototype.byteLength Returns the length (in bytes) of the DataView . DataView.prototype.byteOffset Returns the offset (in bytes) of the DataView from the start of its ArrayBuffer . DataView.prototype.constructor The constructor function that created the instance object. For DataView instances, the initial value is the DataView constructor. DataView.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "DataView" . This property is used in Object.prototype.toString() . Instance methods DataView.prototype.getBigInt64() Reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit signed integer. DataView.prototype.getBigUint64() Reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit unsigned integer. DataView.prototype.getFloat16() Reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit floating point number. DataView.prototype.getFloat32() Reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit floating point number. DataView.prototype.getFloat64() Reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit floating point number. DataView.prototype.getInt16() Reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit signed integer. DataView.prototype.getInt32() Reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit signed integer. DataView.prototype.getInt8() Reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit signed integer. DataView.prototype.getUint16() Reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit unsigned integer. DataView.prototype.getUint32() Reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit unsigned integer. DataView.prototype.getUint8() Reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit unsigned integer. DataView.prototype.setBigInt64() Takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this DataView . DataView.prototype.setBigUint64() Takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this DataView . DataView.prototype.setFloat16() Takes a number and stores it as a 16-bit float in the 2 bytes starting at the specified byte offset of this DataView . DataView.prototype.setFloat32() Takes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this DataView . DataView.prototype.setFloat64() Takes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this DataView . DataView.prototype.setInt16() Takes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this DataView . DataView.prototype.setInt32() Takes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this DataView . DataView.prototype.setInt8() Takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this DataView . DataView.prototype.setUint16() Takes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this DataView . DataView.prototype.setUint32() Takes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this DataView . DataView.prototype.setUint8() Takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this DataView . Examples Using DataView js const buffer = new ArrayBuffer(16); const view = new DataView(buffer, 0); view.setInt16(1, 42); view.getInt16(1); // 42 Specifications Specification ECMAScript® 2026 Language Specification # sec-dataview-objects Browser compatibility Loading… See also Polyfill of DataView in core-js ArrayBuffer SharedArrayBuffer Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 25, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects DataView Constructor DataView() Instance methods getBigInt64() getBigUint64() getFloat16() getFloat32() getFloat64() getInt8() getInt16() getInt32() getUint8() getUint16() getUint32() setBigInt64() setBigUint64() setFloat16() setFloat32() setFloat64() setInt8() setInt16() setInt32() setUint8() setUint16() setUint32() Instance properties buffer byteLength byteOffset Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .