Date.prototype.toLocaleTimeString() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Date toLocaleTimeString() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Date.prototype.toLocaleTimeString() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The toLocaleTimeString() method of Date instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat . Every time toLocaleTimeString is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a Intl.DateTimeFormat object and use its format() method, because a DateTimeFormat object remembers the arguments passed to it and may decide to cache a slice of the database, so future format calls can search for localization strings within a more constrained context. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it // Depending on timezone, your results will vary const event = new Date("August 19, 1975 23:15:30 GMT+00:00"); console.log(event.toLocaleTimeString("en-US")); // Expected output: "1:15:30 AM" console.log(event.toLocaleTimeString("it-IT")); // Expected output: "01:15:30" console.log(event.toLocaleTimeString("ar-EG")); // Expected output: "١٢:١٥:٣٠ ص" Syntax js toLocaleTimeString() toLocaleTimeString(locales) toLocaleTimeString(locales, options) Parameters The locales and options parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations that support the Intl.DateTimeFormat API , these parameters correspond exactly to the Intl.DateTimeFormat() constructor's parameters. Implementations without Intl.DateTimeFormat support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent. locales Optional A string with a BCP 47 language tag , or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor. In implementations without Intl.DateTimeFormat support, this parameter is ignored and the host's locale is usually used. options Optional An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. If dayPeriod , hour , minute , second , and fractionalSecondDigits are all undefined, then hour , minute , second will be set to "numeric" . In implementations without Intl.DateTimeFormat support, this parameter is ignored. See the Intl.DateTimeFormat() constructor for details on these parameters and how to use them. Return value A string representing the time portion of the given date according to language-specific conventions. In implementations with Intl.DateTimeFormat , this is equivalent to new Intl.DateTimeFormat(locales, options).format(date) , where options has been normalized as described above. Note: Most of the time, the formatting returned by toLocaleTimeString() is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of toLocaleTimeString() to hardcoded constants. Examples Using toLocaleTimeString() Basic use of this method without specifying a locale returns a formatted string in the default locale and with default options. js const date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0)); // toLocaleTimeString() without arguments depends on the implementation, // the default locale, and the default time zone console.log(date.toLocaleTimeString()); // "7:00:00 PM" if run in en-US locale with time zone America/Los_Angeles Checking for support for locales and options parameters The locales and options parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, toLocaleTimeString() always uses the system's locale, which may not be what you want. Because any implementation that supports the locales and options parameters must support the Intl API, you can check the existence of the latter for support: js function toLocaleTimeStringSupportsLocales() { return ( typeof Intl === "object" && !!Intl && typeof Intl.DateTimeFormat === "function" ); } Using locales This example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument: js const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)); // formats below assume the local time zone of the locale; // America/Los_Angeles for the US // US English uses 12-hour time with AM/PM console.log(date.toLocaleTimeString("en-US")); // "7:00:00 PM" // British English uses 24-hour time without AM/PM console.log(date.toLocaleTimeString("en-GB")); // "03:00:00" // Korean uses 12-hour time with AM/PM console.log(date.toLocaleTimeString("ko-KR")); // "오후 12:00:00" // Arabic in most Arabic speaking countries uses real Arabic digits console.log(date.toLocaleTimeString("ar-EG")); // "٧:٠٠:٠٠ م" // when requesting a language that may not be supported, such as // Balinese, include a fallback language, in this case Indonesian console.log(date.toLocaleTimeString(["ban", "id"])); // "11.00.00" Using options The results provided by toLocaleTimeString() can be customized using the options parameter: js const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)); // An application may want to use UTC and make that visible const options = { timeZone: "UTC", timeZoneName: "short" }; console.log(date.toLocaleTimeString("en-US", options)); // "3:00:00 AM GMT" // Sometimes even the US needs 24-hour time console.log(date.toLocaleTimeString("en-US", { hour12: false })); // "19:00:00" // Show only hours and minutes, use options with the default locale - use an empty array console.log( date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }), ); // "20:01" Specifications Specification ECMAScript® 2026 Language Specification # sec-date.prototype.tolocaletimestring ECMAScript® 2026 Internationalization API Specification # sup-date.prototype.tolocaletimestring Browser compatibility Loading… See also Intl.DateTimeFormat Date.prototype.toLocaleDateString() Date.prototype.toLocaleString() Date.prototype.toTimeString() Date.prototype.toString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Date Constructor Date() Static methods now() parse() UTC() Instance methods getDate() getDay() getFullYear() getHours() getMilliseconds() getMinutes() getMonth() getSeconds() getTime() getTimezoneOffset() getUTCDate() getUTCDay() getUTCFullYear() getUTCHours() getUTCMilliseconds() getUTCMinutes() getUTCMonth() getUTCSeconds() getYear() Deprecated setDate() setFullYear() setHours() setMilliseconds() setMinutes() setMonth() setSeconds() setTime() setUTCDate() setUTCFullYear() setUTCHours() setUTCMilliseconds() setUTCMinutes() setUTCMonth() setUTCSeconds() setYear() Deprecated toDateString() toISOString() toJSON() toLocaleDateString() toLocaleString() toLocaleTimeString() toString() toTemporalInstant() Experimental toTimeString() toUTCString() valueOf() [Symbol .toPrimitive]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .