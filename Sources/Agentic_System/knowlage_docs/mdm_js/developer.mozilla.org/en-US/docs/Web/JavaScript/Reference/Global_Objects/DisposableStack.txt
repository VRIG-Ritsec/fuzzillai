DisposableStack - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects DisposableStack Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) DisposableStack Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The DisposableStack object represents a stack of disposers to run when the stack itself is disposed. Disposer functions are executed in reverse order of registration, with strong error handling guarantees. Calling its move() method will transfer responsibility for calling the current registered disposers to a new DisposableStack and prevent registering any additional disposers. In this article Description Constructor Instance properties Instance methods Specifications Browser compatibility See also Description A DisposableStack is not exactly a "stack" in terms of its interface. It has several methods for pushing disposers to it, but it has no way to pop one disposer off. Rather, all disposers are popped and executed one-by-one when the stack is disposed. You register disposable resources to the DisposableStack using its use() , adopt() , or defer() methods. js using disposer = new DisposableStack(); const reader = disposer.use(stream.getReader()); Then, when the disposer goes out of scope, all resources registered to it are disposed in reverse order of registration, unless they have been moved out with move() . It is good practice to not extract the resource acquisition expression to a separate statement, no matter how long the expression is. You should always wrap the use() or adopt() call around the resource acquisition expression to ensure that the resource is registered to the stack immediately. js using disposer = new DisposableStack(); const reader = stream.getReader(); disposer.use(reader); Functionally, these two code snippets are equivalent. However, the first one is less error-prone because the resource is declared and registered in a single line. If someone puts more code between the second and third lines of the second snippet, an error could occur, causing the resource to leak. Constructor DisposableStack() Creates a new DisposableStack object. Instance properties These properties are defined on DisposableStack.prototype and shared by all DisposableStack instances. DisposableStack.prototype.constructor The constructor function that created the instance object. For DisposableStack instances, the initial value is the DisposableStack constructor. DisposableStack.prototype.disposed Read-only. Returns true if the DisposableStack has been disposed, or false if not. DisposableStack.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "DisposableStack" . This property is used in Object.prototype.toString() . Instance methods DisposableStack.prototype.adopt() Registers a value that doesn't implement the disposable protocol to the stack by providing a custom disposer function. DisposableStack.prototype.defer() Takes a callback function to be called when the stack is disposed. DisposableStack.prototype.dispose() Disposes this stack by calling all disposers registered to it in reverse order of registration. DisposableStack.prototype.move() Creates a new DisposableStack instance that contains the same disposers as this stack, and then marks this stack as disposed, without calling any disposers. DisposableStack.prototype.use() Registers a value that implements the disposable protocol to the stack. DisposableStack.prototype[Symbol.dispose] An alias for the dispose() method. Specifications Specification ECMAScript Async Explicit Resource Management # sec-disposablestack-objects Browser compatibility Loading… See also Polyfill of DisposableStack in core-js JavaScript resource management Symbol.dispose using AsyncDisposableStack Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 29, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects DisposableStack Constructor DisposableStack() Instance methods adopt() defer() dispose() move() use() [Symbol .dispose]() Instance properties disposed Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .