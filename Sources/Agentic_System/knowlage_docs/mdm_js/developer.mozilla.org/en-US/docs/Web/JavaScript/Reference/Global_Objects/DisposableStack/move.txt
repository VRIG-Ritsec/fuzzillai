DisposableStack.prototype.move() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects DisposableStack move() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) DisposableStack.prototype.move() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The move() method of DisposableStack instances creates a new DisposableStack instance that contains the same disposers as this stack, and then marks this stack as disposed, without calling any disposers. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js move() Parameters None. Return value A new DisposableStack instance. Exceptions ReferenceError Thrown if the stack is already disposed. Description The primary purpose of move() is to enable transferring responsibility for disposal out of the current scope. For example, your function can claim ownership of some resources and dispose them if an error occurs; if everything completes successfully, then you return these resources and transfer ownership to the caller. When using move() to transfer ownership, calling move() should be the very last step in your control flow, because there will be no owner in between your code dropping ownership via move() and the caller picking up ownership from the return value. js let resource1; function init() { using disposer = new DisposableStack(); resource1 = disposer.use(getResource1()); // ... // Drop ownership immediately before returning return disposer.move(); } // Pick up ownership immediately after returning using disposer = init(); js let resource1; function init() { using disposer = new DisposableStack(); resource1 = disposer.use(getResource1()); // ... const newDisposer = disposer.move(); // If someone adds code in between these lines and an error occurs, // there would be no owner to free resource1 return newDisposer; } using disposer = init(); Also be cautious with the following pattern, although using the "good" pattern may be very awkward in many cases: js function init() { using disposer = new DisposableStack(); const resource1 = disposer.use(getResource1()); // ... return { disposer: disposer.move(), resource1 }; } const { resource1, ...rest } = init(); // If someone adds code in between these lines and an error occurs, // there would be no owner to free resource1 using disposer = rest.disposer; move() can also be used for conditional disposal in cases where you may sometimes not want to dispose the resources at all. For example: js using disposer = new DisposableStack(); const server = disposer.use(makeServer()); await server.init(); if (server.ready) { // Successfully initialized server; it now should live through the rest // of the program. Drop its disposer and don't pick it up. It will no // longer be disposed at all. disposer.move(); } // If we reach the end of the scope without running disposer.move(), // then server isn't ready for any reason, and we dispose its resources // by disposing the disposer. Examples Claiming ownership of a stack js function consumeStack(stack) { using newStack = stack.move(); // newStack now owns the disposers console.log(stack.disposed); // true console.log(newStack.disposed); // false // newStack is disposed here immediately before the function exits } const stack = new DisposableStack(); console.log(stack.disposed); // false consumeStack(stack); console.log(stack.disposed); // true Allowing resources to be disposed within two code paths The major use case of move() is when you have one or more resources which could either be disposed right here or could be persisted for later use. In this case, you can put the resources in a DisposableStack and then call move() when you need to persist the resources for later usage. js class PluginHost { #disposed = false; #disposables; #channel; #socket; constructor() { // Create a DisposableStack that is disposed when the constructor exits. // If construction succeeds, we move everything out of `disposer` and into // `#disposables` to be disposed later. using disposer = new DisposableStack(); // Create an IPC adapter around process.send/process.on("message"). // When disposed, it unsubscribes from process.on("message"). this.#channel = disposer.use(new NodeProcessIpcChannelAdapter(process)); // Create a pseudo-websocket that sends and receives messages over // a NodeJS IPC channel. this.#socket = disposer.use(new NodePluginHostIpcSocket(this.#channel)); // If we made it here, then there were no errors during construction and // we can safely move the disposables out of `disposer` and into `#disposables`. this.#disposables = disposer.move(); // If construction failed, then `disposer` would be disposed before reaching // the line above. Event handlers would be removed, allowing `#channel` and // `#socket` to be GC'd. } [Symbol.dispose]() { if (this.#disposed) { return; } this.#disposed = true; // Put `this.#disposables` into a `using` variable, so it is automatically // disposed when the function exits. using disposables = this.#disposables; // NOTE: we can free `#socket` and `#channel` here since they will be // disposed by the call to `disposables[Symbol.dispose]()`, below. // This isn't strictly a requirement for every disposable, but is // good housekeeping since these objects will no longer be useable. this.#socket = undefined; this.#channel = undefined; this.#disposables = undefined; } } Specifications Specification ECMAScript Async Explicit Resource Management # sec-disposablestack.prototype.move Browser compatibility Loading… See also JavaScript resource management DisposableStack DisposableStack.prototype.dispose() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Aug 2, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects DisposableStack Constructor DisposableStack() Instance methods adopt() defer() dispose() move() use() [Symbol .dispose]() Instance properties disposed Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .