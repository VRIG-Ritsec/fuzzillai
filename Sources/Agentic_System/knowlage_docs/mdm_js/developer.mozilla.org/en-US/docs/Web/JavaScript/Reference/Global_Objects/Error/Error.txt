Error() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Error Error() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 中文 (简体) Error() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Error() constructor creates Error objects. In this article Syntax Examples Specifications Browser compatibility See also Syntax js new Error() new Error(message) new Error(message, options) new Error(message, fileName) new Error(message, fileName, lineNumber) Error() Error(message) Error(message, options) Error(message, fileName) Error(message, fileName, lineNumber) Note: Error() can be called with or without new . Both create a new Error instance. Parameters message Optional A human-readable description of the error. options Optional An object that has the following properties: cause Optional A value indicating the specific cause of the error, reflected in the cause property. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error. fileName Optional Non-standard The path to the file that raised this error, reflected in the fileName property. Defaults to the name of the file containing the code that called the Error() constructor. lineNumber Optional Non-standard The line number within the file on which the error was raised, reflected in the lineNumber property. Defaults to the line number containing the Error() constructor invocation. Examples Function call or new construction When Error is used like a function, that is without new , it will return an Error object. Therefore, a mere call to Error will produce the same output that constructing an Error object via the new keyword would. js const x = Error("I was created using a function call!"); // above has the same functionality as following const y = new Error('I was constructed via the "new" keyword!'); Rethrowing an error with a cause It is sometimes useful to catch an error and re-throw it with a new message. In this case you should pass the original error into the constructor for the new Error , as shown. js try { frameworkThatCanThrow(); } catch (err) { throw new Error("New error message", { cause: err }); } For a more detailed example see Error > Differentiate between similar errors . Omitting options argument JavaScript only tries to read options.cause if options is an object — this avoids ambiguity with the other non-standard Error(message, fileName, lineNumber) signature, which requires the second parameter to be a string. If you omit options , pass a primitive value as options , or pass an object without the cause property, then the created Error object will have no cause property. js // Omitting options const error1 = new Error("Error message"); console.log("cause" in error1); // false // Passing a primitive value const error2 = new Error("Error message", ""); console.log("cause" in error2); // false // Passing an object without a cause property const error3 = new Error("Error message", { details: "http error" }); console.log("cause" in error3); // false Specifications Specification ECMAScript® 2026 Language Specification # sec-error-constructor Browser compatibility Loading… See also Polyfill of Error with cause support in core-js es-shims polyfill of Error cause throw try...catch Error causes on v8.dev (2021) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Error Constructor Error() Static methods captureStackTrace() isError() Static properties stackTraceLimit Non-standard Instance methods toString() Instance properties cause columnNumber Non-standard fileName Non-standard lineNumber Non-standard message name stack Non-standard Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages AggregateError EvalError InternalError Non-standard RangeError ReferenceError SyntaxError TypeError URIError Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .