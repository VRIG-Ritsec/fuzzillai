Error.captureStackTrace() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Error captureStackTrace() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 Error.captureStackTrace() The Error.captureStackTrace() static method installs stack trace information on a provided object as the stack property. In this article Syntax Examples Specifications Browser compatibility See also Syntax js Error.captureStackTrace(object) Error.captureStackTrace(object, constructor) Parameters object The object on which to add the stack property. constructor Optional A function, typically the constructor where the object was created. When collecting the stack trace, all frames above the topmost call to this function, including that call, are left out of the stack trace. Return value None ( undefined ). The object is modified in-place with an extra own property called stack defined, whose string value follows the same format as Error.prototype.stack . This property is non-enumerable and configurable. In V8, it is a getter-setter pair. In SpiderMonkey and JavaScriptCore, it is a data property that is writable. Examples Using Error.captureStackTrace() The getStack() utility function returns the current stack trace at the point it is called, removing itself from the stack. This serves the same debugging purpose as console.trace() , but allows you to output the string elsewhere. Note that it does not construct an Error instance for this purpose, but installs stack on a plain object, which would be more efficient for our purposes. Normally, you would call Error.captureStackTrace on objects intended to be thrown as errors, as shown in the next example. js function getStack() { const obj = {}; if ("captureStackTrace" in Error) { // Avoid getStack itself in the stack trace Error.captureStackTrace(obj, getStack); } return obj.stack; } function foo() { console.log(getStack()); } foo(); // Error // at foo (<anonymous>:8:15) // at <anonymous>:11:1 Installing stack trace on a custom error object The main use case for Error.captureStackTrace() is to install a stack trace on a custom error object. Typically, you define custom errors by extending the Error class, which automatically makes the stack property available via inheritance. However, the problem with the default stack trace is that it includes the constructor call itself, which leaks implementation details. You can avoid this by using Error.captureStackTrace() , which allows the stack trace to be installed even for custom errors that do not inherit from Error . js class MyError extends Error { constructor(message, options) { super(message, options); if ("captureStackTrace" in Error) { // Avoid MyError itself in the stack trace Error.captureStackTrace(this, MyError); } } } const myError = new MyError("Something went wrong"); console.log(myError.stack); // Error: Something went wrong // at <anonymous>:8:17 Note that even if you don't call Error.captureStackTrace() here, some engines are still smart enough to avoid MyError in the stack trace if the constructor inherits from Error . Calling Error.captureStackTrace() is more important for custom errors that, for some reason, do not inherit from Error . js class MyError { constructor(message) { this.message = message; if ("captureStackTrace" in Error) { // Avoid MyError itself in the stack trace Error.captureStackTrace(this, MyError); } } } const myError = new MyError("Something went wrong"); console.log(myError.stack); // Error: Something went wrong // at <anonymous>:8:17 Specifications Specification Unknown specification # errorcapturestacktrace-1 Browser compatibility Loading… See also Error.prototype.stack Error.stackTraceLimit Stack trace API in the V8 docs Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Error Constructor Error() Static methods captureStackTrace() isError() Static properties stackTraceLimit Non-standard Instance methods toString() Instance properties cause columnNumber Non-standard fileName Non-standard lineNumber Non-standard message name stack Non-standard Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages AggregateError EvalError InternalError Non-standard RangeError ReferenceError SyntaxError TypeError URIError Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .