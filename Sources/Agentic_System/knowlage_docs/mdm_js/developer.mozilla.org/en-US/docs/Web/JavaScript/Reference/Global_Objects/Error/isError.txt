Error.isError() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Error isError() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 Error.isError() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The Error.isError() static method determines whether the passed value is an Error . In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js Error.isError(value) Parameters value The value to be checked. Return value true if value is an Error ; otherwise, false . Description Error.isError() checks if the passed value is an Error . It does so by performing a branded check for a private field initialized by the Error() constructor. This is the same mechanism used by Array.isArray() , which is in turn similar to the mechanism used by the in operator. It is a more robust alternative to instanceof Error because it avoids false positives and false negatives: Error.isError() rejects values that aren't actual Error instances, even if they have Error.prototype in their prototype chain — instanceof Error would accept these as it does check the prototype chain. Error.isError() accepts Error objects constructed in another realm — instanceof Error returns false for these because the identity of the Error constructor is different across realms. Error.isError() returns true for DOMException instances. This is because, although DOMException is not specified as a real subclass of Error (the Error constructor is not the prototype of the DOMException constructor), DOMException still behaves like Error for all branded checking purposes. Examples Using Error.isError() js // all following calls return true Error.isError(new Error()); Error.isError(new TypeError()); Error.isError(new DOMException()); try { 1 + 1n; } catch (e) { console.log(Error.isError(e)); // The operation threw a TypeError, so this returns true } // all following calls return false Error.isError(); Error.isError({}); Error.isError(null); Error.isError(undefined); Error.isError(17); Error.isError("Error"); Error.isError(true); Error.isError(false); // This is not an error, because the object does not have the private field // initialized by the Error constructor Error.isError({ __proto__: Error.prototype }); instanceof vs. Error.isError() When checking for Error instance, Error.isError() is preferred over instanceof because it works across realms. js const iframe = document.createElement("iframe"); document.body.appendChild(iframe); const xError = window.frames[window.frames.length - 1].Error; const error = new xError(); // Correctly checking for Error Error.isError(error); // true // The prototype of error is xError.prototype, which is a // different object from Error.prototype error instanceof Error; // false Normalizing caught errors You can use Error.isError() to detect if the caught value is an error and normalize it to an error object. js try { throw "Oops; this is not an Error object"; } catch (e) { if (!Error.isError(e)) { e = new Error(e); } console.error(e.message); } Specifications Specification ECMAScript® 2026 Language Specification # sec-error.iserror Browser compatibility Loading… See also Polyfill of Error.isError in core-js es-shims polyfill of Error.isError Error Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Error Constructor Error() Static methods captureStackTrace() isError() Static properties stackTraceLimit Non-standard Instance methods toString() Instance properties cause columnNumber Non-standard fileName Non-standard lineNumber Non-standard message name stack Non-standard Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages AggregateError EvalError InternalError Non-standard RangeError ReferenceError SyntaxError TypeError URIError Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .