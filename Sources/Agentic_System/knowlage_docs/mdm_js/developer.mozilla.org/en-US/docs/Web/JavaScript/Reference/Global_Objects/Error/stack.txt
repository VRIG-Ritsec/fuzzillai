Error.prototype.stack - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Error stack Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) Error.prototype.stack Non-standard: This feature is not standardized. We do not recommend using non-standard features in production, as they have limited browser support, and may change or be removed. However, they can be a suitable alternative in specific cases where no standard option exists. Note: The stack property is de facto implemented by all major JavaScript engines, and the JavaScript standards committee is looking to standardize it . You cannot rely on the precise content of the stack string due to implementation inconsistencies, but you can generally assume it exists and use it for debugging purposes. The non-standard stack property of an Error instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call. In this article Value Description Examples Specifications Browser compatibility See also Value A string. Because the stack property is non-standard, implementations differ about where it's installed. In Firefox, it's an accessor property on Error.prototype . In Chrome and Safari, it's a data property on each Error instance, with the descriptor: Property attributes of Error.prototype.stack Writable yes Enumerable no Configurable yes Description Each JavaScript engine uses its own format for stack traces, but they are fairly consistent in their high-level structure. Every implementation uses a separate line in the stack to represent each function call. The call that directly caused the error is placed at the top, and the call that started the whole call chain is placed at the bottom. Below are some examples of stack traces: js function foo() { bar(); } function bar() { baz(); } function baz() { console.log(new Error().stack); } foo(); #### JavaScriptCore baz@filename.js:10:24 bar@filename.js:6:6 foo@filename.js:2:6 global code@filename.js:13:4 #### SpiderMonkey baz@filename.js:10:15 bar@filename.js:6:3 foo@filename.js:2:3 @filename.js:13:1 #### V8 Error at baz (filename.js:10:15) at bar (filename.js:6:3) at foo (filename.js:2:3) at filename.js:13:1 V8 provides the non-standard stack trace API for customizing the stack trace, including Error.captureStackTrace() , Error.stackTraceLimit , and Error.prepareStackTrace() . Other engines support this API to varying extents. Different engines set this value at different times. Most modern engines set it when the Error object is created. This means you can get the full call stack information within a function using the following: js function foo() { console.log(new Error().stack); } Without having to throw an error and then catch it. Stack frames can be things other than explicit function calls, too. For example, event listeners, timeout jobs, and promise handlers all begin their own call chain. Source code within eval() and Function constructor calls also appear in the stack: js console.log(new Function("return new Error('Function failed')")().stack); console.log("===="); console.log(eval("new Error('eval failed')").stack); #### JavaScriptCore anonymous@ global code@filename.js:1:65 ==== eval code@ eval@[native code] global code@filename.js:3:17 #### SpiderMonkey anonymous@filename.js line 1 > Function:1:8 @filename.js:1:65 ==== @filename.js line 3 > eval:1:1 @filename.js:3:13 #### V8 Error: Function failed at eval (eval at <anonymous> (filename.js:1:13), <anonymous>:1:8) at filename.js:1:65 ==== Error: eval failed at eval (eval at <anonymous> (filename.js:3:13), <anonymous>:1:1) at filename.js:3:13 In Firefox, you can use the //# sourceURL directive to name an eval source. See the Firefox Debug eval sources docs. Examples Using the stack property The following script demonstrates how to use the stack property to output a stack trace into your browser window. You can use this to check what your browser's stack structure looks like. <div id="output"></div> #output { white-space: pre; font-family: monospace; } js function trace() { throw new Error("trace() failed"); } function b() { trace(); } function a() { b(3, 4, "\n\n", undefined, {}); } try { a("first call, first arg"); } catch (e) { document.getElementById("output").textContent = e.stack; } Specifications Not part of any standard. Browser compatibility Loading… See also TraceKit on GitHub stacktrace.js on GitHub Stack trace API in the V8 docs Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 19, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Error Constructor Error() Static methods captureStackTrace() isError() Static properties stackTraceLimit Non-standard Instance methods toString() Instance properties cause columnNumber Non-standard fileName Non-standard lineNumber Non-standard message name stack Non-standard Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages AggregateError EvalError InternalError Non-standard RangeError ReferenceError SyntaxError TypeError URIError Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .