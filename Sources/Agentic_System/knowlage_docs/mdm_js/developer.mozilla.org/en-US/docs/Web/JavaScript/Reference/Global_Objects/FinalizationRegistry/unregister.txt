FinalizationRegistry.prototype.unregister() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects FinalizationRegistry unregister() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 FinalizationRegistry.prototype.unregister() Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2021⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The unregister() method of FinalizationRegistry instances unregisters a target value from this FinalizationRegistry . In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js unregister(unregisterToken) Parameters unregisterToken The token used with the register() method when registering the target value. Multiple cells registered with the same unregisterToken will be unregistered together. Return value A boolean value that is true if at least one cell was unregistered and false if no cell was unregistered. Exceptions TypeError Thrown if unregisterToken is not an object or a non-registered symbol . Description When a target value has been reclaimed, it is no longer registered in the registry. There is no need to call unregister in your cleanup callback. Only call unregister if you haven't received a cleanup callback and no longer need to receive one. Examples Using unregister This example shows registering a target object using that same object as the unregister token, then later unregistering it via unregister : js class Thingy { static #cleanup = (label) => { // ^^^^^−−−−− held value console.error( `The "release" method was never called for the object with the label "${label}"`, ); }; #registry = new FinalizationRegistry(Thingy.#cleanup); /** * Constructs a `Thingy` instance. * Be sure to call `release` when you're done with it. * * @param label A label for the `Thingy`. */ constructor(label) { // vvvvv−−−−− held value this.#registry.register(this, label, this); // target −−−−−^^^^ ^^^^−−−−− unregister token } /** * Releases resources held by this `Thingy` instance. */ release() { this.#registry.unregister(this); // ^^^^−−−−− unregister token } } This example shows registering a target object using a different object as its unregister token: js class Thingy { static #cleanup = (file) => { // ^^^^−−−−− held value console.error( `The "release" method was never called for the "Thingy" for the file "${file.name}"`, ); }; #registry = new FinalizationRegistry(Thingy.#cleanup); #file; /** * Constructs a `Thingy` instance for the given file. * Be sure to call `release` when you're done with it. * * @param filename The name of the file. */ constructor(filename) { this.#file = File.open(filename); // vvvvv−−−−− held value this.#registry.register(this, label, this.#file); // target −−−−−^^^^ ^^^^^^^^^^−−−−− unregister token } /** * Releases resources held by this `Thingy` instance. */ release() { if (this.#file) { this.#registry.unregister(this.#file); // ^^^^^^^^^^−−−−− unregister token File.close(this.#file); this.#file = null; } } } Specifications Specification ECMAScript® 2026 Language Specification # sec-finalization-registry.prototype.unregister Browser compatibility Loading… See also FinalizationRegistry Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects FinalizationRegistry Constructor FinalizationRegistry() Instance methods register() unregister() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .