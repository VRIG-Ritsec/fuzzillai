Function() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Function Function() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Русский 中文 (简体) Function() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Function() constructor creates Function objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as eval() . However, unlike eval (which may have access to the local scope), the Function constructor creates functions which execute in the global scope only. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const sum = new Function("a", "b", "return a + b"); console.log(sum(2, 6)); // Expected output: 8 Syntax js new Function(functionBody) new Function(arg1, functionBody) new Function(arg1, arg2, functionBody) new Function(arg1, arg2, /* …, */ argN, functionBody) Function(functionBody) Function(arg1, functionBody) Function(arg1, arg2, functionBody) Function(arg1, arg2, /* …, */ argN, functionBody) Note: Function() can be called with or without new . Both create a new Function instance. Parameters arg1 , …, argN Optional Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain identifier , rest parameter , or destructured parameter, optionally with a default ), or a list of such strings separated with commas. As the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: "x", "theValue = 42", "[a, b] /* numbers */" — or "x, theValue = 42, [a, b] /* numbers */" . ( "x, theValue = 42", "[a, b]" is also correct, though very confusing to read.) functionBody A string containing the JavaScript statements comprising the function definition. Description Function objects created with the Function constructor are parsed when the function is created. This is less efficient than creating a function with a function expression or function declaration and calling it within your code, because such functions are parsed with the rest of the code. All arguments passed to the function, except the last, are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed. The function will be dynamically compiled as a function expression, with the source assembled in the following fashion: js `function anonymous(${args.join(",")} ) { ${functionBody} }`; This is observable by calling the function's toString() method. However, unlike normal function expressions , the name anonymous is not added to the functionBody 's scope, since functionBody only has access the global scope. If functionBody is not in strict mode (the body itself needs to have the "use strict" directive since it doesn't inherit the strictness from the context), you may use arguments.callee to refer to the function itself. Alternatively, you can define the recursive part as an inner function: js const recursiveFn = new Function( "count", ` (function recursiveFn(count) { if (count < 0) { return; } console.log(count); recursiveFn(count - 1); })(count); `, ); Note that the two dynamic parts of the assembled source — the parameters list args.join(",") and functionBody — will first be parsed separately to ensure they are each syntactically valid. This prevents injection-like attempts. js new Function("/*", "*/) {"); // SyntaxError: Unexpected end of arg string // Doesn't become "function anonymous(/*) {*/) {}" Examples Specifying arguments with the Function constructor The following code creates a Function object that takes two arguments. js // Example can be run directly in your JavaScript console // Create a function that takes two arguments, and returns the sum of those arguments const adder = new Function("a", "b", "return a + b"); // Call the function adder(2, 6); // 8 The arguments a and b are formal argument names that are used in the function body, return a + b . Creating a function object from a function declaration or function expression js // The function constructor can take in multiple statements separated by a semicolon. Function expressions require a return statement with the function's name // Observe that new Function is called. This is so we can call the function we created directly afterwards const sumOfArray = new Function( "const sumArray = (arr) => arr.reduce((previousValue, currentValue) => previousValue + currentValue); return sumArray", )(); // call the function sumOfArray([1, 2, 3, 4]); // 10 // If you don't call new Function at the point of creation, you can use the Function.call() method to call it const findLargestNumber = new Function( "function findLargestNumber (arr) { return Math.max(...arr) }; return findLargestNumber", ); // call the function findLargestNumber.call({}).call({}, [2, 4, 1, 8, 5]); // 8 // Function declarations do not require a return statement const sayHello = new Function( "return function (name) { return `Hello, ${name}` }", )(); // call the function sayHello("world"); // Hello, world Specifications Specification ECMAScript® 2026 Language Specification # sec-function-constructor Browser compatibility Loading… See also function function expression Functions Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Function Constructor Function() Instance methods apply() bind() call() toString() [Symbol .hasInstance]() Instance properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .