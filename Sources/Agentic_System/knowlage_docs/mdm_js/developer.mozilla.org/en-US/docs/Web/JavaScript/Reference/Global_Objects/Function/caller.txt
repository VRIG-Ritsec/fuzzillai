Function.prototype.caller - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Function caller Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Function.prototype.caller Non-standard: This feature is not standardized. We do not recommend using non-standard features in production, as they have limited browser support, and may change or be removed. However, they can be a suitable alternative in specific cases where no standard option exists. Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. Note: In strict mode , accessing caller of a function throws an error — the API is removed with no replacement. This is to prevent code from being able to "walk the stack", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read the rationale for the deprecation of arguments.callee . The caller accessor property of Function instances returns the function that invoked this function. For strict , arrow, async, and generator functions, accessing the caller property throws a TypeError . In this article Description Examples Specifications Browser compatibility See also Description If the function f was invoked by the top-level code, the value of f.caller is null ; otherwise it's the function that called f . If the function that called f is a strict mode function, the value of f.caller is also null . Note that the only behavior specified by the ECMAScript specification is that Function.prototype has an initial caller accessor that unconditionally throws a TypeError for any get or set request (known as a "poison pill accessor"), and that implementations are not allowed to change this semantic for any function except non-strict plain functions, in which case it must not have the value of a strict mode function. The actual behavior of the caller property, if it's anything other than throwing an error, is implementation-defined. For example, Chrome defines it as an own data property, while Firefox and Safari extend the initial poison-pill Function.prototype.caller accessor to specially handle this values that are non-strict functions. js (function f() { if (Object.hasOwn(f, "caller")) { console.log( "caller is an own property with descriptor", Object.getOwnPropertyDescriptor(f, "caller"), ); } else { console.log( "f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller", ); console.log( Object.getOwnPropertyDescriptor( Object.getPrototypeOf(f), "caller", ).get.call(f), ); } })(); // In Chrome: // caller is an own property with descriptor {value: null, writable: false, enumerable: false, configurable: false} // In Firefox: // f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller // null This property replaces the obsolete arguments.caller property of the arguments object. The special property __caller__ , which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons. Examples Checking the value of a function's caller property The following code checks the value a function's caller property. js function myFunc() { if (myFunc.caller === null) { return "The function was called from the top!"; } return `This function's caller was ${myFunc.caller}`; } Reconstructing the stack and recursion Note that in case of recursion, you can't reconstruct the call stack using this property. Consider: js function f(n) { g(n - 1); } function g(n) { if (n > 0) { f(n); } else { stop(); } } f(2); At the moment stop() is called the call stack will be: f(2) -> g(1) -> f(1) -> g(0) -> stop() The following is true: js stop.caller === g && f.caller === g && g.caller === f; so if you tried to get the stack trace in the stop() function like this: js let f = stop; let stack = "Stack trace:"; while (f) { stack += `\n${f.name}`; f = f.caller; } the loop would never stop. Strict mode caller If the caller is a strict mode function, the value of caller is null . js function callerFunc() { calleeFunc(); } function strictCallerFunc() { "use strict"; calleeFunc(); } function calleeFunc() { console.log(calleeFunc.caller); } (function () { callerFunc(); })(); // Logs [Function: callerFunc] (function () { strictCallerFunc(); })(); // Logs null Specifications Not part of any standard. Browser compatibility Loading… See also Function.prototype.name arguments Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Function Constructor Function() Instance methods apply() bind() call() toString() [Symbol .hasInstance]() Instance properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .