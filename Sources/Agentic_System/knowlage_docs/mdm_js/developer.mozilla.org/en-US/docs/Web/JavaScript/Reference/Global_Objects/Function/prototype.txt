Function: prototype - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Function prototype Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Function: prototype The prototype data property of a Function instance is used when the function is used as a constructor with the new operator. It will become the new object's prototype. Note: Not all Function objects have the prototype property — see description . In this article Value Description Examples Specifications See also Value An object. Property attributes of Function: prototype Writable yes Enumerable no Configurable no Note: Classes are a type of function, so most of the description here applies to the prototype property of classes too. The only salient difference is that the prototype property of a class is not writable. Description When a function is called with new , the constructor's prototype property will become the resulting object's prototype. js function Ctor() {} const inst = new Ctor(); console.log(Object.getPrototypeOf(inst) === Ctor.prototype); // true You can read Inheritance and the prototype chain for more information about the interactions between a constructor function's prototype property and the resulting object's prototype. A function having a prototype property is not sufficient for it to be eligible as a constructor. Generator functions have a prototype property, but cannot be called with new : js async function* asyncGeneratorFunction() {} function* generatorFunction() {} Instead, generator functions' prototype property is used when they are called without new . The prototype property will become the returned Generator object's prototype. In addition, some functions may have a prototype but throw unconditionally when called with new . For example, the Symbol() and BigInt() functions throw when called with new , because Symbol.prototype and BigInt.prototype are only intended to provide methods for the primitive values, but the wrapper objects should not be directly constructed. The following functions do not have prototype , and are therefore ineligible as constructors, even if a prototype property is later manually assigned: js const method = { foo() {} }.foo; const arrowFunction = () => {}; async function asyncFunction() {} The following are valid constructors that have prototype : js class Class {} function fn() {} A bound function does not have a prototype property, but may be constructable. When it's constructed, the target function is constructed instead, and if the target function is constructable, it would return a normal instance. js const boundFunction = function () {}.bind(null); A function's prototype property, by default, is a plain object with one property: constructor , which is a reference to the function itself. The constructor property is writable, non-enumerable, and configurable. If the prototype of a function is reassigned with something other than an Object , when the function is called with new , the returned object's prototype would be Object.prototype instead. (In other words, new ignores the prototype property and constructs a plain object.) js function Ctor() {} Ctor.prototype = 3; console.log(Object.getPrototypeOf(new Ctor()) === Object.prototype); // true Examples Changing the prototype of all instances by mutating the prototype property js function Ctor() {} const p1 = new Ctor(); const p2 = new Ctor(); Ctor.prototype.prop = 1; console.log(p1.prop); // 1 console.log(p2.prop); // 1 Adding a non-method property to a class's prototype property Class fields add properties to each instance. Class methods declare function properties on the prototype. However, there's no way to add a non-function property to the prototype. In case you want to share static data between all instances (for example, Error.prototype.name is the same between all error instances), you can manually assign it on the prototype of a class. js class Dog { constructor(name) { this.name = name; } } Dog.prototype.species = "dog"; console.log(new Dog("Jack").species); // "dog" This can be made more ergonomic using static initialization blocks , which are called when the class is initialized. js class Dog { static { Dog.prototype.species = "dog"; } constructor(name) { this.name = name; } } console.log(new Dog("Jack").species); // "dog" Specifications Specification ECMAScript® 2026 Language Specification # sec-function-instances-prototype See also Function Inheritance and the prototype chain Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Function Constructor Function() Instance methods apply() bind() call() toString() [Symbol .hasInstance]() Instance properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .