Function.prototype.toString() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Function toString() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Function.prototype.toString() Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The toString() method of Function instances returns a string representing the source code of this function. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it function sum(a, b) { return a + b; } console.log(sum.toString()); // Expected output: "function sum(a, b) { // return a + b; // }" console.log(Math.abs.toString()); // Expected output: "function abs() { [native code] }" Syntax js toString() Parameters None. Return value A string representing the source code of the function. Description The Function object overrides the toString() method inherited from Object ; it does not inherit Object.prototype.toString . For user-defined Function objects, the toString method returns a string containing the source text segment which was used to define the function. JavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g., when a function is concatenated with a string. The toString() method will throw a TypeError exception ("Function.prototype.toString called on incompatible object"), if its this value object is not a Function object. js Function.prototype.toString.call("foo"); // throws TypeError If the toString() method is called on built-in function objects, a function created by Function.prototype.bind() , or other non-JavaScript functions, then toString() returns a native function string which looks like function someName() { [native code] } For intrinsic object methods and functions, someName is the initial name of the function; otherwise its content may be implementation-defined, but will always be in property name syntax, like [1 + 1] , someName , or 1 . Note: This means using eval() on native function strings is a guaranteed syntax error. If the toString() method is called on a function created by the Function constructor, toString() returns the source code of a synthesized function declaration named "anonymous" using the provided parameters and function body. For example, Function("a", "b", "return a + b").toString() will return: function anonymous(a,b ) { return a + b } Since ES2018, the spec requires the return value of toString() to be the exact same source code as it was declared, including any whitespace and/or comments — or, if the host doesn't have the source code available for some reason, requires returning a native function string. Support for this revised behavior can be found in the compatibility table . Examples Comparing actual source code and toString results js function test(fn) { console.log(fn.toString()); } function f() {} class A { a() {} } function* g() {} test(f); // "function f() {}" test(A); // "class A { a() {} }" test(g); // "function* g() {}" test((a) => a); // "(a) => a" test({ a() {} }.a); // "a() {}" test({ *a() {} }.a); // "*a() {}" test({ [0]() {} }[0]); // "[0]() {}" test(Object.getOwnPropertyDescriptor({ get a() {} }, "a").get); // "get a() {}" test(Object.getOwnPropertyDescriptor({ set a(x) {} }, "a").set); // "set a(x) {}" test(Function.prototype.toString); // "function toString() { [native code] }" test(function f() {}.bind(0)); // "function () { [native code] }" test(Function("a", "b")); // function anonymous(a\n) {\nb\n} Note that after the Function.prototype.toString() revision, when toString() is called, implementations are never allowed to synthesize a function's source that is not a native function string. The method always returns the exact source code used to create the function — including the getter and setter examples above. The Function constructor itself has the capability of synthesizing the source code for the function (and is therefore a form of implicit eval() ). Getting source text of a function It is possible to get the source text of a function by coercing it to a string — for example, by wrapping it in a template literal: js function foo() { return "bar"; } console.log(`${foo}`); // function foo() { // return "bar"; // } This source text is exact , including any interspersed comments (which won't be stored by the engine's internal representation otherwise). js function foo /* a comment */() { return "bar"; } console.log(foo.toString()); // function foo /* a comment */() { // return "bar"; // } Specifications Specification ECMAScript® 2026 Language Specification # sec-function.prototype.tostring Browser compatibility Loading… See also Object.prototype.toString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Function Constructor Function() Instance methods apply() bind() call() toString() [Symbol .hasInstance]() Instance properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .