Generator.prototype.return() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Generator return() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Русский 中文 (简体) Generator.prototype.return() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2016⁩. Learn more See full compatibility Report feedback The return() method of Generator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js generatorInstance.return() generatorInstance.return(value) Parameters value Optional The value to return. Return value An Object with two properties: done A boolean value: true if the generator function's control flow has reached the end. false if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the return is captured in a try...finally and there are more yield expressions in the finally block. value The value that is given as an argument, or, if the yield expression is wrapped in a try...finally , the value yielded/returned from the finally block. Exceptions TypeError Thrown if the generator is already running. Description The return() method, when called, can be seen as if a return value; statement is inserted in the generator's body at the current suspended position, where value is the value passed to the return() method. Therefore, in a typical flow, calling return(value) will return { done: true, value: value } . However, if the yield expression is wrapped in a try...finally block, the control flow doesn't exit the function body, but proceeds to the finally block instead. In this case, the value returned may be different, and done may even be false , if there are more yield expressions within the finally block. Examples Using return() The following example shows a generator and the return method. js function* gen() { yield 1; yield 2; yield 3; } const g = gen(); g.next(); // { value: 1, done: false } g.return("foo"); // { value: "foo", done: true } g.next(); // { value: undefined, done: true } If return(value) is called on a generator that is already in "completed" state, the generator will remain in "completed" state. If no argument is provided, the value property of the returned object will be undefined . If an argument is provided, it will become the value of the value property of the returned object, unless the yield expression is wrapped in a try...finally . js function* gen() { yield 1; yield 2; yield 3; } const g = gen(); g.next(); // { value: 1, done: false } g.next(); // { value: 2, done: false } g.next(); // { value: 3, done: false } g.next(); // { value: undefined, done: true } g.return(); // { value: undefined, done: true } g.return(1); // { value: 1, done: true } Using return() with try...finally The fact that the return method has been called can only be made known to the generator itself if the yield expression is wrapped in a try...finally block. When the return method is called on a generator that is suspended within a try block, execution in the generator proceeds to the finally block — since the finally block of try...finally statements always executes. js function* gen() { yield 1; try { yield 2; yield 3; } finally { yield "cleanup"; } } const g1 = gen(); g1.next(); // { value: 1, done: false } // Execution is suspended before the try...finally. g1.return("early return"); // { value: 'early return', done: true } const g2 = gen(); g2.next(); // { value: 1, done: false } g2.next(); // { value: 2, done: false } // Execution is suspended within the try...finally. g2.return("early return"); // { value: 'cleanup', done: false } // The completion value is preserved g2.next(); // { value: 'early return', done: true } // Generator is in the completed state g2.return("not so early return"); // { value: 'not so early return', done: true } The return value of the finally block can also become the value of the result returned from the return call. js function* gen() { try { yield 1; } finally { return "cleanup"; } } const generator = gen(); generator.next(); // { value: 1, done: false } generator.return("early return"); // { value: 'cleanup', done: true } Specifications Specification ECMAScript® 2026 Language Specification # sec-generator.prototype.return Browser compatibility Loading… See also function* Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Generator Instance methods next() return() throw() Inheritance Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .