GeneratorFunction.prototype.prototype - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects GeneratorFunction prototype Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 GeneratorFunction.prototype.prototype The prototype property of GeneratorFunction.prototype is shared by all generator functions. Its value is Generator.prototype . Each generator function created with the function* syntax or the GeneratorFunction() constructor also has its own prototype property, whose prototype is GeneratorFunction.prototype.prototype . When the generator function is called, its prototype property becomes the prototype of the returned generator object. In this article Value Description Specifications See also Value The same object as Generator.prototype . GeneratorFunction.prototype.prototype is the technically more accurate name, but Generator.prototype appeals to the intuition that it's the prototype of generator objects. Property attributes of GeneratorFunction.prototype.prototype Writable yes Enumerable no Configurable no The prototype property of each GeneratorFunction instance is an empty object with no properties, whose prototype is GeneratorFunction.prototype.prototype . It has the following property attributes: Property attributes of GeneratorFunction.prototype.prototype Writable no Enumerable no Configurable yes Description A generator function instance has two prototype properties. The first one is its own prototype property. The second one is the prototype property on its prototype, which is GeneratorFunction.prototype . (Remember that every generator function is an instance of GeneratorFunction , so it has GeneratorFunction.prototype as its prototype.) js function* genFunc() {} const GeneratorFunctionPrototype = Object.getPrototypeOf(genFunc); console.log(Object.hasOwn(genFunc, "prototype")); // true console.log(Object.hasOwn(GeneratorFunctionPrototype, "prototype")); // true When a generator function is called, the generator function's prototype property becomes the prototype of the returned generator object. js const gen = genFunc(); const proto = Object.getPrototypeOf; console.log(proto(gen) === genFunc.prototype); // true console.log(proto(proto(gen)) === GeneratorFunctionPrototype.prototype); // true The following diagram illustrates the prototype chain of a generator function and its instances. Each hollow arrow indicates an inheritance relationship (i.e., a prototype link), and each solid arrow indicates a property relationship. Note that there's no way to access genFunc from gen — they only have an instanceof relationship. Specifications Specification ECMAScript® 2026 Language Specification # sec-generatorfunction.prototype.prototype ECMAScript® 2026 Language Specification # sec-generatorfunction-instances-prototype See also function* function* expression AsyncGeneratorFunction GeneratorFunction Inheritance and the prototype chain Iterators and generators Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects GeneratorFunction Constructor GeneratorFunction() Instance properties prototype Inheritance Function Constructor Function() Instance methods apply() bind() call() toString() [Symbol .hasInstance]() Instance properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .