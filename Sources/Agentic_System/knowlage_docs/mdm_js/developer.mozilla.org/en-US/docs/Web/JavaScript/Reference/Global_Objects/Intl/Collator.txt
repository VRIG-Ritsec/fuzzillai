Intl.Collator - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.Collator Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Português (do Brasil) Русский 中文 (简体) Intl.Collator Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2017⁩. Learn more See full compatibility Report feedback The Intl.Collator object enables language-sensitive string comparison. In this article Try it Constructor Static methods Instance properties Instance methods Examples Specifications Browser compatibility See also Try it console.log(["Z", "a", "z", "ä"].sort(new Intl.Collator("de").compare)); // Expected output: Array ["a", "ä", "z", "Z"] console.log(["Z", "a", "z", "ä"].sort(new Intl.Collator("sv").compare)); // Expected output: Array ["a", "z", "Z", "ä"] console.log( ["Z", "a", "z", "ä"].sort( new Intl.Collator("de", { caseFirst: "upper" }).compare, ), ); // Expected output: Array ["a", "ä", "Z", "z"] Constructor Intl.Collator() Creates a new Collator object. Static methods Intl.Collator.supportedLocalesOf() Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale. Instance properties These properties are defined on Intl.Collator.prototype and shared by all Intl.Collator instances. Intl.Collator.prototype.constructor The constructor function that created the instance object. For Intl.Collator instances, the initial value is the Intl.Collator constructor. Intl.Collator.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "Intl.Collator" . This property is used in Object.prototype.toString() . Instance methods Intl.Collator.prototype.compare() Getter function that compares two strings according to the sort order of this Intl.Collator object. Intl.Collator.prototype.resolvedOptions() Returns a new object with properties reflecting the locale and collation options computed during initialization of the object. Examples Using Collator The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: js console.log(new Intl.Collator().compare("a", "c")); // -1, or some other negative value console.log(new Intl.Collator().compare("c", "a")); // 1, or some other positive value console.log(new Intl.Collator().compare("a", "a")); // 0 Note that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive. Using locales The results provided by Intl.Collator.prototype.compare() vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument: js // in German, ä sorts with a console.log(new Intl.Collator("de").compare("ä", "z")); // -1, or some other negative value // in Swedish, ä sorts after z console.log(new Intl.Collator("sv").compare("ä", "z")); // 1, or some other positive value Using options The results provided by Intl.Collator.prototype.compare() can be customized using the options argument: js // in German, ä has a as the base letter console.log(new Intl.Collator("de", { sensitivity: "base" }).compare("ä", "a")); // 0 // in Swedish, ä and a are separate base letters console.log(new Intl.Collator("sv", { sensitivity: "base" }).compare("ä", "a")); // 1, or some other positive value Specifications Specification ECMAScript® 2026 Internationalization API Specification # collator-objects Browser compatibility Loading… See also Intl String.prototype.localeCompare() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .Collator Constructor Intl .Collator() Static methods supportedLocalesOf() Instance methods compare() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .