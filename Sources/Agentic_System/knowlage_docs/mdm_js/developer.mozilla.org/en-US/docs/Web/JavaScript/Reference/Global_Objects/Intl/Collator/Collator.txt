Intl.Collator() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.Collator Intl.Collator() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 中文 (简体) Intl.Collator() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2017⁩. Learn more See full compatibility Report feedback The Intl.Collator() constructor creates Intl.Collator objects. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it console.log(["Z", "a", "z", "ä"].sort(new Intl.Collator("de").compare)); // Expected output: Array ["a", "ä", "z", "Z"] console.log(["Z", "a", "z", "ä"].sort(new Intl.Collator("sv").compare)); // Expected output: Array ["a", "z", "Z", "ä"] console.log( ["Z", "a", "z", "ä"].sort( new Intl.Collator("de", { caseFirst: "upper" }).compare, ), ); // Expected output: Array ["a", "ä", "Z", "z"] Syntax js new Intl.Collator() new Intl.Collator(locales) new Intl.Collator(locales, options) Intl.Collator() Intl.Collator(locales) Intl.Collator(locales, options) Note: Intl.Collator() can be called with or without new . Both create a new Intl.Collator instance. Parameters locales Optional A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page . The following Unicode extension keys are allowed: co See collation . kn See numeric . kf See caseFirst . These keys can also be set with options (as listed below). When both are set, the options property takes precedence. options Optional An object containing the following properties, in the order they are retrieved (all of them are optional): usage Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are: "sort" (default) For sorting a list of strings. "search" For filtering a list of strings by testing each list item for a full-string match against a key. With "search" , the caller should only pay attention to whether compare() returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use "search" for sorting/ordering. localeMatcher The locale matching algorithm to use. Possible values are "lookup" and "best fit" ; the default is "best fit" . For information about this option, see Locale identification and negotiation . collation Variant collations for certain locales, such as "emoji" , "pinyin" , "stroke" , and so on. Only has an effect when usage is "sort" (because "search" is underlyingly its own collation type). For a list of supported collation types, see Intl.supportedValuesOf() ; the default is "default" . This option can also be set through the co Unicode extension key; if both are provided, this options property takes precedence. numeric Whether numeric collation should be used, such that "1" < "2" < "10". Possible values are true and false ; the default is false . This option can also be set through the kn Unicode extension key; if both are provided, this options property takes precedence. caseFirst Whether upper case or lower case should sort first. Possible values are "upper" , "lower" , and "false" (use the locale's default); the default is "false" . This option can also be set through the kf Unicode extension key; if both are provided, this options property takes precedence. sensitivity Which differences in the strings should lead to non-zero result values. Possible values are: "base" Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A. In the Unicode collation algorithm, this is equivalent to the primary strength level. "accent" Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A. In the Unicode collation algorithm, this is equivalent to the secondary strength level. "case" Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A. In the Unicode collation algorithm, this is equivalent to the primary strength level with case level handling. "variant" Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A. In the Unicode collation algorithm, this is equivalent to the tertiary strength level. The default is "variant" for usage "sort" ; it's locale dependent for usage "search" per spec, but is usually also "variant" . Because the core functionality of "search" is accent-insensitive and case-insensitive filtering, setting it to "base" makes the most sense (and perhaps "case" ). ignorePunctuation Whether punctuation should be ignored. Possible values are true and false . The default is true for Thai ( th ) and false for all other languages. Exceptions RangeError Thrown if locales or options contain invalid values. Examples Using Collator The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: js console.log(new Intl.Collator().compare("a", "c")); // -1, or some other negative value console.log(new Intl.Collator().compare("c", "a")); // 1, or some other positive value console.log(new Intl.Collator().compare("a", "a")); // 0 Note that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive. Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl-collator-constructor Browser compatibility Loading… See also Intl.Collator Intl Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .Collator Constructor Intl .Collator() Static methods supportedLocalesOf() Instance methods compare() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .