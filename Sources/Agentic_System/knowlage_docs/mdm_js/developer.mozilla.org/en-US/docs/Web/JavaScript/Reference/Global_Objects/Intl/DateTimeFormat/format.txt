Intl.DateTimeFormat.prototype.format() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.DateTimeFormat format() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский Intl.DateTimeFormat.prototype.format() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2017⁩. Learn more See full compatibility Report feedback The format() method of Intl.DateTimeFormat instances formats a date according to the locale and formatting options of this Intl.DateTimeFormat object. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const options = { weekday: "long", year: "numeric", month: "long", day: "numeric", }; const date = new Date(2012, 5); const dateTimeFormat1 = new Intl.DateTimeFormat("sr-RS", options); console.log(dateTimeFormat1.format(date)); // Expected output: "петак, 1. јун 2012." const dateTimeFormat2 = new Intl.DateTimeFormat("en-GB", options); console.log(dateTimeFormat2.format(date)); // Expected output: "Friday, 1 June 2012" const dateTimeFormat3 = new Intl.DateTimeFormat("en-US", options); console.log(dateTimeFormat3.format(date)); // Expected output: "Friday, June 1, 2012" Syntax js format(date) Parameters date The date to format. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime , Temporal.PlainDate , Temporal.PlainYearMonth , or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date. Note: A Temporal.ZonedDateTime object will always throw a TypeError ; use Temporal.ZonedDateTime.prototype.toLocaleString() or convert it to a Temporal.PlainDateTime object instead. Omitting it results in formatting the current date (as returned by Date.now() ), which could be slightly confusing, so it is advisable to always explicitly pass a date. Return value A string representing the given date formatted according to the locale and formatting options of this Intl.DateTimeFormat object. Note: Most of the time, the formatting returned by format() is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of format() to hardcoded constants. Examples Using format Use the format getter function for formatting a single date, here for Serbia: js const options = { weekday: "long", year: "numeric", month: "long", day: "numeric", }; const dateTimeFormat = new Intl.DateTimeFormat("sr-RS", options); console.log(dateTimeFormat.format(new Date())); // "недеља, 7. април 2013." Using format with map Use the format getter function for formatting all dates in an array. Note that the function is bound to the Intl.DateTimeFormat from which it was obtained, so it can be passed directly to Array.prototype.map() . js const a = [new Date(2012, 8), new Date(2012, 11), new Date(2012, 3)]; const options = { year: "numeric", month: "long" }; const dateTimeFormat = new Intl.DateTimeFormat("pt-BR", options); const formatted = a.map(dateTimeFormat.format); console.log(formatted.join("; ")); // "setembro de 2012; dezembro de 2012; abril de 2012" Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl.datetimeformat.prototype.format Browser compatibility Loading… See also Intl.DateTimeFormat Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .DateTimeFormat Constructor Intl .DateTimeFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .