Intl.DateTimeFormat.prototype.formatToParts() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.DateTimeFormat formatToParts() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Русский Intl.DateTimeFormat.prototype.formatToParts() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨October 2018⁩. Learn more See full compatibility Report feedback The formatToParts() method of Intl.DateTimeFormat instances returns an array of objects representing each part of the formatted string that would be returned by format() . It is useful for building custom strings from the locale-specific tokens. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const date = new Date(2012, 5); const options = { weekday: "long", year: "numeric", month: "long", day: "numeric", }; const dateTimeFormat = new Intl.DateTimeFormat("en-US", options); const parts = dateTimeFormat.formatToParts(date); const partValues = parts.map((p) => p.value); console.log(partValues); // Expected output: "["Friday", ", ", "June", " ", "1", ", ", "2012"]" Syntax js formatToParts(date) Parameters date Optional The date to format. Can be a Date or Temporal.PlainDateTime object. Additionally can be a Temporal.PlainTime , Temporal.PlainDate , Temporal.PlainYearMonth , or Temporal.PlainMonthDay object if the DateTimeFormat object was configured to print at least one relevant part of the date. Note: A Temporal.ZonedDateTime object will always throw a TypeError ; use Temporal.ZonedDateTime.prototype.toLocaleString() or convert it to a Temporal.PlainDateTime object instead. Omitting it results in formatting the current date (as returned by Date.now() ), which could be slightly confusing, so it is advisable to always explicitly pass a date. Return value An Array of objects containing the formatted date in parts. Each object has two properties, type and value , each containing a string. The string concatenation of value , in the order provided, will result in the same string as format() . The type may be one of the date-time components : weekday For example "M" , "Monday" , or "Montag" . era For example "BC" or "AD" . year For example "2012" or "96" . month For example "12" or "January" . day For example "17" . dayPeriod For example "AM" , "PM" , "in the morning" , or "noon" . hour For example "3" or "03" . minute For example "00" . second For example "07" or "42" . fractionalSecond For example "0" , "00" , or "000" . timeZoneName For example "UTC" , "CET" , or "Central European Time" . The type may also be one of the following: literal Any string that's a part of the format pattern and not influenced by the date ; for example "/" , ", " , "o'clock" , "de" , " " , etc. relatedYear A 4-digit Gregorian year, in the event that the calendar's representation would be a yearName instead of a year; for example "2019" . See named years for more details. yearName The name given to the year, usually in calendars without the concept of continuous years; for example "geng-zi" . unknown Reserved for any token that's not recognized as any of the above; should be rarely encountered. Examples Using formatToParts() The format() method outputs localized, opaque strings that cannot be manipulated directly: js const date = Date.UTC(2012, 11, 17, 3, 0, 42); const formatter = new Intl.DateTimeFormat("en-us", { weekday: "long", year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric", fractionalSecondDigits: 3, hour12: true, timeZone: "UTC", }); formatter.format(date); // "Monday, 12/17/2012, 3:00:42.000 AM" However, in many user interfaces you may want to customize the formatting of this string, or interleave it with other texts. The formatToParts() method produces the same information in parts: js formatter.formatToParts(date); // return value: [ { type: "weekday", value: "Monday" }, { type: "literal", value: ", " }, { type: "month", value: "12" }, { type: "literal", value: "/" }, { type: "day", value: "17" }, { type: "literal", value: "/" }, { type: "year", value: "2012" }, { type: "literal", value: ", " }, { type: "hour", value: "3" }, { type: "literal", value: ":" }, { type: "minute", value: "00" }, { type: "literal", value: ":" }, { type: "second", value: "42" }, { type: "fractionalSecond", value: "000" }, { type: "literal", value: " " }, { type: "dayPeriod", value: "AM" }, ]; Now the information is available separately and it can be formatted and concatenated again in a customized way. For example by using Array.prototype.map() , arrow functions , a switch statement , template literals , and Array.prototype.join() , to insert additional markup for certain components. js const dateString = formatter .formatToParts(date) .map(({ type, value }) => { switch (type) { case "dayPeriod": return `<em>${value}</em>`; default: return value; } }) .join(""); console.log(dateString); // "Monday, 12/17/2012, 3:00:42.000 <em>AM</em>" Named years Some calendars use named years; for example, the Chinese and Tibetan calendars use a 60-year sexagenary cycle of named years. These calendars do not have a universal way to unambiguously number each year, so years are disambiguated by relationship to corresponding years on the Gregorian calendar. In this case, when the DateTimeFormat is configured to output the year component, a token for relatedYear is output instead of year . js const df = new Intl.DateTimeFormat("zh-u-ca-chinese"); df.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42)); // return value: [ { type: "relatedYear", value: "2012" }, { type: "literal", value: "年" }, { type: "month", value: "十一月" }, { type: "day", value: "4" }, ]; Sometimes, the combination of date-time component options maps to a format that also includes a yearName . There isn't a separate option that controls whether yearName is displayed or not. For example, the options below sets month to "long" and results in a yearName token, despite year still being "numeric" : js const opts = { year: "numeric", month: "long", day: "numeric" }; const df = new Intl.DateTimeFormat("zh-u-ca-chinese", opts); df.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42)); // return value: [ { type: "relatedYear", value: "2012" }, { type: "yearName", value: "壬辰" }, { type: "literal", value: "年" }, { type: "month", value: "十一月" }, { type: "day", value: "4" }, ]; Because format() just concatenates all the value strings together, you will see the Gregorian year and the year name together in the output in this case. Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-Intl.DateTimeFormat.prototype.formatToParts Browser compatibility Loading… See also Intl.DateTimeFormat Intl.DateTimeFormat.prototype.format() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .DateTimeFormat Constructor Intl .DateTimeFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .