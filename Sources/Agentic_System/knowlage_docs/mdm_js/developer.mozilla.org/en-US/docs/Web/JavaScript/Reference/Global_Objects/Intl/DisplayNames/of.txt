Intl.DisplayNames.prototype.of() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.DisplayNames of() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.DisplayNames.prototype.of() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2021⁩. Learn more See full compatibility Report feedback The of() method of Intl.DisplayNames instances receives a code and returns a string based on the locale and options provided when instantiating this Intl.DisplayNames object. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const regionNamesInEnglish = new Intl.DisplayNames(["en"], { type: "region" }); const regionNamesInTraditionalChinese = new Intl.DisplayNames(["zh-Hant"], { type: "region", }); console.log(regionNamesInEnglish.of("US")); // Expected output: "United States" console.log(regionNamesInTraditionalChinese.of("US")); // Expected output: "美國" Syntax js of(code) Parameters code The code to provide depends on the type : If the type is "region", code should be either an two-letter ISO 3166 region code , or a three-digit UN M49 geographic region . It is required to follow the unicode_region_subtag grammar. Use uppercase codes (e.g., "US" ), because lowercase ones (e.g., "us" ) may not work reliably everywhere. If the type is "script", code should be an four-letter ISO 15924 script code . It is required to follow the unicode_script_subtag grammar. If the type is "language", code should be matched by the unicode_language_id nonterminal. If the type is "currency", code should be a three-letter ISO 4217 currency code . It is required to have exactly three alphabetic characters. If the type is "dateTimeField", code should be one of: "era" , "year" , "quarter" , "month" , "weekOfYear" , "weekday" , "day" , "dayPeriod" , "hour" , "minute" , "second" , "timeZoneName" . If the type is "calendar", code should be a calendar key . It is required to follow the type grammar of a Unicode locale identifier . Return value A language-specific formatted string, or undefined if there's no data for the input and fallback is "none" . Note: fallback is only used if code is structurally valid. See using fallback . Exceptions RangeError Thrown if code is not structurally valid for the given type . Examples Using the of method js const regionNames = new Intl.DisplayNames("en", { type: "region" }); regionNames.of("419"); // "Latin America" const languageNames = new Intl.DisplayNames("en", { type: "language" }); languageNames.of("fr"); // "French" const currencyNames = new Intl.DisplayNames("en", { type: "currency" }); currencyNames.of("EUR"); // "Euro" const languageNamesStandard = new Intl.DisplayNames("fr", { type: "language", languageDisplay: "standard", }); languageNamesStandard.of("fr-CA"); // "français (Canada)" const languageNamesDialect = new Intl.DisplayNames("fr", { type: "language", languageDisplay: "dialect", }); languageNamesDialect.of("fr-CA"); // "français canadien" Using fallback When the Intl.DisplayNames is constructed with fallback: "code" , the of() method will return the code if the input looks structurally valid but there's no data for the input. If fallback is "none" , undefined is returned. js console.log( new Intl.DisplayNames("en", { type: "region", fallback: "code" }).of("ZL"), ); // "ZL" console.log( new Intl.DisplayNames("en", { type: "region", fallback: "none" }).of("ZL"), ); // undefined However, this only applies if the code is structurally valid. For example, if type is "region" but code does not follow the unicode_region_subtag grammar (2 alphabetic characters or 3 numeric characters), a RangeError is directly thrown instead of using the fallback. js console.log( new Intl.DisplayNames("en", { type: "region", fallback: "code" }).of("ZLC"), ); // throws RangeError: invalid value "ZLC" for option region Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-Intl.DisplayNames.prototype.of Browser compatibility Loading… See also Intl.DisplayNames Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .DisplayNames Constructor Intl .DisplayNames() Static methods supportedLocalesOf() Instance methods of() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .