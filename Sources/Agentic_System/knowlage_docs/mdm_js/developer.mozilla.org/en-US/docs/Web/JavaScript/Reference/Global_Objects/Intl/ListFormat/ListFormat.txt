Intl.ListFormat() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.ListFormat Intl.ListFormat() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Português (do Brasil) Intl.ListFormat() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2021⁩. Learn more See full compatibility Report feedback The Intl.ListFormat() constructor creates Intl.ListFormat objects. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const vehicles = ["Motorcycle", "Bus", "Car"]; const formatter = new Intl.ListFormat("en", { style: "long", type: "conjunction", }); console.log(formatter.format(vehicles)); // Expected output: "Motorcycle, Bus, and Car" const formatter2 = new Intl.ListFormat("de", { style: "short", type: "disjunction", }); console.log(formatter2.format(vehicles)); // Expected output: "Motorcycle, Bus oder Car" const formatter3 = new Intl.ListFormat("en", { style: "narrow", type: "unit" }); console.log(formatter3.format(vehicles)); // Expected output: "Motorcycle Bus Car" Syntax js new Intl.ListFormat() new Intl.ListFormat(locales) new Intl.ListFormat(locales, options) Note: Intl.ListFormat() can only be constructed with new . Attempting to call it without new throws a TypeError . Parameters locales Optional A string with a BCP 47 language tag or an Intl.Locale instance, or an array of such locale identifiers. The runtime's default locale is used when undefined is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page . options Optional An object containing the following properties, in the order they are retrieved (all of them are optional): localeMatcher The locale matching algorithm to use. Possible values are "lookup" and "best fit" ; the default is "best fit" . For information about this option, see Locale identification and negotiation . type Indicates the type of grouping. Possible values are: "conjunction" (default) For "and"-based grouping of the list items: "A, B, and C" "disjunction" For "or"-based grouping of the list items: "A, B, or C" "unit" For grouping the list items as a compound unit (neither "and"-based nor "or"-based): "A, B, C" style The grouping style (for example, whether list separators and conjunctions are included). Possible values are: "long" (default) The typical list format. For example, "A, B, and C" "short" The spacing, the length or presence of a conjunction, and the separators may change. Usually, you would want the input elements to be abbreviated too. For example, "A, B, & C" "narrow" Where possible, the list format is further abbreviated, so that the output is as short as possible. For example, "A, B, C" Exceptions RangeError Thrown if locales or options contain invalid values. Examples Using format The following example shows how to create a List formatter using the English language. js const list = ["Motorcycle", "Bus", "Car"]; console.log(new Intl.ListFormat("en-GB", { type: "conjunction" }).format(list)); // Motorcycle, Bus and Car console.log(new Intl.ListFormat("en-GB", { type: "disjunction" }).format(list)); // Motorcycle, Bus or Car Oxford comma Oxford comma is a comma placed immediately before the coordinating conjunction (usually "and" or "or") in a list of three or more terms. Somewhat controversially, the en-US locale uses the Oxford comma, while the en-GB locale does not. js const list = ["Motorcycle", "Bus", "Car"]; console.log(new Intl.ListFormat("en-GB", { type: "conjunction" }).format(list)); // Motorcycle, Bus and Car console.log(new Intl.ListFormat("en-US", { type: "conjunction" }).format(list)); // Motorcycle, Bus, and Car Unit formatting Use style: "unit" to format the list items as a compound unit. In fact, Intl.DurationFormat uses unit-style list formatting under the hood to format durations. js const marathon = [ [42, "kilometer"], [195, "meter"], ]; console.log( new Intl.ListFormat("en-US", { type: "unit" }).format( marathon.map((component) => component[0].toLocaleString("en-US", { style: "unit", unit: component[1], unitDisplay: "long", }), ), ), ); // 42 kilometers, 195 meters Short and narrow style The "short" and "narrow" styles are useful for compact representations of lists. js const list = ["Motorcycle", "Bus", "Car"]; console.log(new Intl.ListFormat("en-US", { style: "short" }).format(list)); // Motorcycle, Bus, & Car console.log(new Intl.ListFormat("en-US", { style: "narrow" }).format(list)); // Motorcycle, Bus, Car console.log(new Intl.ListFormat("en-GB", { style: "short" }).format(list)); // Motorcycle, Bus and Car console.log(new Intl.ListFormat("en-GB", { style: "narrow" }).format(list)); // Motorcycle, Bus, Car The input elements are not transformed, but you will often want to abbreviate them too. js const marathon = [ [42, "kilometer"], [195, "meter"], ]; function formatDistance(locale, distance, style) { return new Intl.ListFormat(locale, { type: "unit", style }).format( marathon.map((component) => component[0].toLocaleString(locale, { style: "unit", unit: component[1], unitDisplay: style, }), ), ); } console.log(formatDistance("en-US", marathon, "long")); // 42 kilometers, 195 meters console.log(formatDistance("en-US", marathon, "short")); // 42 km, 195 m console.log(formatDistance("en-US", marathon, "narrow")); // 42km 195m Selection of conjunction The conjunction word used may depend on the list items' string values. For example, in Spanish, the conjunction is "y" for most words, but "e" for words starting with the vowel "i" . js const words = ["fuerte", "indomable"]; const formatter = new Intl.ListFormat("es-ES", { type: "conjunction" }); console.log(formatter.format(words)); // fuerte e indomable console.log(formatter.format(words.toReversed())); // indomable y fuerte The algorithm used to determine the conjunction is not perfect (for example, it can't always tell a word's pronunciation from its spelling), but it should work in the general case. Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl-listformat-constructor Browser compatibility Loading… See also Intl.ListFormat Intl Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .ListFormat Constructor Intl .ListFormat() Static methods supportedLocalesOf() Instance methods format() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .Locale Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .