Intl.Locale() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.Locale Intl.Locale() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.Locale() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2020⁩. Learn more See full compatibility Report feedback The Intl.Locale() constructor creates Intl.Locale objects. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const korean = new Intl.Locale("ko", { script: "Kore", region: "KR", hourCycle: "h23", calendar: "gregory", }); const japanese = new Intl.Locale("ja-Jpan-JP-u-ca-japanese-hc-h12"); console.log(korean.baseName, japanese.baseName); // Expected output: "ko-Kore-KR" "ja-Jpan-JP" console.log(korean.hourCycle, japanese.hourCycle); // Expected output: "h23" "h12" Syntax js new Intl.Locale(tag) new Intl.Locale(tag, options) Note: Intl.Locale() can only be constructed with new . Attempting to call it without new throws a TypeError . Parameters tag The Unicode locale identifier string. For the syntax of locale identifier strings, see the Intl main page . Note that the Intl.Locale constructor, unlike most other Intl constructors, does not accept an array of locales or undefined . options An object that contains configuration for the Locale. Option values here take priority over extension keys in the locale identifier. Possible properties are: language The language . Any syntactically valid string following the unicode_language_subtag grammar (2–3 or 5–8 letters) is accepted, but the implementation only recognizes certain kinds. script The script . Any syntactically valid string following the unicode_script_subtag grammar (4 letters) is accepted, but the implementation only recognizes certain kinds. region The region . Any syntactically valid string following the unicode_region_subtag grammar (either 2 letters or 3 digits) is accepted, but the implementation only recognizes certain kinds. variants The variants . It should be a dash ( - ) separated list of unique variant tags, where each tag is any syntactically valid string following the unicode_variant_subtag grammar (either 5–8 alphanumerals or a digit followed by 3 alphanumerals), but the implementation only recognizes certain kinds. calendar The calendar . Any syntactically valid string following the type grammar (one or more segments of 3–8 alphanumerals, joined by hyphens) is accepted, but the implementation only recognizes certain kinds, which are listed in Intl.supportedValuesOf() . collation The collation . Any syntactically valid string following the type grammar is accepted, but the implementation only recognizes certain kinds, which are listed in Intl.supportedValuesOf() . numberingSystem The numbering system . Any syntactically valid string following the type grammar is accepted, but the implementation only recognizes certain kinds, which are listed in Intl.supportedValuesOf() . caseFirst The case-first sort option . Possible values are "upper" , "lower" , or "false" . hourCycle The hour cycle . Possible values are "h23" , "h12" , "h11" , or the practically unused "h24" , which are explained in Intl.Locale.prototype.getHourCycles numeric The numeric sort option . A boolean. Examples Basic usage At its very simplest, the Intl.Locale() constructor takes a locale identifier string as its argument: js const us = new Intl.Locale("en-US"); Using the Locale constructor with an options object The constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the hourCycle property of the configuration object to your desired hour cycle type, and then pass it into the constructor: js const locale = new Intl.Locale("en-US", { hourCycle: "h12" }); console.log(locale.hourCycle); // "h12" Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl-locale-constructor Browser compatibility Loading… See also Intl.Collator Canonical Unicode Locale Identifiers in the Unicode locale data markup language spec Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 22, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .Locale Constructor Intl .Locale() Instance methods getCalendars() getCollations() getHourCycles() getNumberingSystems() getTextInfo() getTimeZones() getWeekInfo() maximize() minimize() toString() Instance properties baseName calendar caseFirst collation hourCycle language numberingSystem numeric region script variants Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .