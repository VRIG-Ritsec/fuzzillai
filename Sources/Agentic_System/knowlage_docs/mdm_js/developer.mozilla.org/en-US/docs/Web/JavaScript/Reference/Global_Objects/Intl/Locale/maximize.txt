Intl.Locale.prototype.maximize() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.Locale maximize() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.Locale.prototype.maximize() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2020⁩. Learn more See full compatibility Report feedback The maximize() method of Intl.Locale instances gets the most likely values for the language, script, and region of this locale based on existing values. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const english = new Intl.Locale("en"); const korean = new Intl.Locale("ko"); const arabic = new Intl.Locale("ar"); console.log(english.maximize().baseName); // Expected output: "en-Latn-US" console.log(korean.maximize().baseName); // Expected output: "ko-Kore-KR" console.log(arabic.maximize().baseName); // Expected output: "ar-Arab-EG" Syntax js maximize() Parameters None. Return value A Intl.Locale instance whose baseName property returns the result of the Add Likely Subtags algorithm executed against locale.baseName . Description Sometimes, it is convenient to be able to identify the most likely locale language identifier subtags based on an incomplete language ID. The Add Likely Subtags algorithm gives us this functionality. For instance, given the language ID "en", the algorithm would return "en-Latn-US", since English can only be written in the Latin script, and is most likely to be used in the United States, as it is the largest English-speaking country in the world. This functionality is provided to JavaScript programmers via the maximize() method. maximize() only affects the main subtags that comprise the language identifier : language, script, and region subtags. Other subtags after the "-u" in the locale identifier are called extension subtags and are not affected by the maximize() method. Examples of these subtags include hourCycle , calendar , and numeric . Examples Using maximize js const myLocale = new Intl.Locale("fr", { hourCycle: "h12", calendar: "gregory", }); console.log(myLocale.baseName); // Prints "fr" console.log(myLocale.toString()); // Prints "fr-u-ca-gregory-hc-h12" const myLocMaximized = myLocale.maximize(); // Prints "fr-Latn-FR". The "Latn" and "FR" tags are added, // since French is only written in the Latin script and is most likely to be spoken in France. console.log(myLocMaximized.baseName); // Prints "fr-Latn-FR-u-ca-gregory-hc-h12". // Note that the extension tags (after "-u") remain unchanged. console.log(myLocMaximized.toString()); Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-Intl.Locale.prototype.maximize Browser compatibility Loading… See also Intl.Locale baseName Likely Subtags in the Unicode locale data markup language spec Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .Locale Constructor Intl .Locale() Instance methods getCalendars() getCollations() getHourCycles() getNumberingSystems() getTextInfo() getTimeZones() getWeekInfo() maximize() minimize() toString() Instance properties baseName calendar caseFirst collation hourCycle language numberingSystem numeric region script variants Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .NumberFormat Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .