Intl.NumberFormat - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.NumberFormat Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Intl.NumberFormat Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2017⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback The Intl.NumberFormat object enables language-sensitive number formatting. In this article Try it Constructor Static methods Instance properties Instance methods Examples Specifications Browser compatibility See also Try it const number = 123456.789; console.log( new Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR" }).format( number, ), ); // Expected output: "123.456,79 €" // The Japanese yen doesn't use a minor unit console.log( new Intl.NumberFormat("ja-JP", { style: "currency", currency: "JPY" }).format( number, ), ); // Expected output: "￥123,457" // Limit to three significant digits console.log( new Intl.NumberFormat("en-IN", { maximumSignificantDigits: 3 }).format( number, ), ); // Expected output: "1,23,000" Constructor Intl.NumberFormat() Creates a new NumberFormat object. Static methods Intl.NumberFormat.supportedLocalesOf() Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale. Instance properties These properties are defined on Intl.NumberFormat.prototype and shared by all Intl.NumberFormat instances. Intl.NumberFormat.prototype.constructor The constructor function that created the instance object. For Intl.NumberFormat instances, the initial value is the Intl.NumberFormat constructor. Intl.NumberFormat.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "Intl.NumberFormat" . This property is used in Object.prototype.toString() . Instance methods Intl.NumberFormat.prototype.format() Getter function that formats a number according to the locale and formatting options of this Intl.NumberFormat object. Intl.NumberFormat.prototype.formatRange() Getter function that formats a range of numbers according to the locale and formatting options of the Intl.NumberFormat object from which the method is called. Intl.NumberFormat.prototype.formatRangeToParts() Returns an Array of objects representing the range of number strings in parts that can be used for custom locale-aware formatting. Intl.NumberFormat.prototype.formatToParts() Returns an Array of objects representing the number string in parts that can be used for custom locale-aware formatting. Intl.NumberFormat.prototype.resolvedOptions() Returns a new object with properties reflecting the locale and collation options computed during initialization of the object. Examples Basic usage In basic use without specifying a locale, a formatted string in the default locale and with default options is returned. js const number = 3500; console.log(new Intl.NumberFormat().format(number)); // '3,500' if in US English locale Using locales This example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument: js const number = 123456.789; // German uses comma as decimal separator and period for thousands console.log(new Intl.NumberFormat("de-DE").format(number)); // 123.456,789 // Arabic in most Arabic speaking countries uses real Arabic digits console.log(new Intl.NumberFormat("ar-EG").format(number)); // ١٢٣٤٥٦٫٧٨٩ // India uses thousands/lakh/crore separators console.log(new Intl.NumberFormat("en-IN").format(number)); // 1,23,456.789 // the nu extension key requests a numbering system, e.g. Chinese decimal console.log(new Intl.NumberFormat("zh-Hans-CN-u-nu-hanidec").format(number)); // 一二三,四五六.七八九 // when requesting a language that may not be supported, such as // Balinese, include a fallback language, in this case Indonesian console.log(new Intl.NumberFormat(["ban", "id"]).format(number)); // 123.456,789 Using options The results can be customized using the options argument: js const number = 123456.789; // request a currency format console.log( new Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR" }).format( number, ), ); // 123.456,79 € // the Japanese yen doesn't use a minor unit console.log( new Intl.NumberFormat("ja-JP", { style: "currency", currency: "JPY" }).format( number, ), ); // ￥123,457 // limit to three significant digits console.log( new Intl.NumberFormat("en-IN", { maximumSignificantDigits: 3 }).format( number, ), ); // 1,23,000 // Formatting with units console.log( new Intl.NumberFormat("pt-PT", { style: "unit", unit: "kilometer-per-hour", }).format(50), ); // 50 km/h console.log( (16).toLocaleString("en-GB", { style: "unit", unit: "liter", unitDisplay: "long", }), ); // 16 litres For an exhaustive list of options, see the Intl.NumberFormat() constructor page. Specifications Specification ECMAScript® 2026 Internationalization API Specification # numberformat-objects Browser compatibility Loading… See also Polyfill of Intl.NumberFormat in FormatJS Intl Number.prototype.toLocaleString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .NumberFormat Constructor Intl .NumberFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .