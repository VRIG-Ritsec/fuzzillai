Intl.NumberFormat.prototype.formatRange() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.NumberFormat formatRange() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.NumberFormat.prototype.formatRange() Baseline 2023 Newly available Since ⁨August 2023⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The formatRange() method of Intl.NumberFormat instances formats a range of numbers according to the locale and formatting options of this Intl.NumberFormat object. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js formatRange(startRange, endRange) Parameters startRange A Number , BigInt , or string, to format. Strings are parsed in the same way as in number conversion , except that formatRange() will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number. endRange A Number , BigInt , or string, to format. Return value A string representing the given range of numbers formatted according to the locale and formatting options of this Intl.NumberFormat object. If the start and end values are formatted to the same string, the output will only contain a single value, possibly prefixed with an "approximately equals" symbol (e.g., "~$3"). The insertion of this symbol only depends on the locale settings, and is inserted even when startRange === endRange . Exceptions RangeError Thrown if either startRange or endRange is NaN or an inconvertible string. TypeError Thrown if either startRange or endRange is undefined. Description The formatRange getter function formats a range of numbers into a string according to the locale and formatting options of this Intl.NumberFormat object from which it is called. Examples Using formatRange Use the formatRange getter function for formatting a range of currency values: js const nf = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD", maximumFractionDigits: 0, }); console.log(nf.formatRange(3, 5)); // "$3 – $5" // Note: the "approximately equals" symbol is added if // startRange and endRange round to the same values. console.log(nf.formatRange(2.9, 3.1)); // "~$3" js const nf = new Intl.NumberFormat("es-ES", { style: "currency", currency: "EUR", maximumFractionDigits: 0, }); console.log(nf.formatRange(3, 5)); // "3-5 €" console.log(nf.formatRange(2.9, 3.1)); // "~3 €" Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl.numberformat.prototype.formatrange Browser compatibility Loading… See also Intl.NumberFormat Number.prototype.toLocaleString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .NumberFormat Constructor Intl .NumberFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .