Intl.NumberFormat.prototype.formatRangeToParts() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.NumberFormat formatRangeToParts() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.NumberFormat.prototype.formatRangeToParts() Baseline 2023 Newly available Since ⁨August 2023⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The formatRangeToParts() method of Intl.NumberFormat instances returns an Array of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings. In this article Syntax Examples Specifications Browser compatibility See also Syntax js formatRangeToParts(startRange, endRange) Parameters startRange A Number , BigInt , or string, to format. Strings are parsed in the same way as in number conversion , except that formatRangeToParts() will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number. endRange A Number , BigInt , or string, to format. Return value An Array of objects containing the formatted range in parts. Each object has three properties, type , value , and source , each containing a string. The string concatenation of value , in the order provided, will result in the same string as formatRange() . The type may have the same values as formatToParts() , or the additional value "approximatelySign" (see below). The source can be one of the following: startRange The token is a part of the start number. endRange The token is a part of the end number. shared The token is shared between the start and end; for example, the currency symbol. All literals that are part of the range pattern itself, such as the "–" separator, are also marked as shared . If the start and end numbers are formatted to the same string, then the output has the same list of tokens as calling formatToParts() on the start number, with all tokens marked as source: "shared" . In addition, the first token may be an "approximately equals" symbol (e.g., "~") with type: "approximatelySign" . The insertion of this symbol only depends on the locale settings, and is inserted even when startRange === endRange . Exceptions RangeError Thrown if either startRange or endRange is NaN or an inconvertible string. TypeError Thrown if either startRange or endRange is undefined. Examples Using formatRangeToParts() The formatRange() method outputs localized, opaque strings that cannot be manipulated directly: js const startRange = 3500; const endRange = 9500; const formatter = new Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR", }); console.log(formatter.formatRange(startRange, endRange)); // "3.500,00–9.500,00 €" However, in many user interfaces you may want to customize the formatting of this string, or interleave it with other texts. The formatRangeToParts() method produces the same information in parts: js console.log(formatter.formatRangeToParts(startRange, endRange)); // return value: [ { type: "integer", value: "3", source: "startRange" }, { type: "group", value: ".", source: "startRange" }, { type: "integer", value: "500", source: "startRange" }, { type: "decimal", value: ",", source: "startRange" }, { type: "fraction", value: "00", source: "startRange" }, { type: "literal", value: "–", source: "shared" }, { type: "integer", value: "9", source: "endRange" }, { type: "group", value: ".", source: "endRange" }, { type: "integer", value: "500", source: "endRange" }, { type: "decimal", value: ",", source: "endRange" }, { type: "fraction", value: "00", source: "endRange" }, { type: "literal", value: " ", source: "shared" }, { type: "currency", value: "€", source: "shared" }, ]; Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl.numberformat.prototype.formatrangetoparts Browser compatibility Loading… See also Intl.NumberFormat Intl.NumberFormat.prototype.format() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .NumberFormat Constructor Intl .NumberFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .