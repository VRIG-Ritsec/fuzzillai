Intl.NumberFormat.prototype.formatToParts() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.NumberFormat formatToParts() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Intl.NumberFormat.prototype.formatToParts() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2019⁩. Learn more See full compatibility Report feedback The formatToParts() method of Intl.NumberFormat instances returns an array of objects representing each part of the formatted string that would be returned by format() . It is useful for building custom strings from the locale-specific tokens. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const amount = 654321.987; const options = { style: "currency", currency: "USD" }; const numberFormat = new Intl.NumberFormat("en-US", options); const parts = numberFormat.formatToParts(amount); const partValues = parts.map((p) => p.value); console.log(partValues); // Expected output: "["$", "654", ",", "321", ".", "99"]" Syntax js formatToParts(number) Parameters number A Number , BigInt , or string, to format. Strings are parsed in the same way as in number conversion , except that formatToParts() will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number. Return value An Array of objects containing the formatted number in parts. Each object has two properties, type and value , each containing a string. The string concatenation of value , in the order provided, will result in the same string as format() . The type may be one of the following: literal Any string that's a part of the format pattern; for example " " . Note that common tokens like the decimal separator or the plus/minus signs have their own token types. integer The integral part of the number, or a segment of it if using grouping (controlled by options.useGrouping ). group The group separator string, such as "," . Only present when using grouping (controlled by options.useGrouping ). decimal The decimal separator string, such as "." . Only present when fraction is present. fraction The fractional part of the number. compact The compact exponent, such as "M" or "thousands" . Only present when options.notation is "compact" . The form ( "short" or "long" ) can be controlled via options.compactDisplay . exponentSeparator The exponent separator, such as "E" . Only present when options.notation is "scientific" or "engineering" . exponentMinusSign The exponent minus sign string, such as "-" . Only present when options.notation is "scientific" or "engineering" and the exponent is negative. exponentInteger The exponent's integer value. Only present when options.notation is "scientific" or "engineering" . nan A string representing NaN , such as "NaN" . This is the sole token representing the number itself when the number is NaN . infinity A string representing Infinity or -Infinity , such as "∞" . This is the sole token representing the number itself when the number is Infinity or -Infinity . plusSign The plus sign, such as "+" . minusSign The minus sign, such as "-" . percentSign The percent sign, such as "%" . Only present when options.style is "percent" . unit The unit string, such as "l" or "litres" . Only present when options.style is "unit" . The form ( "short" , "narrow" , or "long" ) can be controlled via options.unitDisplay . currency The currency string, such as "$" , "€" , "Dollar" , or "Euro" . Only present when options.style is "currency" . The form ( "code" , "symbol" , "narrowSymbol" , or "name" ) can be controlled via options.currencyDisplay . unknown Reserved for any token that's not recognized as one of the above; should be rarely encountered. Examples Using formatToParts() The format() method outputs localized, opaque strings that cannot be manipulated directly: js const number = 3500; const formatter = new Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR", }); formatter.format(number); // "3.500,00 €" However, in many user interfaces you may want to customize the formatting of this string, or interleave it with other texts. The formatToParts() method produces the same information in parts: js formatter.formatToParts(number); // return value: [ { type: "integer", value: "3" }, { type: "group", value: "." }, { type: "integer", value: "500" }, { type: "decimal", value: "," }, { type: "fraction", value: "00" }, { type: "literal", value: " " }, { type: "currency", value: "€" }, ]; Now the information is available separately and it can be formatted and concatenated again in a customized way. For example by using Array.prototype.map() , arrow functions , a switch statement , template literals , and Array.prototype.join() , to insert additional markup for certain components. js const numberString = formatter .formatToParts(number) .map(({ type, value }) => { switch (type) { case "currency": return `<strong>${value}</strong>`; default: return value; } }) .join(""); console.log(numberString); // "3.500,00 <strong>€</strong>" Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl.numberformat.prototype.formattoparts Browser compatibility Loading… See also Intl.NumberFormat Intl.NumberFormat.prototype.format() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .NumberFormat Constructor Intl .NumberFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .