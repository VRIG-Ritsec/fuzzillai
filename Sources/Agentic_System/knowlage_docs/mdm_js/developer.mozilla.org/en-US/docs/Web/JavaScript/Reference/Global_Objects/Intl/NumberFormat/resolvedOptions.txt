Intl.NumberFormat.prototype.resolvedOptions() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Intl Intl.NumberFormat resolvedOptions() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 Русский Intl.NumberFormat.prototype.resolvedOptions() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2017⁩. Learn more See full compatibility Report feedback The resolvedOptions() method of Intl.NumberFormat instances returns a new object with properties reflecting the options computed during initialization of this NumberFormat object. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const numberFormat = new Intl.NumberFormat("de-DE"); const options = numberFormat.resolvedOptions(); console.log(options.locale); // Expected output: "de-DE" console.log(options.numberingSystem); // Expected output: "latn" console.log(options.style); // Expected output: "decimal" Syntax js resolvedOptions() Parameters None. Return value A new object with properties reflecting the options computed during the initialization of this NumberFormat object. The object has the following properties, in the order they are listed: locale The BCP 47 language tag for the locale actually used, determined by the locale negotiation process. Only the nu Unicode extension key, if requested, may be included in the output. numberingSystem The value provided for this property in the options argument, or using the Unicode extension key "nu" , with default filled in as needed. It is a supported numbering system for this locale. The default is locale dependent. style The value provided for this property in the options argument, with default filled in as needed. It is either "decimal" , "percent" , "currency" , or "unit" . The default is "decimal" . currency Optional The value provided for this property in the options argument. It is only present if style is "currency" . It is an ISO 4217 currency code; see Intl.supportedValuesOf() . It is required if style is "currency" so there is no default. currencyDisplay Optional The value provided for this property in the options argument, with default filled in as needed. It is only present if style is "currency" . It is either "code" , "symbol" , "narrowSymbol" , or "name" . The default is "symbol" . currencySign Optional The value provided for this property in the options argument, with default filled in as needed. It is only present if style is "currency" . It is either "standard" or "accounting" . The default is "standard" . unit Optional The value provided for this property in the options argument. It is only present if style is "unit" . It is a sanctioned unit identifier from the full CLDR list . It is required if style is "unit" so there is no default. unitDisplay Optional The value provided for this property in the options argument, with default filled in as needed. It is only present if style is "unit" . It is either "short" , "narrow" , or "long" . The default is "short" . minimumIntegerDigits The value provided for this property in the options argument, with default filled in as needed. It is an integer between 1 and 21 . The default is 1 . minimumFractionDigits , maximumFractionDigits Optional The value provided for these properties in the options argument, with defaults filled in as needed. They are only present if necessary; see digit options . It is an integer between 0 and 100 . minimumSignificantDigits , maximumSignificantDigits Optional The value provided for these properties in the options argument, with defaults filled in as needed. They are only present if necessary; see digit options . It is an integer between 1 and 21 . useGrouping The value provided for this property in the options argument, with default filled in as needed, and with some values normalized. It is either "always" , "auto" , "min2" , or the boolean false . The default is "min2" if notation is "compact" , and "auto" otherwise. notation The value provided for this property in the options argument, with default filled in as needed. It is either "standard" , "scientific" , "engineering" , or "compact" . The default is "standard" . compactDisplay Optional The value provided for this property in the options argument, with default filled in as needed. It is only present if notation is "compact" . It is either "short" or "long" . The default is "short" . signDisplay The value provided for this property in the options argument, with default filled in as needed. It is either "auto" , "always" , "exceptZero" , "negative" , or "never" . The default is "auto" . roundingIncrement The value provided for this property in the options argument, with default filled in as needed. It is one of 1 , 2 , 5 , 10 , 20 , 25 , 50 , 100 , 200 , 250 , 500 , 1000 , 2000 , 2500 , and 5000 . The default is 1 . roundingMode The value provided for this property in the options argument, with default filled in as needed. It is one of "ceil" , "floor" , "expand" , "trunc" , "halfCeil" , "halfFloor" , "halfExpand" , "halfTrunc" , and "halfEven" . The default is "halfExpand" . roundingPriority The value provided for this property in the options argument, with default filled in as needed. It is either "auto" , "morePrecision" , or "lessPrecision" . The default is "auto" . trailingZeroDisplay The value provided for this property in the options argument, with default filled in as needed. It is either "auto" or "stripIfInteger" . The default is "auto" . Examples Using the resolvedOptions method js // Create a NumberFormat const de = new Intl.NumberFormat("de-DE", { style: "currency", currency: "USD", maximumFractionDigits: 2, roundingIncrement: 5, roundingMode: "halfCeil", }); // Resolve the options const usedOptions = de.resolvedOptions(); console.log(usedOptions.locale); // "de-DE" console.log(usedOptions.numberingSystem); // "latn" console.log(usedOptions.compactDisplay); // undefined ("notation" not set to "compact") console.log(usedOptions.currency); // "USD" console.log(usedOptions.currencyDisplay); // "symbol" console.log(usedOptions.currencySign); // "standard" console.log(usedOptions.minimumIntegerDigits); // 1 console.log(usedOptions.minimumFractionDigits); // 2 console.log(usedOptions.maximumFractionDigits); // 2 console.log(usedOptions.minimumSignificantDigits); // undefined (maximumFractionDigits is set) console.log(usedOptions.maximumSignificantDigits); // undefined (maximumFractionDigits is set) console.log(usedOptions.notation); // "standard" console.log(usedOptions.roundingIncrement); // 5 console.log(usedOptions.roundingMode); // halfCeil console.log(usedOptions.roundingPriority); // auto console.log(usedOptions.signDisplay); // "auto" console.log(usedOptions.style); // "currency" console.log(usedOptions.trailingZeroDisplay); // auto console.log(usedOptions.useGrouping); // auto Specifications Specification ECMAScript® 2026 Internationalization API Specification # sec-intl.numberformat.prototype.resolvedoptions Browser compatibility Loading… See also Intl.NumberFormat Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Intl .NumberFormat Constructor Intl .NumberFormat() Static methods supportedLocalesOf() Instance methods format() formatRange() formatRangeToParts() formatToParts() resolvedOptions() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Intl Intl .Collator Intl .DateTimeFormat Intl .DisplayNames Intl .DurationFormat Intl .ListFormat Intl .Locale Intl .PluralRules Intl .RelativeTimeFormat Intl .Segmenter Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .