Iterator() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator Iterator() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Iterator() constructor Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The Iterator() constructor is intended to be used as the superclass of other classes that create iterators. It throws an error when constructed by itself. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js new Iterator() Note: Iterator() can only be constructed with new . Attempting to call it without new throws a TypeError . In addition, Iterator() cannot actually be constructed itself — it's usually implicitly constructed through super() calls inside the constructor of a subclass. Parameters None. Return value A new Iterator object. Exceptions TypeError When new.target is the Iterator function itself, i.e., when the Iterator constructor itself is constructed. Description Iterator represents an abstract class — a class that provides common utilities for its subclasses, but is not intended to be instantiated itself. It is the superclass of all other iterator classes, and is used to create subclasses that implement specific iteration algorithms — namely, all subclasses of Iterator must implement a next() method as required by the iterator protocol . Because Iterator doesn't actually provide the next() method, it doesn't make sense to construct an Iterator directly. You can also use Iterator.from() to create an Iterator instance from an existing iterable or iterator object. Examples Subclassing Iterator The following example defines a custom data structure, Range , which allows iteration. To make an object iterable, we can provide an [Symbol.iterator]() method in the form of a generator function: js class Range { #start; #end; #step; constructor(start, end, step = 1) { this.#start = start; this.#end = end; this.#step = step; } *[Symbol.iterator]() { for (let value = this.#start; value <= this.#end; value += this.#step) { yield value; } } } const range = new Range(1, 5); for (const num of range) { console.log(num); } This works, but it isn't as nice as how built-in iterators work. There are two problems: The returned iterator inherits from Generator , which means modifications to Generator.prototype are going to affect the returned iterator, which is a leak of abstraction. The returned iterator does not inherit from a custom prototype, which makes it harder if we intend to add extra methods to the iterator. We can mimic the implementation of built-in iterators, such as map iterators , by subclassing Iterator . This enables us to define extra properties, such as [Symbol.toStringTag] , while making the iterator helper methods available on the returned iterator. js class Range { #start; #end; #step; constructor(start, end, step = 1) { this.#start = start; this.#end = end; this.#step = step; } static #RangeIterator = class extends Iterator { #cur; #s; #e; constructor(range) { super(); this.#cur = range.#start; this.#s = range.#step; this.#e = range.#end; } static { Object.defineProperty(this.prototype, Symbol.toStringTag, { value: "Range Iterator", configurable: true, enumerable: false, writable: false, }); // Avoid #RangeIterator from being accessible outside delete this.prototype.constructor; } next() { if (this.#cur > this.#e) { return { value: undefined, done: true }; } const res = { value: this.#cur, done: false }; this.#cur += this.#s; return res; } }; [Symbol.iterator]() { return new Range.#RangeIterator(this); } } const range = new Range(1, 5); for (const num of range) { console.log(num); } The subclassing pattern is useful if you want to create many custom iterators. If you have an existing iterable or iterator object which doesn't inherit from Iterator , and you just want to call iterator helper methods on it, you can use Iterator.from() to create a one-time Iterator instance. Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator-constructor Browser compatibility Loading… See also Polyfill of Iterator in core-js es-shims polyfill of Iterator and associated helpers Iterator Iterator.from() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .