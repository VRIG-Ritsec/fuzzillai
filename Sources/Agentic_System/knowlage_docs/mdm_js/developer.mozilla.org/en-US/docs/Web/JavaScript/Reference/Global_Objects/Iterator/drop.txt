Iterator.prototype.drop() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator drop() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 한국어 中文 (简体) Iterator.prototype.drop() Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The drop() method of Iterator instances returns a new iterator helper object that skips the given number of elements at the start of this iterator. In this article Syntax Examples Specifications Browser compatibility See also Syntax js drop(limit) Parameters limit The number of elements to drop from the start of the iteration. Return value A new iterator helper object . The first time the returned iterator helper's next() method is called, the current iterator is immediately advanced by limit elements, and then the next element (the limit+1 -th element) is yielded. The iterator helper then yields the remaining elements one-by-one. If the current iterator has fewer than limit elements, the new iterator helper will be immediately completed the first time next() is called. Exceptions RangeError Thrown if limit becomes NaN or negative when converted to an integer . Examples Using drop() The following example creates an iterator that yields terms in the Fibonacci sequence, starting from the 3rd term by dropping the first two terms: js function* fibonacci() { let current = 1; let next = 1; while (true) { yield current; [current, next] = [next, current + next]; } } const seq = fibonacci().drop(2); console.log(seq.next().value); // 2 console.log(seq.next().value); // 3 This is equivalent to: js const seq = fibonacci(); seq.next(); seq.next(); Using drop() with a for...of loop drop() is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a for...of loop: js for (const n of fibonacci().drop(2)) { console.log(n); if (n > 30) { break; } } // Logs: // 2 // 3 // 5 // 8 // 13 // 21 // 34 Combining drop() with take() You can combine drop() with Iterator.prototype.take() to get a slice of an iterator: js for (const n of fibonacci().drop(2).take(5)) { // Drops the first two elements, then takes the next five console.log(n); } // Logs: // 2 // 3 // 5 // 8 // 13 for (const n of fibonacci().take(5).drop(2)) { // Takes the first five elements, then drops the first two console.log(n); } // Logs: // 2 // 3 // 5 Lower and upper bounds of drop count When the limit is negative or NaN , a RangeError is thrown: js fibonacci().drop(-1); // RangeError: -1 must be positive fibonacci().drop(undefined); // RangeError: undefined must be positive When the limit is larger than the total number of elements the iterator can produce (such as Infinity ), the returned iterator helper will instantly drop all elements and then be completed the first time next() is called. If the current iterator is infinite, the returned iterator helper will never complete. js fibonacci().drop(Infinity).next(); // Never ends new Set([1, 2, 3]).values().drop(Infinity).next(); // { value: undefined, done: true } new Set([1, 2, 3]).values().drop(4).next(); // { value: undefined, done: true } Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator.prototype.drop Browser compatibility Loading… See also Polyfill of Iterator.prototype.drop in core-js es-shims polyfill of Iterator.prototype.drop Iterator Iterator.prototype.take() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .