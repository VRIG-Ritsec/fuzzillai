Iterator.prototype.every() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator every() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 한국어 中文 (简体) Iterator.prototype.every() Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The every() method of Iterator instances is similar to Array.prototype.every() : it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js every(callbackFn) Parameters callbackFn A function to execute for each element produced by the iterator. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed. index The index of the current element being processed. Return value true if callbackFn returns a truthy value for every element. Otherwise, false . Description every() iterates the iterator and invokes the callbackFn function once for each element. It returns false immediately if the callback function returns a falsy value. Otherwise, it iterates until the end of the iterator and returns true . If every() returns false , the underlying iterator is closed by calling its return() method. The main advantage of iterator helpers over array methods is that they are lazy, meaning that they only produce the next value when requested. This avoids unnecessary computation and also allows them to be used with infinite iterators. With infinite iterators, every() returns false as soon as the first falsy value is found. If the callbackFn always returns a truthy value, the method never returns. Examples Using every() js function* fibonacci() { let current = 1; let next = 1; while (true) { yield current; [current, next] = [next, current + next]; } } const isEven = (x) => x % 2 === 0; console.log(fibonacci().every(isEven)); // false const isPositive = (x) => x > 0; console.log(fibonacci().take(10).every(isPositive)); // true console.log(fibonacci().every(isPositive)); // Never completes Calling every() always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state. js const seq = fibonacci(); console.log(seq.every(isEven)); // false console.log(seq.next()); // { value: undefined, done: true } Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator.prototype.every Browser compatibility Loading… See also Polyfill of Iterator.prototype.every in core-js es-shims polyfill of Iterator.prototype.every Iterator Iterator.prototype.find() Iterator.prototype.some() Array.prototype.every() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .