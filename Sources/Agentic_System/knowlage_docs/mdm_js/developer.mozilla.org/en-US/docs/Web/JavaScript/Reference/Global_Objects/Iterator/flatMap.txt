Iterator.prototype.flatMap() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator flatMap() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Iterator.prototype.flatMap() Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The flatMap() method of Iterator instances returns a new iterator helper object that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable). In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js flatMap(callbackFn) Parameters callbackFn A function to execute for each element produced by the iterator. It should return an iterator or iterable that yields elements to be yielded by flatMap() . Note that unlike Array.prototype.flatMap() , you cannot return single non-iterator/iterable values. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. Return value A new iterator helper object . The first time the iterator helper's next() method is called, it calls callbackFn on the first element produced by the underlying iterator, and the return value, which should be an iterator or iterable, is yielded one-by-one by the iterator helper (like yield* ). The next element is fetched from the underlying iterator when the previous one returned by callbackFn is completed. When the underlying iterator is completed, the iterator helper is also completed (the next() method produces { value: undefined, done: true } ). Exceptions TypeError Thrown if callbackFn returns a non-iterator/iterable value or a string primitive. Description flatMap accepts two kinds of return values from callbackFn : an iterator or iterable. They are handled in the same way as Iterator.from() : if the return value is iterable, the [Symbol.iterator]() method is called and the return value is used; otherwise, the return value is treated as an iterator and its next() method is called. js [1, 2, 3] .values() .flatMap((x) => { let itDone = false; const it = { next() { if (itDone) { return { value: undefined, done: true }; } itDone = true; return { value: x, done: false }; }, }; switch (x) { case 1: // An iterable that's not an iterator return { [Symbol.iterator]: () => it }; case 2: // An iterator that's not an iterable return it; case 3: // An iterable iterator is treated as an iterable return { ...it, [Symbol.iterator]() { console.log("Symbol.iterator called"); return it; }, }; default: return undefined; } }) .toArray(); // Logs "Symbol.iterator called" // Returns [1, 2, 3] Examples Merging maps The following example merges two Map objects into one: js const map1 = new Map([ ["a", 1], ["b", 2], ["c", 3], ]); const map2 = new Map([ ["d", 4], ["e", 5], ["f", 6], ]); const merged = new Map([map1, map2].values().flatMap((x) => x)); console.log(merged.get("a")); // 1 console.log(merged.get("e")); // 5 This avoids creating any temporary copies of the map's content. Note that the array [map1, map2] must first be converted to an iterator (using Array.prototype.values() ), because Array.prototype.flatMap() only flattens arrays, not iterables. js new Map([map1, map2].flatMap((x) => x)); // Map(1) {undefined => undefined} Returning strings Strings are iterable, but flatMap() specifically rejects string primitives returned from callbackFn , this is because the behavior of iterating by code points is often not what you want. js [1, 2, 3] .values() .flatMap((x) => String(x)) .toArray(); // TypeError: Iterator.prototype.flatMap called on non-object You may want to wrap it in an array instead so the entire string is yielded as one: js [1, 2, 3] .values() .flatMap((x) => [String(x)]) .toArray(); // ['1', '2', '3'] Or, if the behavior of iterating by code points is intended, you can use Iterator.from() to convert it to a proper iterator: js [1, 2, 3] .values() .flatMap((x) => Iterator.from(String(x * 10))) .toArray(); // ['1', '0', '2', '0', '3', '0'] Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator.prototype.flatmap Browser compatibility Loading… See also Polyfill of Iterator.prototype.flatMap in core-js es-shims polyfill of Iterator.prototype.flatMap Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .