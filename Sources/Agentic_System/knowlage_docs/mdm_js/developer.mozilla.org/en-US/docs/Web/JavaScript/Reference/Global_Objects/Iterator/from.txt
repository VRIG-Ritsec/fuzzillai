Iterator.from() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator from() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Iterator.from() Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The Iterator.from() static method creates a new Iterator object from an iterator or iterable object. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js from(object) Parameters object An object that implements the iterable protocol or the iterator protocol. Return value If object is an iterable, its [Symbol.iterator]() method is called to obtain the iterator. Otherwise, object is assumed to be an iterator. If the iterator is already instanceof Iterator (which means it has Iterator.prototype in its prototype chain), it is returned directly. Otherwise, a new Iterator object is created that wraps the original iterator. Description This method exists to convert custom iterators, probably exported by libraries, to proper iterators . All iterator objects returned by Iterator.from() inherit from a common prototype object, which has the following methods: next() Calls the underlying iterator's next() method and returns the result. return() Calls the underlying iterator's return() method and returns the result, or returns { value: undefined, done: true } if the underlying iterator doesn't have a return() method. Examples Converting an iterable to a proper iterator Because obj is already an iterable that returns a proper iterator when its [Symbol.iterator]() method is called, Iterator.from(obj) returns the same iterator. js const iterator = (function* () { yield 1; yield 2; yield 3; })(); const obj = { [Symbol.iterator]() { return iterator; }, }; const iterator2 = Iterator.from(obj); console.log(iterator2 === iterator); // true Because obj2 is an iterable that returns a non-proper iterator when its [Symbol.iterator]() method is called, Iterator.from(obj2) returns a new iterator that wraps the original iterator. js const iterator = { current: 0, next() { return { value: this.current++, done: false }; }, }; const obj2 = { [Symbol.iterator]() { return iterator; }, }; const iterator2 = Iterator.from(obj2); console.log(iterator2 === iterator); // false console.log(iterator2.next()); // { value: 0, done: false } console.log(iterator.next()); // { value: 1, done: false } Converting an iterator to a proper iterator Because obj is already a proper iterator, Iterator.from(obj) returns itself. js const obj = (function* () { yield 1; yield 2; yield 3; })(); const iterator = Iterator.from(obj); console.log(iterator === obj); // true Because obj2 is a non-proper iterator, Iterator.from(obj2) returns a new iterator that wraps the original iterator. js const obj2 = { current: 0, next() { return { value: this.current++, done: false }; }, }; const iterator = Iterator.from(obj2); console.log(iterator === obj2); // false console.log(iterator.next()); // { value: 0, done: false } console.log(obj2.next()); // { value: 1, done: false } Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator.from Browser compatibility Loading… See also Polyfill of Iterator.from in core-js es-shims polyfill of Iterator.from Iterator Array.from() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .