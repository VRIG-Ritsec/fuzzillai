Iterator.prototype.reduce() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Iterator reduce() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Iterator.prototype.reduce() Baseline 2025 Newly available Since ⁨March 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The reduce() method of Iterator instances is similar to Array.prototype.reduce : it executes a user-supplied "reducer" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js reduce(callbackFn) reduce(callbackFn, initialValue) Parameters callbackFn A function to execute for each element produced by the iterator. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn . For the last invocation, the return value becomes the return value of reduce() . The function is called with the following arguments: accumulator The value resulting from the previous call to callbackFn . On the first call, its value is initialValue if the latter is specified; otherwise its value is the first element of the iterator. currentValue The value of the current element. On the first call, its value is the first element of the iterator if initialValue is specified; otherwise its value is the second element. currentIndex The index position of currentValue . On the first call, its value is 0 if initialValue is specified, otherwise 1 . initialValue Optional A value to which accumulator is initialized the first time the callback is called. If initialValue is specified, callbackFn starts executing with the first element as currentValue . If initialValue is not specified, accumulator is initialized to the first element, and callbackFn starts executing with the second element as currentValue . In this case, if the iterator is empty (so that there's no first value to return as accumulator ), an error is thrown. Return value The value that results from running the "reducer" callback function to completion over the entire iterator. Exceptions TypeError Thrown if the iterator contains no elements and initialValue is not provided. Description See Array.prototype.reduce() for details about how reduce() works. Unlike most other iterator helper methods, it does not work well with infinite iterators, because it is not lazy. Examples Using reduce() The following example creates an iterator that yields terms in the Fibonacci sequence, and then sums the first ten terms: js function* fibonacci() { let current = 1; let next = 1; while (true) { yield current; [current, next] = [next, current + next]; } } console.log( fibonacci() .take(10) .reduce((a, b) => a + b), ); // 143 Specifications Specification ECMAScript® 2026 Language Specification # sec-iterator.prototype.reduce Browser compatibility Loading… See also Polyfill of Iterator.prototype.reduce in core-js es-shims polyfill of Iterator.prototype.reduce Iterator Iterator.prototype.map() Iterator.prototype.flatMap() Array.prototype.reduce() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Iterator Constructor Iterator() Static methods from() Instance methods drop() every() filter() find() flatMap() forEach() map() reduce() some() take() toArray() [Symbol .dispose]() [Symbol .iterator]() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .