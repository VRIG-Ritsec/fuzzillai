JSON.rawJSON() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects JSON rawJSON() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Êó•Êú¨Ë™û JSON.rawJSON() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The JSON.rawJSON() static method creates a "raw JSON" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js JSON.rawJSON(string) Parameters string The JSON text. Must be valid JSON representing a primitive value . Return value An object that can be used to create JSON text with the exact same content as the string provided, without quotes around the string itself. This object has null prototype and is frozen (so it never gets accidentally serialized as a regular object by any kind of primitive conversion), and the following property: rawJSON The original JSON string provided. Furthermore, it has a private field that marks itself as a raw JSON object. This allows it to be identified by JSON.stringify() and JSON.isRawJSON() . Exceptions SyntaxError Thrown if the string is not valid JSON, or if it represents an object or array. Description A raw JSON object can be seen as an immutable, atomic data structure like any kind of primitive . It is not a regular object and it contains no data other than the raw JSON text. It is used to "pre-serialize" data to formats that JSON.stringify itself cannot produce for various reasons. The most typical use case is the floating point number loss of precision problem. For example: js JSON.stringify({ value: 12345678901234567890 }); // {"value":12345678901234567000} The value is not exactly equivalent to the original number any more! This is because JavaScript uses floating point representation for all numbers, so it cannot represent all integers exactly. The number literal 12345678901234567890 itself is already rounded to the nearest representable number when it is parsed by JavaScript. Without JSON.rawJSON , there is no way to tell JSON.stringify to produce the number literal 12345678901234567890 , because there is simply no corresponding JavaScript number value. With raw JSON, you can directly tell JSON.stringify() what a particular value should be stringified as: js const rawJSON = JSON.rawJSON("12345678901234567890"); JSON.stringify({ value: rawJSON }); // {"value":12345678901234567890} For a more complete example of this, see Lossless number serialization . Note that although we passed a string to JSON.rawJSON() , it still becomes a number in the final JSON. This is because the string represents the verbatim JSON text. If you want to serialize a string, you should use JSON.rawJSON() with a quotes-enclosed string value: js const rawJSON = JSON.rawJSON('"Hello world"'); JSON.stringify({ value: rawJSON }); // {"value":"Hello world"} JSON.rawJSON allows you to insert arbitrary JSON text, but does not allow you to create invalid JSON. Anything that was not permitted by the JSON syntax is not permitted by JSON.rawJSON() either: js const rawJSON = JSON.rawJSON('"Hello\nworld"'); // Syntax error, because line breaks are not allowed in JSON strings Furthermore, you cannot use JSON.rawJSON() to create JSON objects or arrays. Examples Using JSON.rawJSON() to create JSON expressions of different types js const numJSON = JSON.rawJSON("123"); const strJSON = JSON.rawJSON('"Hello world"'); const boolJSON = JSON.rawJSON("true"); const nullJSON = JSON.rawJSON("null"); console.log( JSON.stringify({ age: numJSON, message: strJSON, isActive: boolJSON, nothing: nullJSON, }), ); // {"age":123,"message":"Hello world","isActive":true,"nothing":null} However, you cannot use JSON.rawJSON() to create JSON objects or arrays: js const arrJSON = JSON.rawJSON("[1, 2, 3]"); const objJSON = JSON.rawJSON('{"a": 1, "b": 2}'); // SyntaxError Using JSON.rawJSON() to create escaped string literals Apart from numbers, there is only one other type that does not have a one-to-one correspondence between JavaScript values and JSON text: strings. When strings are serialized to JSON, all code points, other than those that are not legal inside JSON string literals (such as line breaks), are printed literally: js console.log(JSON.stringify({ value: "\ud83d\ude04" })); // {"value":"üòÑ"} This may not be desirable, because the receiver of this string may handle Unicode differently. To improve interoperability, you can explicitly specify the string to be serialized with escape sequences: js const rawJSON = JSON.rawJSON('"\\ud83d\\ude04"'); const objStr = JSON.stringify({ value: rawJSON }); console.log(objStr); // {"value":"\ud83d\ude04"} console.log(JSON.parse(objStr).value); // üòÑ Note that the double backslashes in the rawJSON actually represents a single slash character. Specifications Specification JSON.parse source text access # sec-json.rawjson Browser compatibility Loading‚Ä¶ See also Polyfill of JSON.rawJSON in core-js JSON JSON.isRawJSON() JSON.stringify() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects JSON Static methods isRawJSON() parse() rawJSON() stringify() Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .