Map.groupBy() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Map groupBy() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 中文 (简体) Map.groupBy() Baseline 2024 Newly available Since ⁨March 2024⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback Note: In some versions of some browsers, this method was implemented as the method Array.prototype.groupToMap() . Due to web compatibility issues, it is now implemented as a static method. Check the browser compatibility table for details. The Map.groupBy() static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned Map uses the unique values from the test function as keys, which can be used to get the array of elements in each group. The method is primarily useful when grouping elements that are associated with an object, and in particular when that object might change over time. If the object is invariant, you might instead represent it using a string, and group elements with Object.groupBy() . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const inventory = [ { name: "asparagus", type: "vegetables", quantity: 9 }, { name: "bananas", type: "fruit", quantity: 5 }, { name: "goat", type: "meat", quantity: 23 }, { name: "cherries", type: "fruit", quantity: 12 }, { name: "fish", type: "meat", quantity: 22 }, ]; const restock = { restock: true }; const sufficient = { restock: false }; const result = Map.groupBy(inventory, ({ quantity }) => quantity < 6 ? restock : sufficient, ); console.log(result.get(restock)); // [{ name: "bananas", type: "fruit", quantity: 5 }] Syntax js Map.groupBy(items, callbackFn) Parameters items An iterable (such as an Array ) whose elements will be grouped. callbackFn A function to execute for each element in the iterable. It should return a value ( object or primitive ) indicating the group of the current element. The function is called with the following arguments: element The current element being processed. index The index of the current element being processed. Return value A Map object with keys for each group, each assigned to an array containing the elements of the associated group. Description Map.groupBy() calls a provided callbackFn function once for each element in an iterable. The callback function should return a value indicating the group of the associated element. The values returned by callbackFn are used as keys for the Map returned by Map.groupBy() . Each key has an associated array containing all the elements for which the callback returned the same value. The elements in the returned Map and the original iterable are the same (not deep copies ). Changing the internal structure of the elements will be reflected in both the original iterable and the returned Map . This method is useful when you need to group information that is related to a particular object that might potentially change over time. This is because even if the object is modified, it will continue to work as a key to the returned Map . If you instead create a string representation for the object and use that as a grouping key in Object.groupBy() , you must maintain the mapping between the original object and its representation as the object changes. Note: To access the groups in the returned Map , you must use the same object that was originally used as a key in the Map (although you may modify its properties). You can't use another object that just happens to have the same name and properties. Map.groupBy does not read the value of this . It can be called on any object and a new Map instance will be returned. Examples Using Map.groupBy() First we define an array containing objects representing an inventory of different foodstuffs. Each food has a type and a quantity . js const inventory = [ { name: "asparagus", type: "vegetables", quantity: 9 }, { name: "bananas", type: "fruit", quantity: 5 }, { name: "goat", type: "meat", quantity: 23 }, { name: "cherries", type: "fruit", quantity: 12 }, { name: "fish", type: "meat", quantity: 22 }, ]; The code below uses Map.groupBy() with an arrow function that returns the object keys named restock or sufficient , depending on whether the element has quantity < 6 . The returned result object is a Map so we need to call get() with the key to obtain the array. js const restock = { restock: true }; const sufficient = { restock: false }; const result = Map.groupBy(inventory, ({ quantity }) => quantity < 6 ? restock : sufficient, ); console.log(result.get(restock)); // [{ name: "bananas", type: "fruit", quantity: 5 }] Note that the function argument { quantity } is a basic example of object destructuring syntax for function arguments . This unpacks the quantity property of an object passed as a parameter, and assigns it to a variable named quantity in the body of the function. This is a very succinct way to access the relevant values of elements within a function. The key to a Map can be modified and still used. However you can't recreate the key and still use it. For this reason it is important that anything that needs to use the map keeps a reference to its keys. js // The key can be modified and still used restock["fast"] = true; console.log(result.get(restock)); // [{ name: "bananas", type: "fruit", quantity: 5 }] // A new key can't be used, even if it has the same structure! const restock2 = { restock: true }; console.log(result.get(restock2)); // undefined Specifications Specification ECMAScript® 2026 Language Specification # sec-map.groupby Browser compatibility Loading… See also Polyfill of Map.groupBy in core-js es-shims polyfill of Map.groupBy Indexed collections guide Array.prototype.reduce() Map() Object.groupBy() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Map Constructor Map() Static methods groupBy() Static properties [Symbol .species] Instance methods clear() delete() entries() forEach() get() getOrInsert() Experimental getOrInsertComputed() Experimental has() keys() set() values() [Symbol .iterator]() Instance properties size Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .