Math.clz32() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Math clz32() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Math.clz32() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it // 00000000000000000000000000000001 console.log(Math.clz32(1)); // Expected output: 31 // 00000000000000000000000000000100 console.log(Math.clz32(4)); // Expected output: 29 // 00000000000000000000001111101000 console.log(Math.clz32(1000)); // Expected output: 22 Syntax js Math.clz32(x) Parameters x A number. Return value The number of leading zero bits in the 32-bit binary representation of x . Description clz32 is short for C ount L eading Z eros 32 . If x is not a number, it will be converted to a number first, then converted to a 32-bit unsigned integer. If the converted 32-bit unsigned integer is 0 , 32 is returned, because all bits are 0 . If the most significant bit is 1 (i.e., the number is greater than or equal to 2 31 ), 0 is returned. This function is particularly useful for systems that compile to JS, like Emscripten . Examples Using Math.clz32() js Math.clz32(1); // 31 Math.clz32(1000); // 22 Math.clz32(); // 32 const stuff = [ NaN, Infinity, -Infinity, 0, -0, false, null, undefined, "foo", {}, [], ]; stuff.every((n) => Math.clz32(n) === 32); // true Math.clz32(true); // 31 Math.clz32(3.5); // 30 Implementing Count Leading Ones and beyond At present, there is no Math.clon for "Count Leading Ones" (named "clon", not "clo", because "clo" and "clz" are too similar especially for non-English-speaking people). However, a clon function can easily be created by inverting the bits of a number and passing the result to Math.clz32 . Doing this will work because the inverse of 1 is 0 and vice versa. Thus, inverting the bits will inverse the measured quantity of 0's (from Math.clz32 ), thereby making Math.clz32 count the number of ones instead of counting the number of zeros. Consider the following 32-bit word: js const a = 32776; // 00000000000000001000000000001000 (16 leading zeros) Math.clz32(a); // 16 const b = ~32776; // 11111111111111110111111111110111 (32776 inverted, 0 leading zeros) Math.clz32(b); // 0 (this is equal to how many leading one's there are in a) Using this logic, a clon function can be created as follows: js const clz = Math.clz32; function clon(integer) { return clz(~integer); } Further, this technique could be extended to create a jumpless "Count Trailing Zeros" function, as seen below. The ctrz function takes a bitwise AND of the integer with its two's complement. By how two's complement works, all trailing zeros will be converted to ones, and then when adding 1, it would be carried over until the first 0 (which was originally a 1 ) is reached. All bits higher than this one stay the same and are inverses of the original integer's bits. Therefore, when doing bitwise AND with the original integer, all higher bits become 0 , which can be counted with clz . The number of trailing zeros, plus the first 1 bit, plus the leading bits that were counted by clz , total to 32. js function ctrz(integer) { integer >>>= 0; // coerce to Uint32 if (integer === 0) { // skipping this step would make it return -1 return 32; } integer &= -integer; // equivalent to `int = int & (~int + 1)` return 31 - clz(integer); } Then we can define a "Count Trailing Ones" function like so: js function ctron(integer) { return ctrz(~integer); } These helper functions can be made into an asm.js module for a potential performance improvement. js const countTrailsMethods = (function (stdlib, foreign, heap) { "use asm"; const clz = stdlib.Math.clz32; // count trailing zeros function ctrz(integer) { integer = integer | 0; // coerce to an integer if ((integer | 0) == 0) { // skipping this step would make it return -1 return 32; } // Note: asm.js doesn't have compound assignment operators such as &= integer = integer & -integer; // equivalent to `int = int & (~int + 1)` return (31 - clz(integer)) | 0; } // count trailing ones function ctron(integer) { integer = integer | 0; // coerce to an integer return ctrz(~integer) | 0; } // asm.js demands plain objects: return { ctrz: ctrz, ctron: ctron }; })(window, null, null); const { ctrz, ctron } = countTrailsMethods; Specifications Specification ECMAScript® 2026 Language Specification # sec-math.clz32 Browser compatibility Loading… See also Polyfill of Math.clz32 in core-js es-shims polyfill of Math.clz32 Math Math.imul Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Math Static methods abs() acos() acosh() asin() asinh() atan() atan2() atanh() cbrt() ceil() clz32() cos() cosh() exp() expm1() f16round() floor() fround() hypot() imul() log() log1p() log2() log10() max() min() pow() random() round() sign() sin() sinh() sqrt() sumPrecise() tan() tanh() trunc() Static properties E LN2 LN10 LOG2E LOG10E PI SQRT1_2 SQRT2 Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .