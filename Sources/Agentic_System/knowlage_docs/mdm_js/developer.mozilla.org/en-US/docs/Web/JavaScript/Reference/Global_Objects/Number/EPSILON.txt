Number.EPSILON - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Number EPSILON Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Number.EPSILON Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. Learn more See full compatibility Report feedback The Number.EPSILON static data property represents the difference between 1 and the smallest floating point number greater than 1. In this article Try it Value Description Examples Specifications Browser compatibility See also Try it const result = Math.abs(0.2 - 0.3 + 0.1); console.log(result); // Expected output: 2.7755575615628914e-17 console.log(result < Number.EPSILON); // Expected output: true Value 2 -52 , or approximately 2.2204460492503130808472633361816E-16 . Property attributes of Number.EPSILON Writable no Enumerable no Configurable no Description Number.EPSILON is the difference between 1 and the next greater number representable in the Number format, because double precision floating point format only has 52 bits to represent the mantissa , and the lowest bit has a significance of 2 -52 . Note that the absolute accuracy of floating numbers decreases as the number gets larger, because the exponent grows while the mantissa's accuracy stays the same. Number.MIN_VALUE is the smallest representable positive number, which is much smaller than Number.EPSILON . Because EPSILON is a static property of Number , you always use it as Number.EPSILON , rather than as a property of a number value. Examples Testing equality Any number encoding system occupying a finite number of bits, of whatever base you choose (e.g., decimal or binary), will necessarily be unable to represent all numbers exactly, because you are trying to represent an infinite number of points on the number line using a finite amount of memory. For example, a base-10 (decimal) system cannot represent 1/3 exactly, and a base-2 (binary) system cannot represent 0.1 exactly. Thus, for example, 0.1 + 0.2 is not exactly equal to 0.3 : js console.log(0.1 + 0.2); // 0.30000000000000004 console.log(0.1 + 0.2 === 0.3); // false For this reason, it is often advised that floating point numbers should never be compared with === . Instead, we can deem two numbers as equal if they are close enough to each other. The Number.EPSILON constant is usually a reasonable threshold for errors if the arithmetic is around the magnitude of 1 , because EPSILON , in essence, specifies how accurate the number "1" is. js function equal(x, y) { return Math.abs(x - y) < Number.EPSILON; } const x = 0.2; const y = 0.3; const z = 0.1; console.log(equal(x + z, y)); // true However, Number.EPSILON is inappropriate for any arithmetic operating on a larger magnitude. If your data is on the 10 3 order of magnitude, the decimal part will have a much smaller accuracy than Number.EPSILON : js function equal(x, y) { return Math.abs(x - y) < Number.EPSILON; } const x = 1000.1; const y = 1000.2; const z = 2000.3; console.log(x + y); // 2000.3000000000002; error of 10^-13 instead of 10^-16 console.log(equal(x + y, z)); // false In this case, a larger tolerance is required. As the numbers compared have a magnitude of approximately 2000 , a multiplier such as 2000 * Number.EPSILON creates enough tolerance for this instance. js function equal(x, y, tolerance = Number.EPSILON) { return Math.abs(x - y) < tolerance; } const x = 1000.1; const y = 1000.2; const z = 2000.3; console.log(equal(x + y, z, 2000 * Number.EPSILON)); // true In addition to magnitude, it is important to consider the accuracy of your input. For example, if the numbers are collected from a form input and the input value can only be adjusted by steps of 0.1 (i.e., <input type="number" step="0.1"> ), it usually makes sense to allow a much larger tolerance, such as 0.01 , since the data only has a precision of 0.1 . Note: Important takeaway: do not simply use Number.EPSILON as a threshold for equality testing. Use a threshold that is appropriate for the magnitude and accuracy of the numbers you are comparing. Specifications Specification ECMAScript® 2026 Language Specification # sec-number.epsilon Browser compatibility Loading… See also Polyfill of Number.EPSILON in core-js es-shims polyfill of Number.EPSILON Number Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Number Constructor Number() Static methods isFinite() isInteger() isNaN() isSafeInteger() parseFloat() parseInt() Static properties EPSILON MAX_SAFE_INTEGER MAX_VALUE MIN_SAFE_INTEGER MIN_VALUE NaN NEGATIVE_INFINITY POSITIVE_INFINITY Instance methods toExponential() toFixed() toLocaleString() toPrecision() toString() valueOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .