Number() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Number Number() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 中文 (简体) Number() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Number() constructor creates Number objects. When called as a function, it returns primitive values of type Number. In this article Syntax Examples Specifications Browser compatibility See also Syntax js new Number(value) Number(value) Note: Number() can be called with or without new , but with different effects. See Return value . Parameters value The numeric value of the object being created. Return value When Number() is called as a function (without new ), it returns value coerced to a number primitive . Specially, BigInts values are converted to numbers instead of throwing. If value is absent, it becomes 0 . When Number() is called as a constructor (with new ), it uses the coercion process above and returns a wrapping Number object, which is not a primitive. Warning: You should rarely find yourself using Number as a constructor. Examples Creating Number objects js const a = new Number("123"); // a === 123 is false const b = Number("123"); // b === 123 is true a instanceof Number; // is true b instanceof Number; // is false typeof a; // "object" typeof b; // "number" Using Number() to convert a BigInt to a number Number() is the only case where a BigInt can be converted to a number without throwing, because it's very explicit. js +1n; // TypeError: Cannot convert a BigInt value to a number 0 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions js Number(1n); // 1 Note that this may result in loss of precision, if the BigInt is too large to be safely represented . js BigInt(Number(2n ** 54n + 1n)) === 2n ** 54n + 1n; // false Specifications Specification ECMAScript® 2026 Language Specification # sec-number-constructor Browser compatibility Loading… See also Polyfill of modern Number behavior (with support binary and octal literals) in core-js NaN Math BigInt Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Number Constructor Number() Static methods isFinite() isInteger() isNaN() isSafeInteger() parseFloat() parseInt() Static properties EPSILON MAX_SAFE_INTEGER MAX_VALUE MIN_SAFE_INTEGER MIN_VALUE NaN NEGATIVE_INFINITY POSITIVE_INFINITY Instance methods toExponential() toFixed() toLocaleString() toPrecision() toString() valueOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .