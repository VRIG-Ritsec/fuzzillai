Number.POSITIVE_INFINITY - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Number POSITIVE_INFINITY Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Number.POSITIVE_INFINITY Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Number.POSITIVE_INFINITY static data property represents the positive Infinity value. In this article Try it Value Description Examples Specifications Browser compatibility See also Try it function checkNumber(bigNumber) { if (bigNumber === Number.POSITIVE_INFINITY) { return "Process number as Infinity"; } return bigNumber; } console.log(checkNumber(Number.MAX_VALUE)); // Expected output: 1.7976931348623157e+308 console.log(checkNumber(Number.MAX_VALUE * 2)); // Expected output: "Process number as Infinity" Value The same as the value of the global Infinity property. Property attributes of Number.POSITIVE_INFINITY Writable no Enumerable no Configurable no Description The Number.POSITIVE_INFINITY value behaves slightly differently than mathematical infinity: Any positive value, including POSITIVE_INFINITY , multiplied by POSITIVE_INFINITY is POSITIVE_INFINITY . Any negative value, including NEGATIVE_INFINITY , multiplied by POSITIVE_INFINITY is NEGATIVE_INFINITY . Any positive number divided by POSITIVE_INFINITY is positive zero (as defined in IEEE 754 ). Any negative number divided by POSITIVE_INFINITY is negative zero (as defined in IEEE 754 . Zero multiplied by POSITIVE_INFINITY is NaN . NaN multiplied by POSITIVE_INFINITY is NaN . POSITIVE_INFINITY , divided by any negative value except NEGATIVE_INFINITY , is NEGATIVE_INFINITY . POSITIVE_INFINITY , divided by any positive value except POSITIVE_INFINITY , is POSITIVE_INFINITY . POSITIVE_INFINITY , divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY , is NaN . Number.POSITIVE_INFINITY > x is true for any number x that isn't POSITIVE_INFINITY . You might use the Number.POSITIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that NaN would be more appropriate in such a case. Because POSITIVE_INFINITY is a static property of Number , you always use it as Number.POSITIVE_INFINITY , rather than as a property of a number value. Examples Using POSITIVE_INFINITY In the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the if statement executes, bigNumber has the value Infinity , so bigNumber is set to a more manageable value before continuing. js let bigNumber = Number.MAX_VALUE * 2; if (bigNumber === Number.POSITIVE_INFINITY) { bigNumber = returnFinite(); } Specifications Specification ECMAScript® 2026 Language Specification # sec-number.positive_infinity Browser compatibility Loading… See also Number.NEGATIVE_INFINITY Number.isFinite() Infinity isFinite() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Number Constructor Number() Static methods isFinite() isInteger() isNaN() isSafeInteger() parseFloat() parseInt() Static properties EPSILON MAX_SAFE_INTEGER MAX_VALUE MIN_SAFE_INTEGER MIN_VALUE NaN NEGATIVE_INFINITY POSITIVE_INFINITY Instance methods toExponential() toFixed() toLocaleString() toPrecision() toString() valueOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .