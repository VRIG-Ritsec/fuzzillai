Object.prototype.__lookupSetter__() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object __lookupSetter__() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Object.prototype.__lookupSetter__() Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. Note: This feature is deprecated in favor of the Object.getOwnPropertyDescriptor() API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere. The __lookupSetter__() method of Object instances returns the function bound as a setter to the specified property. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js __lookupSetter__(prop) Parameters prop A string containing the name of the property whose setter should be returned. Return value The function bound as a setter to the specified property. Returns undefined if no such property is found, or the property is a data property . Description All objects that inherit from Object.prototype (that is, all except null -prototype objects ) inherit the __lookupSetter__() method. If a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property only calls the function when it's being set. __lookupSetter__() can be used to obtain a reference to the setter function. __lookupSetter__() walks up the prototype chain to find the specified property. If any object along the prototype chain has the specified own property , the set attribute of the property descriptor for that property is returned. If that property is a data property, undefined is returned. If the property is not found along the entire prototype chain, undefined is also returned. __lookupSetter__() is defined in the spec as "normative optional", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements __lookupSetter__() , it also needs to implement the __lookupGetter__() , __defineGetter__() , and __defineSetter__() methods. Examples Using __lookupSetter__() js const obj = { set foo(value) { this.bar = value; }, }; obj.__lookupSetter__("foo"); // [Function: set foo] Looking up a property's setter in the standard way You should use the Object.getOwnPropertyDescriptor() API to look up a property's setter. Compared to __lookupSetter__() , this method allows looking up symbol properties. The Object.getOwnPropertyDescriptor() method also works with null -prototype objects , which don't inherit from Object.prototype and therefore don't have the __lookupSetter__() method. If __lookupSetter__() 's behavior of walking up the prototype chain is important, you may implement it yourself with Object.getPrototypeOf() . js const obj = { set foo(value) { this.bar = value; }, }; Object.getOwnPropertyDescriptor(obj, "foo").set; // [Function: set foo] js const obj2 = { __proto__: { set foo(value) { this.bar = value; }, }, }; function findSetter(obj, prop) { while (obj) { const desc = Object.getOwnPropertyDescriptor(obj, prop); if (desc) { return desc.set; } obj = Object.getPrototypeOf(obj); } } console.log(findSetter(obj2, "foo")); // [Function: set foo] Specifications Specification ECMAScript® 2026 Language Specification # sec-object.prototype.__lookupSetter__ Browser compatibility Loading… See also Polyfill of Object.prototype.__lookupSetter__ in core-js Object.prototype.__lookupGetter__() set Object.getOwnPropertyDescriptor() Object.prototype.__defineGetter__() Object.prototype.__defineSetter__() JS Guide: Defining Getters and Setters Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .