Object.getOwnPropertyNames() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object getOwnPropertyNames() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Object.getOwnPropertyNames() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Object.getOwnPropertyNames() static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const object = { a: 1, b: 2, c: 3, }; console.log(Object.getOwnPropertyNames(object)); // Expected output: Array ["a", "b", "c"] Syntax js Object.getOwnPropertyNames(obj) Parameters obj The object whose enumerable and non-enumerable properties are to be returned. Return value An array of strings that corresponds to the properties found directly in the given object. Description Object.getOwnPropertyNames() returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object obj . The ordering of the enumerable properties in the array is consistent with the ordering exposed by a for...in loop (or by Object.keys() ) over the properties of the object. The non-negative integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion. In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError . In ES2015, a non-object argument will be coerced to an object. js Object.getOwnPropertyNames("foo"); // TypeError: "foo" is not an object (ES5 code) Object.getOwnPropertyNames("foo"); // ["0", "1", "2", "length"] (ES2015 code) Examples Using Object.getOwnPropertyNames() js const arr = ["a", "b", "c"]; console.log(Object.getOwnPropertyNames(arr).sort()); // ["0", "1", "2", "length"] // Array-like object const obj = { 0: "a", 1: "b", 2: "c" }; console.log(Object.getOwnPropertyNames(obj).sort()); // ["0", "1", "2"] Object.getOwnPropertyNames(obj).forEach((val, idx, array) => { console.log(`${val} -> ${obj[val]}`); }); // 0 -> a // 1 -> b // 2 -> c // non-enumerable property const myObj = Object.create( {}, { getFoo: { value() { return this.foo; }, enumerable: false, }, }, ); myObj.foo = 1; console.log(Object.getOwnPropertyNames(myObj).sort()); // ["foo", "getFoo"] If you want only the enumerable properties, see Object.keys() or use a for...in loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with Object.hasOwn() ). Items on the prototype chain are not listed: js function ParentClass() {} ParentClass.prototype.inheritedMethod = function () {}; function ChildClass() { this.prop = 5; this.method = function () {}; } ChildClass.prototype = new ParentClass(); ChildClass.prototype.prototypeMethod = function () {}; console.log(Object.getOwnPropertyNames(new ChildClass())); // ["prop", "method"] Get non-enumerable properties only This uses the Array.prototype.filter() function to remove the enumerable keys (obtained with Object.keys() ) from a list of all keys (obtained with Object.getOwnPropertyNames() ) thus giving only the non-enumerable keys as output. js const target = myObject; const enumAndNonEnum = Object.getOwnPropertyNames(target); const enumOnly = new Set(Object.keys(target)); const nonEnumOnly = enumAndNonEnum.filter((key) => !enumOnly.has(key)); console.log(nonEnumOnly); Specifications Specification ECMAScript® 2026 Language Specification # sec-object.getownpropertynames Browser compatibility Loading… See also Polyfill of Object.getOwnPropertyNames in core-js Enumerability and ownership of properties Object.hasOwn() Object.prototype.propertyIsEnumerable() Object.create() Object.keys() Array.prototype.forEach() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .