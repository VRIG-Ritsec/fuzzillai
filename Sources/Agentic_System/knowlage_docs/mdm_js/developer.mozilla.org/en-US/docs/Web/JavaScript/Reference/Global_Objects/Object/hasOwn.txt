Object.hasOwn() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object hasOwn() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) 中文 (简体) Object.hasOwn() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨March 2022⁩. Learn more See full compatibility Report feedback The Object.hasOwn() static method returns true if the specified object has the indicated property as its own property. If the property is inherited, or does not exist, the method returns false . Note: Object.hasOwn() is intended as a replacement for Object.prototype.hasOwnProperty() . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const object = { prop: "exists", }; console.log(Object.hasOwn(object, "prop")); // Expected output: true console.log(Object.hasOwn(object, "toString")); // Expected output: false console.log(Object.hasOwn(object, "undeclaredPropertyValue")); // Expected output: false Syntax js Object.hasOwn(obj, prop) Parameters obj The JavaScript object instance to test. prop The String name or Symbol of the property to test. Return value true if the specified object has directly defined the specified property. Otherwise false Description The Object.hasOwn() method returns true if the specified property is a direct property of the object — even if the property value is null or undefined . The method returns false if the property is inherited, or has not been declared at all. Unlike the in operator, this method does not check for the specified property in the object's prototype chain. It is recommended over Object.prototype.hasOwnProperty() because it works for null -prototype objects and with objects that have overridden the inherited hasOwnProperty() method. While it is possible to workaround these problems by accessing Object.prototype.hasOwnProperty() on another object (like Object.prototype.hasOwnProperty.call(obj, prop) , Object.hasOwn() is more intuitive and concise. Examples Using Object.hasOwn() to test for a property's existence The following code shows how to determine whether the example object contains a property named prop . js const example = {}; Object.hasOwn(example, "prop"); // false - 'prop' has not been defined example.prop = "exists"; Object.hasOwn(example, "prop"); // true - 'prop' has been defined example.prop = null; Object.hasOwn(example, "prop"); // true - own property exists with value of null example.prop = undefined; Object.hasOwn(example, "prop"); // true - own property exists with value of undefined Direct vs. inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: js const example = {}; example.prop = "exists"; // `hasOwn` will only return true for direct properties: Object.hasOwn(example, "prop"); // true Object.hasOwn(example, "toString"); // false Object.hasOwn(example, "hasOwnProperty"); // false // The `in` operator will return true for direct or inherited properties: "prop" in example; // true "toString" in example; // true "hasOwnProperty" in example; // true Iterating over the properties of an object To iterate over the enumerable properties of an object, you should use: js const example = { foo: true, bar: true }; for (const name of Object.keys(example)) { // … } But if you need to use for...in , you can use Object.hasOwn() to skip the inherited properties: js const example = { foo: true, bar: true }; for (const name in example) { if (Object.hasOwn(example, name)) { // … } } Checking if an Array index exists The elements of an Array are defined as direct properties, so you can use hasOwn() method to check whether a particular index exists: js const fruits = ["Apple", "Banana", "Watermelon", "Orange"]; Object.hasOwn(fruits, 3); // true ('Orange') Object.hasOwn(fruits, 4); // false - not defined Problematic cases for hasOwnProperty() This section demonstrates that Object.hasOwn() is immune to the problems that affect hasOwnProperty() . Firstly, it can be used with objects that have re-implemented hasOwnProperty() . In the example below, the re-implemented hasOwnProperty() method reports false for every property, but the behavior of Object.hasOwn() remains unaffected: js const foo = { hasOwnProperty() { return false; }, bar: "The dragons be out of office", }; console.log(foo.hasOwnProperty("bar")); // false console.log(Object.hasOwn(foo, "bar")); // true It can also be used with null -prototype objects . These do not inherit from Object.prototype , and so hasOwnProperty() is inaccessible. js const foo = Object.create(null); foo.prop = "exists"; console.log(foo.hasOwnProperty("prop")); // Uncaught TypeError: foo.hasOwnProperty is not a function console.log(Object.hasOwn(foo, "prop")); // true Specifications Specification ECMAScript® 2026 Language Specification # sec-object.hasown Browser compatibility Loading… See also Polyfill of Object.hasOwn in core-js es-shims polyfill of Object.hasOwn Object.prototype.hasOwnProperty() Enumerability and ownership of properties Object.getOwnPropertyNames() for...in in Inheritance and the prototype chain Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .