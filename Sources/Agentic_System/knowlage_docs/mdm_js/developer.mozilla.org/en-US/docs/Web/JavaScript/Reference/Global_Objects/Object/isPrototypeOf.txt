Object.prototype.isPrototypeOf() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object isPrototypeOf() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Object.prototype.isPrototypeOf() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The isPrototypeOf() method of Object instances checks if this object exists in another object's prototype chain. Note: isPrototypeOf() differs from the instanceof operator. In the expression object instanceof AFunction , object 's prototype chain is checked against AFunction.prototype , not against AFunction itself. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it function Foo() {} function Bar() {} Bar.prototype = Object.create(Foo.prototype); const bar = new Bar(); console.log(Foo.prototype.isPrototypeOf(bar)); // Expected output: true console.log(Bar.prototype.isPrototypeOf(bar)); // Expected output: true Syntax js isPrototypeOf(object) Parameters object The object whose prototype chain will be searched. Return value A boolean indicating whether the calling object ( this ) lies in the prototype chain of object . Directly returns false when object is not an object (i.e., a primitive). Exceptions TypeError Thrown if this is null or undefined (because it can't be converted to an object ). Description All objects that inherit from Object.prototype (that is, all except null -prototype objects ) inherit the isPrototypeOf() method. This method allows you to check whether or not the object exists within another object's prototype chain. If the object passed as the parameter is not an object (i.e., a primitive), the method directly returns false . Otherwise, the this value is converted to an object , and the prototype chain of object is searched for the this value, until the end of the chain is reached or the this value is found. Examples Using isPrototypeOf() This example demonstrates that Baz.prototype , Bar.prototype , Foo.prototype and Object.prototype exist in the prototype chain for object baz : js class Foo {} class Bar extends Foo {} class Baz extends Bar {} const foo = new Foo(); const bar = new Bar(); const baz = new Baz(); // prototype chains: // foo: Foo --> Object // bar: Bar --> Foo --> Object // baz: Baz --> Bar --> Foo --> Object console.log(Baz.prototype.isPrototypeOf(baz)); // true console.log(Baz.prototype.isPrototypeOf(bar)); // false console.log(Baz.prototype.isPrototypeOf(foo)); // false console.log(Bar.prototype.isPrototypeOf(baz)); // true console.log(Bar.prototype.isPrototypeOf(foo)); // false console.log(Foo.prototype.isPrototypeOf(baz)); // true console.log(Foo.prototype.isPrototypeOf(bar)); // true console.log(Object.prototype.isPrototypeOf(baz)); // true The isPrototypeOf() method — along with the instanceof operator — comes in particularly handy if you have code that can only function when dealing with objects descended from a specific prototype chain; e.g., to guarantee that certain methods or properties will be present on that object. For example, to execute some code that's only safe to run if a baz object has Foo.prototype in its prototype chain, you can do this: js if (Foo.prototype.isPrototypeOf(baz)) { // do something safe } However, Foo.prototype existing in baz 's prototype chain doesn't imply baz was created using Foo as its constructor. For example, baz could be directly assigned with Foo.prototype as its prototype. In this case, if your code reads private fields of Foo from baz , it would still fail: js class Foo { #value = "foo"; static getValue(x) { return x.#value; } } const baz = { __proto__: Foo.prototype }; if (Foo.prototype.isPrototypeOf(baz)) { console.log(Foo.getValue(baz)); // TypeError: Cannot read private member #value from an object whose class did not declare it } The same applies to instanceof . If you need to read private fields in a secure way, offer a branded check method using in instead. js class Foo { #value = "foo"; static getValue(x) { return x.#value; } static isFoo(x) { return #value in x; } } const baz = { __proto__: Foo.prototype }; if (Foo.isFoo(baz)) { // Doesn't run, because baz is not a Foo console.log(Foo.getValue(baz)); } Specifications Specification ECMAScript® 2026 Language Specification # sec-object.prototype.isprototypeof Browser compatibility Loading… See also instanceof Object.getPrototypeOf() Object.setPrototypeOf() Inheritance and the prototype chain Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .