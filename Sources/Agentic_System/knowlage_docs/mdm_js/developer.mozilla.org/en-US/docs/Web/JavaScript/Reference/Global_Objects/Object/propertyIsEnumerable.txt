Object.prototype.propertyIsEnumerable() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object propertyIsEnumerable() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Object.prototype.propertyIsEnumerable() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The propertyIsEnumerable() method of Object instances returns a boolean indicating whether the specified property is this object's enumerable own property. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const object = {}; const array = []; object.foo = 42; array[0] = 42; console.log(object.propertyIsEnumerable("foo")); // Expected output: true console.log(array.propertyIsEnumerable(0)); // Expected output: true console.log(array.propertyIsEnumerable("length")); // Expected output: false Syntax js propertyIsEnumerable(prop) Parameters prop The name of the property to test. Can be a string or a Symbol . Return value A boolean value indicating whether the specified property is enumerable and is the object's own property. Description All objects that inherit from Object.prototype (that is, all except null -prototype objects ) inherit the propertyIsEnumerable() method. This method determines if the specified property, string or symbol, is an enumerable own property of the object. If the object does not have the specified property, this method returns false . This method is equivalent to Object.getOwnPropertyDescriptor(obj, prop)?.enumerable ?? false . Examples Using propertyIsEnumerable() The following example shows the use of propertyIsEnumerable() on objects and arrays. js const o = {}; const a = []; o.prop = "is enumerable"; a[0] = "is enumerable"; o.propertyIsEnumerable("prop"); // true a.propertyIsEnumerable(0); // true User-defined vs. built-in objects Most built-in properties are non-enumerable by default, while user-created object properties are often enumerable, unless explicitly designated otherwise. js const a = ["is enumerable"]; a.propertyIsEnumerable(0); // true a.propertyIsEnumerable("length"); // false Math.propertyIsEnumerable("random"); // false globalThis.propertyIsEnumerable("Math"); // false Direct vs. inherited properties Only enumerable own properties cause propertyIsEnumerable() to return true , although all enumerable properties, including inherited ones, are visited by the for...in loop. js const o1 = { enumerableInherited: "is enumerable", }; Object.defineProperty(o1, "nonEnumerableInherited", { value: "is non-enumerable", enumerable: false, }); const o2 = { // o1 is the prototype of o2 __proto__: o1, enumerableOwn: "is enumerable", }; Object.defineProperty(o2, "nonEnumerableOwn", { value: "is non-enumerable", enumerable: false, }); o2.propertyIsEnumerable("enumerableInherited"); // false o2.propertyIsEnumerable("nonEnumerableInherited"); // false o2.propertyIsEnumerable("enumerableOwn"); // true o2.propertyIsEnumerable("nonEnumerableOwn"); // false Testing symbol properties Symbol properties are also supported by propertyIsEnumerable() . Note that most enumeration methods only visit string properties; enumerability of symbol properties is only useful when using Object.assign() or spread syntax . For more information, see Enumerability and ownership of properties . js const sym = Symbol("enumerable"); const sym2 = Symbol("non-enumerable"); const o = { [sym]: "is enumerable", }; Object.defineProperty(o, sym2, { value: "is non-enumerable", enumerable: false, }); o.propertyIsEnumerable(sym); // true o.propertyIsEnumerable(sym2); // false Usage with null-prototype objects Because null -prototype objects do not inherit from Object.prototype , they do not inherit the propertyIsEnumerable() method. You must call Object.prototype.propertyIsEnumerable with the object as this instead. js const o = { __proto__: null, enumerableOwn: "is enumerable", }; o.propertyIsEnumerable("enumerableOwn"); // TypeError: o.propertyIsEnumerable is not a function Object.prototype.propertyIsEnumerable.call(o, "enumerableOwn"); // true Alternatively, you may use Object.getOwnPropertyDescriptor() instead, which also helps to distinguish between non-existent properties and actually non-enumerable properties. js const o = { __proto__: null, enumerableOwn: "is enumerable", }; Object.getOwnPropertyDescriptor(o, "enumerableOwn")?.enumerable; // true Object.getOwnPropertyDescriptor(o, "nonExistent")?.enumerable; // undefined Specifications Specification ECMAScript® 2026 Language Specification # sec-object.prototype.propertyisenumerable Browser compatibility Loading… See also Enumerability and ownership of properties for...in Object.keys() Object.defineProperty() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .