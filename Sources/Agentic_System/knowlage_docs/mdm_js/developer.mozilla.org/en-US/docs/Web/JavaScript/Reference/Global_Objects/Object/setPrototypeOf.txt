Object.setPrototypeOf() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object setPrototypeOf() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 Português (do Brasil) Русский 中文 (简体) Object.setPrototypeOf() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. Learn more See full compatibility Report feedback The Object.setPrototypeOf() static method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null . Warning: Changing the [[Prototype]] of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the Object.setPrototypeOf(...) statement, but may extend to any code that has access to any object whose [[Prototype]] has been altered. You can read more in JavaScript engine fundamentals: optimizing prototypes . Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the [[Prototype]] of an object. Instead, create a new object with the desired [[Prototype]] using Object.create() . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const obj = {}; const parent = { foo: "bar" }; console.log(obj.foo); // Expected output: undefined Object.setPrototypeOf(obj, parent); console.log(obj.foo); // Expected output: "bar" Syntax js Object.setPrototypeOf(obj, prototype) Parameters obj The object which is to have its prototype set. prototype The object's new prototype (an object or null ). Return value The specified object. Exceptions TypeError Thrown in one of the following cases: The obj parameter is undefined or null . The obj parameter is non-extensible , or it's an immutable prototype exotic object , such as Object.prototype or window . However, the error is not thrown if the new prototype is the same value as the original prototype of obj . The prototype parameter is not an object or null . Description Object.setPrototypeOf() is generally considered the proper way to set the prototype of an object. You should always use it in favor of the deprecated Object.prototype.__proto__ accessor. If the obj parameter is not an object (e.g., number, string, etc.), this method does nothing — without coercing it to an object or attempting to set its prototype — and directly returns obj as a primitive value. If prototype is the same value as the prototype of obj , then obj is directly returned, without causing a TypeError even when obj has immutable prototype. For security concerns, there are certain built-in objects that are designed to have an immutable prototype . This prevents prototype pollution attacks , especially proxy-related ones . The core language only specifies Object.prototype as an immutable prototype exotic object, whose prototype is always null . In browsers, window and location are two other very common examples. js Object.isExtensible(Object.prototype); // true; you can add more properties Object.setPrototypeOf(Object.prototype, {}); // TypeError: Immutable prototype object '#<Object>' cannot have their prototype set Object.setPrototypeOf(Object.prototype, null); // No error; the prototype of `Object.prototype` is already `null` Examples Pseudoclassical inheritance using Object.setPrototypeOf() Inheritance in JS using classes. js class Human {} class SuperHero extends Human {} const superMan = new SuperHero(); However, if we want to implement subclasses without using class , we can do the following: js function Human(name, level) { this.name = name; this.level = level; } function SuperHero(name, level) { Human.call(this, name, level); } Object.setPrototypeOf(SuperHero.prototype, Human.prototype); // Set the `[[Prototype]]` of `SuperHero.prototype` // to `Human.prototype` // To set the prototypal inheritance chain Human.prototype.speak = function () { return `${this.name} says hello.`; }; SuperHero.prototype.fly = function () { return `${this.name} is flying.`; }; const superMan = new SuperHero("Clark Kent", 1); console.log(superMan.fly()); console.log(superMan.speak()); The similarity between classical inheritance (with classes) and pseudoclassical inheritance (with constructors' prototype property) as done above is mentioned in Inheritance chains . Since function constructors' prototype property is writable, you can reassign it to a new object created with Object.create() to achieve the same inheritance chain as well. There are caveats to watch out when using create() , such as remembering to re-add the constructor property. In the example below, which also uses classes, SuperHero is made to inherit from Human without using extends by using setPrototypeOf() instead. Warning: It is not advisable to use setPrototypeOf() instead of extends due to performance and readability reasons. js class Human {} class SuperHero {} // Set the instance properties Object.setPrototypeOf(SuperHero.prototype, Human.prototype); // Hook up the static properties Object.setPrototypeOf(SuperHero, Human); const superMan = new SuperHero(); Subclassing without extends is mentioned in ES-6 subclassing . Specifications Specification ECMAScript® 2026 Language Specification # sec-object.setprototypeof Browser compatibility Loading… See also Polyfill of Object.setPrototypeOf in core-js Reflect.setPrototypeOf() Object.prototype.isPrototypeOf() Object.getPrototypeOf() Object.prototype.__proto__ Inheritance chain ES6 In Depth: Subclassing on hacks.mozilla.org (2015) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Oct 17, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .