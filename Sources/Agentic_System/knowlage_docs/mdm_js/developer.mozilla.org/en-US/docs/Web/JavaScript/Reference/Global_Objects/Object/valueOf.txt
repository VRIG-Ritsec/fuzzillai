Object.prototype.valueOf() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Object valueOf() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Object.prototype.valueOf() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The valueOf() method of Object instances converts the this value to an object . This method is meant to be overridden by derived objects for custom type conversion logic. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it function MyNumberType(n) { this.number = n; } MyNumberType.prototype.valueOf = function () { return this.number; }; const object = new MyNumberType(4); console.log(object + 3); // Expected output: 7 Syntax js valueOf() Parameters None. Return value The this value, converted to an object. Note: In order for valueOf to be useful during type conversion, it must return a primitive. Because all primitive types have their own valueOf() methods, calling primitiveValue.valueOf() generally does not invoke Object.prototype.valueOf() . Description JavaScript calls the valueOf method to convert an object to a primitive value . You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. This method is called in priority by numeric conversion and primitive conversion , but string conversion calls toString() in priority, and toString() is very likely to return a string value (even for the Object.prototype.toString() base implementation), so valueOf() is usually not called in this case. All objects that inherit from Object.prototype (that is, all except null -prototype objects ) inherit the toString() method. The Object.prototype.valueOf() base implementation is deliberately useless: by returning an object, its return value will never be used by any primitive conversion algorithm . Many built-in objects override this method to return an appropriate primitive value. When you create a custom object, you can override valueOf() to call a custom method, so that your custom object can be converted to a primitive value. Generally, valueOf() is used to return a value that is most meaningful for the object — unlike toString() , it does not need to be a string. Alternatively, you can add a [Symbol.toPrimitive]() method, which allows even more control over the conversion process, and will always be preferred over valueOf or toString for any type conversion. Examples Using valueOf() The base valueOf() method returns the this value itself, converted to an object if it isn't already. Therefore its return value will never be used by any primitive conversion algorithm. js const obj = { foo: 1 }; console.log(obj.valueOf() === obj); // true console.log(Object.prototype.valueOf.call("primitive")); // [String: 'primitive'] (a wrapper object) Overriding valueOf for custom objects You can create a function to be called in place of the default valueOf method. Your function should take no arguments, since it won't be passed any when called during type conversion. For example, you can add a valueOf method to your custom class Box . js class Box { #value; constructor(value) { this.#value = value; } valueOf() { return this.#value; } } With the preceding code in place, any time an object of type Box is used in a context where it is to be represented as a primitive value (but not specifically a string), JavaScript automatically calls the function defined in the preceding code. js const box = new Box(123); console.log(box + 456); // 579 console.log(box == 123); // true An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows: js box.valueOf(); Using unary plus on objects Unary plus performs number coercion on its operand, which, for most objects without [Symbol.toPrimitive]() , means calling its valueOf() . However, if the object doesn't have a custom valueOf() method, the base implementation will cause valueOf() to be ignored and the return value of toString() to be used instead. js +new Date(); // the current timestamp; same as new Date().getTime() +{}; // NaN (toString() returns "[object Object]") +[]; // 0 (toString() returns an empty string list) +[1]; // 1 (toString() returns "1") +[1, 2]; // NaN (toString() returns "1,2") +new Set([1]); // NaN (toString() returns "[object Set]") +{ valueOf: () => 42 }; // 42 Specifications Specification ECMAScript® 2026 Language Specification # sec-object.prototype.valueof Browser compatibility Loading… See also Object.prototype.toString() parseInt() Symbol.toPrimitive Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Aug 19, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Object Constructor Object() Static methods assign() create() defineProperties() defineProperty() entries() freeze() fromEntries() getOwnPropertyDescriptor() getOwnPropertyDescriptors() getOwnPropertyNames() getOwnPropertySymbols() getPrototypeOf() groupBy() hasOwn() is() isExtensible() isFrozen() isSealed() keys() preventExtensions() seal() setPrototypeOf() values() Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .