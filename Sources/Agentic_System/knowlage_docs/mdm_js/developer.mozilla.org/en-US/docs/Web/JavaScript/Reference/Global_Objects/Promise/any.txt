Promise.any() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Promise any() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) Promise.any() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2020⁩. Learn more See full compatibility Report feedback The Promise.any() static method takes an iterable of promises as input and returns a single Promise . This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const promise1 = Promise.reject(new Error("error")); const promise2 = new Promise((resolve) => setTimeout(resolve, 100, "quick")); const promise3 = new Promise((resolve) => setTimeout(resolve, 500, "slow")); const promises = [promise1, promise2, promise3]; Promise.any(promises).then((value) => console.log(value)); // Expected output: "quick" Syntax js Promise.any(iterable) Parameters iterable An iterable (such as an Array ) of promises. Return value A Promise that is: Already rejected , if the iterable passed is empty. Asynchronously fulfilled , when any of the promises in the given iterable fulfills. The fulfillment value is the fulfillment value of the first promise that was fulfilled. Asynchronously rejected , when all of the promises in the given iterable reject. The rejection reason is an AggregateError containing an array of rejection reasons in its errors property. The errors are in the order of the promises passed, regardless of completion order. If the iterable passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) rejected. Description The Promise.any() method is one of the promise concurrency methods. This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one. Unlike Promise.all() , which returns an array of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: this method rejects upon receiving an empty iterable , since, truthfully, the iterable contains no items that fulfill. You may compare Promise.any() and Promise.all() with Array.prototype.some() and Array.prototype.every() . Also, unlike Promise.race() , which returns the first settled value (either fulfillment or rejection), this method returns the first fulfilled value. This method ignores all rejected promises up until the first promise that fulfills. Examples Using Promise.any() Promise.any() fulfills with the first promise to fulfill, even if a promise rejects first. This is in contrast to Promise.race() , which fulfills or rejects with the first promise to settle. js const pErr = new Promise((resolve, reject) => { reject(new Error("Always fails")); }); const pSlow = new Promise((resolve, reject) => { setTimeout(resolve, 500, "Done eventually"); }); const pFast = new Promise((resolve, reject) => { setTimeout(resolve, 100, "Done quick"); }); Promise.any([pErr, pSlow, pFast]).then((value) => { console.log(value); // pFast fulfills first }); // Logs: // Done quick Rejections with AggregateError Promise.any() rejects with an AggregateError if no promise fulfills. js const failure = new Promise((resolve, reject) => { reject(new Error("Always fails")); }); Promise.any([failure]).catch((err) => { console.log(err); }); // AggregateError: No Promise in Promise.any was resolved Displaying the first image loaded In this example, we have a function that fetches an image and returns a blob. We use Promise.any() to fetch a couple of images and display the first one available (i.e., whose promise has resolved). js async function fetchAndDecode(url, description) { const res = await fetch(url); if (!res.ok) { throw new Error(`HTTP error! status: ${res.status}`); } const data = await res.blob(); return [data, description]; } const coffee = fetchAndDecode("coffee.jpg", "Coffee"); const tea = fetchAndDecode("tea.jpg", "Tea"); Promise.any([coffee, tea]) .then(([blob, description]) => { const objectURL = URL.createObjectURL(blob); const image = document.createElement("img"); image.src = objectURL; image.alt = description; document.body.appendChild(image); }) .catch((e) => { console.error(e); }); Specifications Specification ECMAScript® 2026 Language Specification # sec-promise.any Browser compatibility Loading… See also Polyfill of Promise.any in core-js es-shims polyfill of Promise.any Promise Promise.all() Promise.allSettled() Promise.race() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Promise Constructor Promise() Static methods all() allSettled() any() race() reject() resolve() try() withResolvers() Static properties [Symbol .species] Instance methods catch() finally() then() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .