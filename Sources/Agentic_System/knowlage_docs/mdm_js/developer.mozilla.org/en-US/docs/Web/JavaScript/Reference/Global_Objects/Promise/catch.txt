Promise.prototype.catch() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Promise catch() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Promise.prototype.catch() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The catch() method of Promise instances schedules a function to be called when the promise is rejected. It immediately returns another Promise object, allowing you to chain calls to other promise methods. It is a shortcut for then(undefined, onRejected) . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const promise = new Promise((resolve, reject) => { throw new Error("Uh-oh!"); }); promise.catch((error) => { console.error(error); }); // Expected output: Error: Uh-oh! Syntax js promiseInstance.catch(onRejected) Parameters onRejected A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by catch() . The function is called with the following arguments: reason The value that the promise was rejected with. Return value Returns a new Promise . This new promise is always pending when returned, regardless of the current promise's status. If onRejected is called, the returned promise will resolve based on the return value of this call, or reject with the thrown error from this call. If the current promise fulfills, onRejected is not called and the returned promise fulfills to the same value. Description The catch method is used for error handling in promise composition. Since it returns a Promise , it can be chained in the same way as its sister method, then() . If a promise becomes rejected, and there are no rejection handlers to call (a handler can be attached through any of then() , catch() , or finally() ), then the rejection event is surfaced by the host. In the browser, this results in an unhandledrejection event. If a handler is attached to a rejected promise whose rejection has already caused an unhandled rejection event, then another rejectionhandled event is fired. catch() internally calls then() on the object upon which it was called, passing undefined and onRejected as arguments. The value of that call is directly returned. This is observable if you wrap the methods. js // overriding original Promise.prototype.then/catch just to add some logs ((Promise) => { const originalThen = Promise.prototype.then; const originalCatch = Promise.prototype.catch; Promise.prototype.then = function (...args) { console.log("Called .then on %o with arguments: %o", this, args); return originalThen.apply(this, args); }; Promise.prototype.catch = function (...args) { console.error("Called .catch on %o with arguments: %o", this, args); return originalCatch.apply(this, args); }; })(Promise); // calling catch on an already resolved promise Promise.resolve().catch(function XXX() {}); // Logs: // Called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()] // Called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()] This means that passing undefined still causes the returned promise to be rejected, and you have to pass a function to prevent the final promise from being rejected. Because catch() just calls then() , it supports subclassing. Note: The examples below are throwing instances of Error . As with synchronous throw statements, this is considered a good practice; otherwise, the part doing the catching would have to perform checks to see if the argument was a string or an error, and you might lose valuable information such as stack traces. Examples Using and chaining the catch() method js const p1 = new Promise((resolve, reject) => { resolve("Success"); }); p1.then((value) => { console.log(value); // "Success!" throw new Error("oh, no!"); }) .catch((e) => { console.error(e.message); // "oh, no!" }) .then( () => console.log("after a catch the chain is restored"), // "after a catch the chain is restored" () => console.log("Not fired due to the catch"), ); // The following behaves the same as above p1.then((value) => { console.log(value); // "Success!" return Promise.reject(new Error("oh, no!")); }) .catch((e) => { console.error(e); // Error: oh, no! }) .then( () => console.log("after a catch the chain is restored"), // "after a catch the chain is restored" () => console.log("Not fired due to the catch"), ); Gotchas when throwing errors Throwing an error will call the catch() method most of the time: js const p1 = new Promise((resolve, reject) => { throw new Error("Uh-oh!"); }); p1.catch((e) => { console.error(e); // "Uh-oh!" }); Errors thrown inside asynchronous functions will act like uncaught errors: js const p2 = new Promise((resolve, reject) => { setTimeout(() => { throw new Error("Uncaught Exception!"); }, 1000); }); p2.catch((e) => { console.error(e); // This is never called }); Errors thrown after resolve is called will be silenced: js const p3 = new Promise((resolve, reject) => { resolve(); throw new Error("Silenced Exception!"); }); p3.catch((e) => { console.error(e); // This is never called }); catch() is not called if the promise is fulfilled js // Create a promise which would not call onReject const p1 = Promise.resolve("calling next"); const p2 = p1.catch((reason) => { // This is never called console.error("catch p1!"); console.error(reason); }); p2.then( (value) => { console.log("next promise's onFulfilled"); console.log(value); // calling next }, (reason) => { console.log("next promise's onRejected"); console.log(reason); }, ); Specifications Specification ECMAScript® 2026 Language Specification # sec-promise.prototype.catch Browser compatibility Loading… See also Promise Promise.prototype.then() Promise.prototype.finally() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Promise Constructor Promise() Static methods all() allSettled() any() race() reject() resolve() try() withResolvers() Static properties [Symbol .species] Instance methods catch() finally() then() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .