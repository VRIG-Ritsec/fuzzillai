Promise.prototype.finally() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Promise finally() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Promise.prototype.finally() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨October 2018⁩. Learn more See full compatibility Report feedback The finally() method of Promise instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns another Promise object, allowing you to chain calls to other promise methods. This lets you avoid duplicating code in both the promise's then() and catch() handlers. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it function checkMail() { return new Promise((resolve, reject) => { if (Math.random() > 0.5) { resolve("Mail has arrived"); } else { reject(new Error("Failed to arrive")); } }); } checkMail() .then((mail) => { console.log(mail); }) .catch((err) => { console.error(err); }) .finally(() => { console.log("Experiment completed"); }); Syntax js promiseInstance.finally(onFinally) Parameters onFinally A function to asynchronously execute when this promise becomes settled. Its return value is ignored unless the returned value is a rejected promise. The function is called with no arguments. Return value Returns a new Promise immediately. This new promise is always pending when returned, regardless of the current promise's status. If onFinally throws an error or returns a rejected promise, the new promise will reject with that value. Otherwise, the new promise will settle with the same state as the current promise. Description The finally() method can be useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome. The finally() method is very similar to calling then(onFinally, onFinally) . However, there are a couple of differences: When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it. The onFinally callback does not receive any argument. This use case is for precisely when you do not care about the rejection reason or the fulfillment value, and so there's no need to provide it. A finally() call is usually transparent and reflects the eventual state of the original promise. So for example: Unlike Promise.resolve(2).then(() => 77, () => {}) , which returns a promise eventually fulfilled with the value 77 , Promise.resolve(2).finally(() => 77) returns a promise eventually fulfilled with the value 2 . Similarly, unlike Promise.reject(3).then(() => {}, () => 88) , which returns a promise eventually fulfilled with the value 88 , Promise.reject(3).finally(() => 88) returns a promise eventually rejected with the reason 3 . Note: A throw (or returning a rejected promise) in the finally callback still rejects the returned promise. For example, both Promise.reject(3).finally(() => { throw 99; }) and Promise.reject(3).finally(() => Promise.reject(99)) reject the returned promise with the reason 99 . Like catch() , finally() internally calls the then method on the object upon which it was called. If onFinally is not a function, then() is called with onFinally as both arguments — which, for Promise.prototype.then() , means that no useful handler is attached. Otherwise, then() is called with two internally created functions, which behave like the following: Warning: This is only for demonstration purposes and is not a polyfill. js promise.then( (value) => Promise.resolve(onFinally()).then(() => value), (reason) => Promise.resolve(onFinally()).then(() => { throw reason; }), ); Because finally() calls then() , it supports subclassing. Moreover, notice the Promise.resolve() call above — in reality, onFinally() 's return value is resolved using the same algorithm as Promise.resolve() , but the actual constructor used to construct the resolved promise will be the subclass. finally() gets this constructor through promise.constructor[Symbol.species] . Examples Using finally() js let isLoading = true; fetch(myRequest) .then((response) => { const contentType = response.headers.get("content-type"); if (contentType && contentType.includes("application/json")) { return response.json(); } throw new TypeError("Oops, we haven't got JSON!"); }) .then((json) => { /* process your JSON further */ }) .catch((error) => { console.error(error); // this line can also throw, e.g. when console = {} }) .finally(() => { isLoading = false; }); Specifications Specification ECMAScript® 2026 Language Specification # sec-promise.prototype.finally Browser compatibility Loading… See also Polyfill of Promise.prototype.finally in core-js es-shims polyfill of Promise.prototype.finally Promise Promise.prototype.then() Promise.prototype.catch() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Promise Constructor Promise() Static methods all() allSettled() any() race() reject() resolve() try() withResolvers() Static properties [Symbol .species] Instance methods catch() finally() then() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .