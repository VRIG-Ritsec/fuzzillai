Promise.race() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Promise race() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Promise.race() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The Promise.race() static method takes an iterable of promises as input and returns a single Promise . This returned promise settles with the eventual state of the first promise that settles. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const promise1 = new Promise((resolve, reject) => { setTimeout(resolve, 500, "one"); }); const promise2 = new Promise((resolve, reject) => { setTimeout(resolve, 100, "two"); }); Promise.race([promise1, promise2]).then((value) => { console.log(value); // Both resolve, but promise2 is faster }); // Expected output: "two" Syntax js Promise.race(iterable) Parameters iterable An iterable (such as an Array ) of promises. Return value A Promise that asynchronously settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) settled. Description The Promise.race() method is one of the promise concurrency methods. It's useful when you want the first async task to complete, but do not care about its eventual state (i.e., it can either succeed or fail). If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to the first of these values found in the iterable. Examples Using Promise.race() This example shows how Promise.race() can be used to race several timers implemented with setTimeout() . The timer with the shortest time always wins the race and becomes the resulting promise's state. js function sleep(time, value, state) { return new Promise((resolve, reject) => { setTimeout(() => { if (state === "fulfill") { resolve(value); } else { reject(new Error(value)); } }, time); }); } const p1 = sleep(500, "one", "fulfill"); const p2 = sleep(100, "two", "fulfill"); Promise.race([p1, p2]).then((value) => { console.log(value); // "two" // Both fulfill, but p2 is faster }); const p3 = sleep(100, "three", "fulfill"); const p4 = sleep(500, "four", "reject"); Promise.race([p3, p4]).then( (value) => { console.log(value); // "three" // p3 is faster, so it fulfills }, (error) => { // Not called }, ); const p5 = sleep(500, "five", "fulfill"); const p6 = sleep(100, "six", "reject"); Promise.race([p5, p6]).then( (value) => { // Not called }, (error) => { console.error(error.message); // "six" // p6 is faster, so it rejects }, ); Asynchronicity of Promise.race This following example demonstrates the asynchronicity of Promise.race . Unlike other promise concurrency methods, Promise.race is always asynchronous: it never settles synchronously, even when the iterable is empty. js // Passing an array of promises that are already resolved, // to trigger Promise.race as soon as possible const resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)]; const p = Promise.race(resolvedPromisesArray); // Immediately logging the value of p console.log(p); // Using setTimeout, we can execute code after the stack is empty setTimeout(() => { console.log("the stack is now empty"); console.log(p); }); // Logs, in order: // Promise { <state>: "pending" } // the stack is now empty // Promise { <state>: "fulfilled", <value>: 33 } An empty iterable causes the returned promise to be forever pending: js const foreverPendingPromise = Promise.race([]); console.log(foreverPendingPromise); setTimeout(() => { console.log("the stack is now empty"); console.log(foreverPendingPromise); }); // Logs, in order: // Promise { <state>: "pending" } // the stack is now empty // Promise { <state>: "pending" } If the iterable contains one or more non-promise value and/or an already settled promise, then Promise.race will settle to the first of these values found in the array: js const foreverPendingPromise = Promise.race([]); const alreadyFulfilledProm = Promise.resolve(100); const arr = [foreverPendingPromise, alreadyFulfilledProm, "non-Promise value"]; const arr2 = [foreverPendingPromise, "non-Promise value", Promise.resolve(100)]; const p = Promise.race(arr); const p2 = Promise.race(arr2); console.log(p); console.log(p2); setTimeout(() => { console.log("the stack is now empty"); console.log(p); console.log(p2); }); // Logs, in order: // Promise { <state>: "pending" } // Promise { <state>: "pending" } // the stack is now empty // Promise { <state>: "fulfilled", <value>: 100 } // Promise { <state>: "fulfilled", <value>: "non-Promise value" } Using Promise.race() to implement request timeout You can race a potentially long-lasting request with a timer that rejects, so that when the time limit has elapsed, the resulting promise automatically rejects. js const data = Promise.race([ fetch("/api"), new Promise((resolve, reject) => { // Reject after 5 seconds setTimeout(() => reject(new Error("Request timed out")), 5000); }), ]) .then((res) => res.json()) .catch((err) => displayError(err)); If the data promise fulfills, it will contain the data fetched from /api ; otherwise, it will reject if fetch remains pending for 5 seconds and loses the race with the setTimeout timer. Using Promise.race() to detect the status of a promise Because Promise.race() resolves to the first non-pending promise in the iterable, we can check a promise's state, including if it's pending. This example is adapted from promise-status-async . js function promiseState(promise) { const pendingState = { status: "pending" }; return Promise.race([promise, pendingState]).then( (value) => value === pendingState ? value : { status: "fulfilled", value }, (reason) => ({ status: "rejected", reason }), ); } In this function, if promise is pending, the second value, pendingState , which is a non-promise, becomes the result of the race; otherwise, if promise is already settled, we may know its state through the onFulfilled and onRejected handlers. For example: js const p1 = new Promise((res) => setTimeout(() => res(100), 100)); const p2 = new Promise((res) => setTimeout(() => res(200), 200)); const p3 = new Promise((res, rej) => setTimeout(() => rej(new Error("failed")), 100), ); async function getStates() { console.log(await promiseState(p1)); console.log(await promiseState(p2)); console.log(await promiseState(p3)); } console.log("Immediately after initiation:"); getStates(); setTimeout(() => { console.log("After waiting for 100ms:"); getStates(); }, 100); // Logs: // Immediately after initiation: // { status: 'pending' } // { status: 'pending' } // { status: 'pending' } // After waiting for 100ms: // { status: 'fulfilled', value: 100 } // { status: 'pending' } // { status: 'rejected', reason: Error: failed } Note: The promiseState function still runs asynchronously, because there is no way to synchronously get a promise's value (i.e., without then() or await ), even when it is already settled. However, promiseState() always fulfills within one tick and never actually waits for any promise's settlement. Comparison with Promise.any() Promise.race takes the first settled Promise . js const promise1 = new Promise((resolve, reject) => { setTimeout(resolve, 500, "one"); }); const promise2 = new Promise((resolve, reject) => { setTimeout(reject, 100, "two"); }); Promise.race([promise1, promise2]) .then((value) => { console.log("succeeded with value:", value); }) .catch((reason) => { // Only promise1 is fulfilled, but promise2 is faster console.error("failed with reason:", reason); }); // failed with reason: two Promise.any takes the first fulfilled Promise . js const promise1 = new Promise((resolve, reject) => { setTimeout(resolve, 500, "one"); }); const promise2 = new Promise((resolve, reject) => { setTimeout(reject, 100, "two"); }); Promise.any([promise1, promise2]) .then((value) => { // Only promise1 is fulfilled, even though promise2 settled sooner console.log("succeeded with value:", value); }) .catch((reason) => { console.error("failed with reason:", reason); }); // succeeded with value: one Specifications Specification ECMAScript® 2026 Language Specification # sec-promise.race Browser compatibility Loading… See also Promise Promise.all() Promise.allSettled() Promise.any() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Promise Constructor Promise() Static methods all() allSettled() any() race() reject() resolve() try() withResolvers() Static properties [Symbol .species] Instance methods catch() finally() then() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .