Promise.try() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Promise try() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 한국어 中文 (简体) Promise.try() Baseline 2025 Newly available Since ⁨January 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The Promise.try() static method takes a callback of any kind (returns or throws, synchronously or asynchronously) and wraps its result in a Promise . In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js Promise.try(func) Promise.try(func, arg1) Promise.try(func, arg1, arg2) Promise.try(func, arg1, arg2, /* …, */ argN) Parameters func A function that is called synchronously with the arguments provided ( arg1 , arg2 , …, argN ). It can do anything—either return a value, throw an error, or return a promise. arg1 , arg2 , …, argN Arguments to pass to func . Return value A Promise that is: Already fulfilled, if func synchronously returns a value. Already rejected, if func synchronously throws an error. Asynchronously fulfilled or rejected, if func returns a promise. Description You may have an API that takes a callback. The callback may be synchronous or asynchronous. You want to handle everything uniformly by wrapping the result in a promise. The most straightforward way might be Promise.resolve(func()) . The problem is that if func() synchronously throws an error, this error would not be caught and turned into a rejected promise. The common approach (lifting a function call result into a promise, fulfilled or rejected) often looks like this: js new Promise((resolve) => resolve(func())); But Promise.try() is more helpful here: js Promise.try(func); For the built-in Promise() constructor, errors thrown from the executor are automatically caught and turned into rejections, so these two approaches are mostly equivalent, except that Promise.try() is more concise and readable. Note that Promise.try() is not equivalent to this, despite being highly similar: js Promise.resolve().then(func); The difference is that the callback passed to then() is always called asynchronously, while the executor of the Promise() constructor is called synchronously. Promise.try also calls the function synchronously, and resolves the promise immediately if possible. Promise.try() , combined with catch() and finally() , can be used to handle both synchronous and asynchronous errors in a single chain, and make promise error handling appear almost like synchronous error handling. Like setTimeout() , Promise.try() accepts extra arguments that are passed to the callback. This means instead of doing this: js Promise.try(() => func(arg1, arg2)); You can do this: js Promise.try(func, arg1, arg2); Which are equivalent, but the latter avoids creating an extra closure and is more efficient. Examples Using Promise.try() The following example takes a callback, "lifts" it into a promise, handles the result, and does some error handling: js function doSomething(action) { return Promise.try(action) .then((result) => console.log(result)) .catch((error) => console.error(error)) .finally(() => console.log("Done")); } doSomething(() => "Sync result"); doSomething(() => { throw new Error("Sync error"); }); doSomething(async () => "Async result"); doSomething(async () => { throw new Error("Async error"); }); In async/await, the same code would look like this: js async function doSomething(action) { try { const result = await action(); console.log(result); } catch (error) { console.error(error); } finally { console.log("Done"); } } Calling try() on a non-Promise constructor Promise.try() is a generic method. It can be called on any constructor that implements the same signature as the Promise() constructor. The following is a slightly more faithful approximation of the actual Promise.try() (although it should still not be used as a polyfill): js Promise.try = function (func) { return new this((resolve, reject) => { try { resolve(func()); } catch (error) { reject(error); } }); }; Because of how Promise.try() is implemented (i.e., the try...catch ), we can safely invoke Promise.try() with its this set to any custom constructor, and it will never synchronously throw an error. js class NotPromise { constructor(executor) { // The "resolve" and "reject" functions behave nothing like the native // promise's, but Promise.try() just calls resolve executor( (value) => console.log("Resolved", value), (reason) => console.log("Rejected", reason), ); } } const p = Promise.try.call(NotPromise, () => "hello"); // Logs: Resolved hello const p2 = Promise.try.call(NotPromise, () => { throw new Error("oops"); }); // Logs: Rejected Error: oops Unlike Promise() , this NotPromise() constructor does not gracefully handle exceptions while running the executor. But despite the throw , Promise.try() still catches the exception, passing it to reject() to log out. Specifications Specification ECMAScript® 2026 Language Specification # sec-promise.try Browser compatibility Loading… See also Polyfill of Promise.try in core-js es-shims polyfill of Promise.try Using promises guide Promise Promise() constructor Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Promise Constructor Promise() Static methods all() allSettled() any() race() reject() resolve() try() withResolvers() Static properties [Symbol .species] Instance methods catch() finally() then() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .