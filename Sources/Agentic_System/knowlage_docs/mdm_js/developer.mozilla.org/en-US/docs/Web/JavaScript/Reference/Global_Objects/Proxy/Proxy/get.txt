handler.get() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Proxy Proxy() get() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) handler.get() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2016⁩. Learn more See full compatibility Report feedback The handler.get() method is a trap for the [[Get]] object internal method , which is used by operations such as property accessors . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const monster = { secret: "easily scared", eyeCount: 4, }; const handler = { get(target, prop, receiver) { if (prop === "secret") { return `${target.secret.substring(0, 4)} ... shhhh!`; } return Reflect.get(...arguments); }, }; const proxy = new Proxy(monster, handler); console.log(proxy.eyeCount); // Expected output: 4 console.log(proxy.secret); // Expected output: "easi ... shhhh!" Syntax js new Proxy(target, { get(target, property, receiver) { } }) Parameters The following parameters are passed to the get() method. this is bound to the handler. target The target object. property A string or Symbol representing the property name. receiver The this value for getters; see Reflect.get() . This is usually either the proxy itself or an object that inherits from the proxy. Return value The get() method can return any value, representing the property value. Description Interceptions This trap can intercept these operations: Property access: proxy[foo] and proxy.bar Reflect.get() Or any other operation that invokes the [[Get]] internal method . Invariants The proxy's [[Get]] internal method throws a TypeError if the handler definition violates one of the following invariants: The value reported for a property must be the same as the value of the corresponding target object property, if the target object property is a non-writable, non-configurable own data property. That is, if Reflect.getOwnPropertyDescriptor() returns configurable: false, writable: false for the property on target , then the trap must return the same value as the value attribute in the target 's property descriptor. The value reported for a property must be undefined , if the corresponding target object property is a non-configurable own accessor property that has an undefined getter. That is, if Reflect.getOwnPropertyDescriptor() returns configurable: false, get: undefined for the property on target , then the trap must return undefined . Examples Trap for getting a property value The following code traps getting a property value. js const p = new Proxy( {}, { get(target, property, receiver) { console.log(`called: ${property}`); return 10; }, }, ); console.log(p.a); // "called: a" // 10 The following code violates an invariant. js const obj = {}; Object.defineProperty(obj, "a", { configurable: false, enumerable: false, value: 10, writable: false, }); const p = new Proxy(obj, { get(target, property) { return 20; }, }); p.a; // TypeError is thrown Specifications Specification ECMAScript® 2026 Language Specification # sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver Browser compatibility Loading… See also Proxy Proxy() constructor Reflect.get() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Proxy/handler Instance methods apply() construct() defineProperty() deleteProperty() get() getOwnPropertyDescriptor() getPrototypeOf() has() isExtensible() ownKeys() preventExtensions() set() setPrototypeOf() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Proxy Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .