Reflect - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Reflect Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Reflect Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2016⁩. Learn more See full compatibility Report feedback The Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers . In this article Description Static properties Static methods Examples Specifications Browser compatibility See also Description Unlike most global objects, Reflect is not a constructor. You cannot use it with the new operator or invoke the Reflect object as a function. All properties and methods of Reflect are static (just like the Math object). The Reflect object provides a collection of static functions which have the same names as the proxy handler methods . The major use case of Reflect is to provide default forwarding behavior in Proxy handler traps. A trap is used to intercept an operation on an object — it provides a custom implementation for an object internal method . The Reflect API is used to invoke the corresponding internal method. For example, the code below creates a proxy p with a deleteProperty trap that intercepts the [[Delete]] internal method. Reflect.deleteProperty() is used to invoke the default [[Delete]] behavior on targetObject directly. You can replace it with delete , but using Reflect saves you from having to remember the syntax that each internal method corresponds to. js const p = new Proxy( {}, { deleteProperty(targetObject, property) { // Custom functionality: log the deletion console.log("Deleting property:", property); // Execute the default introspection behavior return Reflect.deleteProperty(targetObject, property); }, }, ); The Reflect methods also allow finer control of how the internal method is invoked. For example, Reflect.construct() is the only way to construct a target function with a specific new.target value. If you use the new operator to invoke a function, the new.target value is always the function itself. This has important effects with subclassing . For another example, Reflect.get() allows you to run a getter with a custom this value, while property accessors always use the current object as the this value. Nearly every Reflect method's behavior can be done with some other syntax or method. Some of these methods have corresponding static methods of the same name on Object , although they do have some subtle differences. For the exact differences, see the description for each Reflect method. Static properties Reflect[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "Reflect" . This property is used in Object.prototype.toString() . Static methods Reflect.apply() Calls a target function with arguments as specified by the argumentsList parameter. See also Function.prototype.apply() . Reflect.construct() The new operator as a function. Equivalent to calling new target(...argumentsList) . Also provides the option to specify a different prototype. Reflect.defineProperty() Similar to Object.defineProperty() . Returns a boolean that is true if the property was successfully defined. Reflect.deleteProperty() The delete operator as a function. Equivalent to calling delete target[propertyKey] . Reflect.get() Returns the value of the property. Works like getting a property from an object ( target[propertyKey] ) as a function. Reflect.getOwnPropertyDescriptor() Similar to Object.getOwnPropertyDescriptor() . Returns a property descriptor of the given property if it exists on the object, undefined otherwise. Reflect.getPrototypeOf() Same as Object.getPrototypeOf() . Reflect.has() Returns a boolean indicating whether the target has the property. Either as own or inherited. Works like the in operator as a function. Reflect.isExtensible() Same as Object.isExtensible() . Returns a boolean that is true if the target is extensible. Reflect.ownKeys() Returns an array of the target object's own (not inherited) property keys. Reflect.preventExtensions() Similar to Object.preventExtensions() . Returns a boolean that is true if the update was successful. Reflect.set() A function that assigns values to properties. Returns a boolean that is true if the update was successful. Reflect.setPrototypeOf() A function that sets the prototype of an object. Returns a boolean that is true if the update was successful. Examples Detecting whether an object contains certain properties js const duck = { name: "Maurice", color: "white", greeting() { console.log(`Quaaaack! My name is ${this.name}`); }, }; Reflect.has(duck, "color"); // true Reflect.has(duck, "haircut"); // false Returning the object's own keys js Reflect.ownKeys(duck); // [ "name", "color", "greeting" ] Adding a new property to the object js Reflect.set(duck, "eyes", "black"); // returns "true" if successful // "duck" now contains the property "eyes: 'black'" Specifications Specification ECMAScript® 2026 Language Specification # sec-reflect-object Browser compatibility Loading… See also Proxy Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Reflect Static methods apply() construct() defineProperty() deleteProperty() get() getOwnPropertyDescriptor() getPrototypeOf() has() isExtensible() ownKeys() preventExtensions() set() setPrototypeOf() Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .