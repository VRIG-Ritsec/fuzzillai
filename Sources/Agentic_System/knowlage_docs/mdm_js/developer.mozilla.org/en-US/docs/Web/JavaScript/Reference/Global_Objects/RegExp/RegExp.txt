RegExp() constructor - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp RegExp() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 中文 (简体) RegExp() constructor Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The RegExp() constructor creates RegExp objects. For an introduction to regular expressions, read the Regular Expressions chapter in the JavaScript Guide . In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const regex1 = /\w+/; const regex2 = new RegExp("\\w+"); console.log(regex1); // Expected output: /\w+/ console.log(regex2); // Expected output: /\w+/ console.log(regex1 === regex2); // Expected output: false Syntax js new RegExp(pattern) new RegExp(pattern, flags) RegExp(pattern) RegExp(pattern, flags) Note: RegExp() can be called with or without new , but sometimes with different effects. See Return value . Parameters pattern The text of the regular expression. This can also be another RegExp object. flags Optional If specified, flags is a string that contains the flags to add. Alternatively, if a RegExp object is supplied for the pattern , the flags string will replace any of that object's flags (and lastIndex will be reset to 0 ). flags may contain any combination of the following characters: d (indices) Generate indices for substring matches. g (global) Find all matches rather than stopping after the first match. i (ignore case) When matching, casing differences are ignored. m (multiline) Treat beginning and end assertions ( ^ and $ ) as working over multiple lines. In other words, match the beginning or end of each line (delimited by \n or \r ), not only the very beginning or end of the whole input string. s (dotAll) Allows . to match newlines. u (unicode) Treat pattern as a sequence of Unicode code points. v (unicodeSets) An upgrade to the u flag that enables set notation in character classes as well as properties of strings. y (sticky) Matches only from the index indicated by the lastIndex property of this regular expression in the target string. Does not attempt to match from any later indexes. Return value RegExp(pattern) returns pattern directly if all of the following are true: RegExp() is called without new ; pattern is a regex ; pattern.constructor === RegExp (usually meaning it's not a subclass); flags is undefined . In all other cases, calling RegExp() with or without new both create a new RegExp object. If pattern is a regex, the new object's source is pattern.source ; otherwise, its source is pattern coerced to a string . If the flags parameter is not undefined , the new object's flags is the parameter's value; otherwise, its flags is pattern.flags (if pattern is a regex). Exceptions SyntaxError Thrown in one of the following cases: pattern cannot be parsed as a valid regular expression. flags contains repeated characters or any character outside of those allowed. Examples Literal notation and constructor There are two ways to create a RegExp object: a literal notation and a constructor . The literal notation takes a pattern between two slashes, followed by optional flags, after the second slash. The constructor function takes either a string or a RegExp object as its first parameter and a string of optional flags as its second parameter. The following three expressions create the same regular expression: js /ab+c/i; new RegExp(/ab+c/, "i"); // literal notation new RegExp("ab+c", "i"); // constructor Before regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. There are two ways to compile and get a RegExp object. The literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the RegExp object, new RegExp('ab+c') , results in runtime compilation of the regular expression. Use a string as the first argument to the RegExp() constructor when you want to build the regular expression from dynamic input . Building a regular expression from dynamic inputs js const breakfasts = ["bacon", "eggs", "oatmeal", "toast", "cereal"]; const order = "Let me get some bacon and eggs, please"; order.match(new RegExp(`\\b(${breakfasts.join("|")})\\b`, "g")); // Returns ['bacon', 'eggs'] Specifications Specification ECMAScript® 2026 Language Specification # sec-regexp-constructor Browser compatibility Loading… See also Polyfill of many modern RegExp features ( dotAll , sticky flags, named capture groups, etc.) in core-js Regular expressions guide String.prototype.match() String.prototype.replace() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, …, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .