RegExp.prototype[Symbol.matchAll]() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp [Symbol.matchAll]() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Fran√ßais Êó•Êú¨Ë™û ‰∏≠Êñá (ÁÆÄ‰Ωì) RegExp.prototype[Symbol.matchAll]() Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®January 2020‚Å©. Learn more See full compatibility Report feedback The [Symbol.matchAll]() method of RegExp instances specifies how String.prototype.matchAll should behave. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it class MyRegExp extends RegExp { [Symbol.matchAll](str) { const result = RegExp.prototype[Symbol.matchAll].call(this, str); if (!result) { return null; } return Array.from(result); } } const re = new MyRegExp("-\\d+", "g"); console.log("2016-01-02|2019-03-07".matchAll(re)); // Expected output: Array [Array ["-01"], Array ["-02"], Array ["-03"], Array ["-07"]] Syntax js regexp[Symbol.matchAll](str) Parameters str A String that is a target of the match. Return value An iterable iterator object (which is not restartable) of matches. Each match is an array with the same shape as the return value of RegExp.prototype.exec() . Description This method is called internally in String.prototype.matchAll() . For example, the following two examples return the same result. js "abc".matchAll(/a/g); /a/g[Symbol.matchAll]("abc"); Like [Symbol.split]() , [Symbol.matchAll]() starts by using [Symbol.species] to construct a new regex, thus avoiding mutating the original regexp in any way. lastIndex starts as the original regex's value. js const regexp = /[a-c]/g; regexp.lastIndex = 1; const str = "abc"; Array.from(str.matchAll(regexp), (m) => `${regexp.lastIndex} ${m[0]}`); // [ "1 b", "1 c" ] The validation that the input is a global regex happens in String.prototype.matchAll() . [Symbol.matchAll]() does not validate the input. If the regex is not global, the returned iterator yields the exec() result once and then returns undefined . If the regexp is global, each time the returned iterator's next() method is called, the regex's exec() is called and the result is yielded. When the regex is sticky and global, it will still perform sticky matches ‚Äî i.e., it will not match any occurrences beyond the lastIndex . js console.log(Array.from("ab-c".matchAll(/[abc]/gy))); // [ [ "a" ], [ "b" ] ] If the current match is an empty string, the lastIndex will still be advanced. If the regex has the u flag, it advances by one Unicode code point; otherwise, it advances by one UTF-16 code point. js console.log(Array.from("üòÑ".matchAll(/(?:)/g))); // [ [ "" ], [ "" ], [ "" ] ] console.log(Array.from("üòÑ".matchAll(/(?:)/gu))); // [ [ "" ], [ "" ] ] This method exists for customizing the behavior of matchAll() in RegExp subclasses. Examples Direct call This method can be used in almost the same way as String.prototype.matchAll() , except for the different value of this and the different order of arguments. js const re = /\d+/g; const str = "2016-01-02"; const result = re[Symbol.matchAll](str); console.log(Array.from(result, (x) => x[0])); // [ "2016", "01", "02" ] Using [Symbol.matchAll]() in subclasses Subclasses of RegExp can override the [Symbol.matchAll]() method to modify the default behavior. For example, to return an Array instead of an iterator : js class MyRegExp extends RegExp { [Symbol.matchAll](str) { const result = RegExp.prototype[Symbol.matchAll].call(this, str); return result ? Array.from(result) : null; } } const re = new MyRegExp("(\\d+)-(\\d+)-(\\d+)", "g"); const str = "2016-01-02|2019-03-07"; const result = str.matchAll(re); console.log(result[0]); // [ "2016-01-02", "2016", "01", "02" ] console.log(result[1]); // [ "2019-03-07", "2019", "03", "07" ] Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-regexp-prototype-%symbol.matchall% Browser compatibility Loading‚Ä¶ See also Polyfill of RegExp.prototype[Symbol.matchAll] in core-js es-shims polyfill of RegExp.prototype[Symbol.matchAll] String.prototype.matchAll() RegExp.prototype[Symbol.match]() RegExp.prototype[Symbol.replace]() RegExp.prototype[Symbol.search]() RegExp.prototype[Symbol.split]() Symbol.matchAll Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, ‚Ä¶, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .