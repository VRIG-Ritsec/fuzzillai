RegExp.prototype[Symbol.replace]() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp [Symbol.replace]() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Fran√ßais Êó•Êú¨Ë™û ‰∏≠Êñá (ÁÆÄ‰Ωì) RegExp.prototype[Symbol.replace]() Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®January 2020‚Å©. Learn more See full compatibility Report feedback The [Symbol.replace]() method of RegExp instances specifies how String.prototype.replace() and String.prototype.replaceAll() should behave when the regular expression is passed in as the pattern. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it class RegExp1 extends RegExp { [Symbol.replace](str) { return RegExp.prototype[Symbol.replace].call(this, str, "#!@?"); } } console.log("football".replace(new RegExp1("foo"))); // Expected output: "#!@?tball" Syntax js regexp[Symbol.replace](str, replacement) Parameters str A String that is a target of the replacement. replacement Can be a string or a function. If it's a string, it will replace the substring matched by the current regexp. A number of special replacement patterns are supported; see the Specifying a string as the replacement section of String.prototype.replace . If it's a function, it will be invoked for every match and the return value is used as the replacement text. The arguments supplied to this function are described in the Specifying a function as the replacement section of String.prototype.replace . Return value A new string, with one, some, or all matches of the pattern replaced by the specified replacement. Description This method is called internally in String.prototype.replace() and String.prototype.replaceAll() if the pattern argument is a RegExp object. For example, the following two examples return the same result. js "abc".replace(/a/, "A"); /a/[Symbol.replace]("abc", "A"); If the regex is global (with the g flag), the regex's exec() method will be repeatedly called until exec() returns null . Otherwise, exec() would only be called once. For each exec() result, the substitution will be prepared based on the description in String.prototype.replace() . Because [Symbol.replace]() would keep calling exec() until it returns null , and exec() would automatically reset the regex's lastIndex to 0 when the last match fails, [Symbol.replace]() would typically not have side effects when it exits. However, when the regex is sticky but not global, lastIndex would not be reset. In this case, each call to replace() may return a different result. js const re = /a/y; for (let i = 0; i < 5; i++) { console.log("aaa".replace(re, "b"), re.lastIndex); } // baa 1 // aba 2 // aab 3 // aaa 0 // baa 1 When the regex is sticky and global, it would still perform sticky matches ‚Äî i.e., it would fail to match any occurrences beyond the lastIndex . js console.log("aa-a".replace(/a/gy, "b")); // "bb-a" If the current match is an empty string, the lastIndex would still be advanced ‚Äî if the regex is Unicode-aware , it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit. js console.log("üòÑ".replace(/(?:)/g, " ")); // " \ud83d \ude04 " console.log("üòÑ".replace(/(?:)/gu, " ")); // " üòÑ " This method exists for customizing replace behavior in RegExp subclasses. Examples Direct call This method can be used in almost the same way as String.prototype.replace() , except the different this and the different arguments order. js const re = /-/g; const str = "2016-01-01"; const newStr = re[Symbol.replace](str, "."); console.log(newStr); // 2016.01.01 Using [Symbol.replace]() in subclasses Subclasses of RegExp can override the [Symbol.replace]() method to modify the default behavior. js class MyRegExp extends RegExp { constructor(pattern, flags, count) { super(pattern, flags); this.count = count; } [Symbol.replace](str, replacement) { // Perform [Symbol.replace]() `count` times. let result = str; for (let i = 0; i < this.count; i++) { result = RegExp.prototype[Symbol.replace].call(this, result, replacement); } return result; } } const re = new MyRegExp("\\d", "", 3); const str = "01234567"; const newStr = str.replace(re, "#"); // String.prototype.replace calls re[Symbol.replace](). console.log(newStr); // ###34567 Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-regexp.prototype-%symbol.replace% Browser compatibility Loading‚Ä¶ See also Polyfill of RegExp.prototype[Symbol.replace] in core-js String.prototype.replace() String.prototype.replaceAll() RegExp.prototype[Symbol.match]() RegExp.prototype[Symbol.matchAll]() RegExp.prototype[Symbol.search]() RegExp.prototype[Symbol.split]() RegExp.prototype.exec() RegExp.prototype.test() Symbol.replace Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, ‚Ä¶, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .