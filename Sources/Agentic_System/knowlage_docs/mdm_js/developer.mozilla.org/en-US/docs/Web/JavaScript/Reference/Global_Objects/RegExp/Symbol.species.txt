RegExp[Symbol.species] - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp [Symbol.species] Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 中文 (简体) RegExp[Symbol.species] Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2016⁩. Learn more See full compatibility Report feedback The RegExp[Symbol.species] static accessor property returns the constructor used to construct copied regular expressions in certain RegExp methods. Warning: The existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature . Avoid relying on it if possible. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js RegExp[Symbol.species] Return value The value of the constructor ( this ) on which get [Symbol.species] was called. The return value is used to construct copied RegExp instances. Description The [Symbol.species] accessor property returns the default constructor for RegExp objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically: js // Hypothetical underlying implementation for illustration class RegExp { static get [Symbol.species]() { return this; } } Because of this polymorphic implementation, [Symbol.species] of derived subclasses would also return the constructor itself by default. js class SubRegExp extends RegExp {} SubRegExp[Symbol.species] === SubRegExp; // true Some RegExp methods create a copy of the current regex instance before running exec() , so that side effects such as changes to lastIndex are not retained. The [Symbol.species] property is used to determine the constructor of the new instance. The methods that copy the current regex instance are: [Symbol.matchAll]() [Symbol.split]() Examples Species in ordinary objects The [Symbol.species] property returns the default constructor function, which is the RegExp constructor for RegExp objects: js RegExp[Symbol.species]; // function RegExp() Species in derived objects In an instance of a custom RegExp subclass, such as MyRegExp , the MyRegExp species is the MyRegExp constructor. However, you might want to overwrite this, in order to return parent RegExp objects in your derived class methods: js class MyRegExp extends RegExp { // Overwrite MyRegExp species to the parent RegExp constructor static get [Symbol.species]() { return RegExp; } } Or you can use this to observe the copying process: js class MyRegExp extends RegExp { constructor(...args) { console.log("Creating a new MyRegExp instance with args:", args); super(...args); } static get [Symbol.species]() { console.log("Copying MyRegExp"); return this; } exec(value) { console.log("Executing with lastIndex:", this.lastIndex); return super.exec(value); } } Array.from("aabbccdd".matchAll(new MyRegExp("[ac]", "g"))); // Creating a new MyRegExp instance with args: [ '[ac]', 'g' ] // Copying MyRegExp // Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, 'g' ] // Executing with lastIndex: 0 // Executing with lastIndex: 1 // Executing with lastIndex: 2 // Executing with lastIndex: 5 // Executing with lastIndex: 6 Specifications Specification ECMAScript® 2026 Language Specification # sec-get-regexp-%symbol.species% Browser compatibility Loading… See also RegExp Symbol.species Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Oct 1, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, …, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .