RegExp.prototype.dotAll - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp dotAll Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Fran√ßais Êó•Êú¨Ë™û ÌïúÍµ≠Ïñ¥ ‰∏≠Êñá (ÁÆÄ‰Ωì) RegExp.prototype.dotAll Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®July 2020‚Å©. Learn more See full compatibility Report feedback The dotAll accessor property of RegExp instances returns whether or not the s flag is used with this regular expression. In this article Try it Description Examples Specifications Browser compatibility See also Try it const regex1 = /f.o/s; console.log(regex1.dotAll); // Expected output: true const regex2 = /bar/; console.log(regex2.dotAll); // Expected output: false Description RegExp.prototype.dotAll has the value true if the s flag was used; otherwise, false . The s flag indicates that the dot special character ( . ) should additionally match the following line terminator ("newline") characters in a string, which it would not match otherwise: U+000A LINE FEED (LF) ( \n ) U+000D CARRIAGE RETURN (CR) ( \r ) U+2028 LINE SEPARATOR U+2029 PARAGRAPH SEPARATOR This effectively means the dot will match any UTF-16 code unit. However, it will not match characters that are outside of the Unicode Basic Multilingual Plane (BMP), also known as astral characters, which are represented as surrogate pairs and necessitate matching with two . patterns instead of one. js "üòÑ".match(/(.)(.)/s); // Array(3) [ "üòÑ", "\ud83d", "\ude04" ] The u (unicode) flag can be used to allow the dot to match astral characters as a single character. js "üòÑ".match(/./su); // Array [ "üòÑ" ] Note that a pattern such as .* is still capable of consuming astral characters as part of a larger context, even without the u flag. js "üòÑ".match(/.*/s); // Array [ "üòÑ" ] Using both the s and u flags in conjunction allows the dot to match any Unicode character in a more intuitive manner. The set accessor of dotAll is undefined . You cannot change this property directly. Examples Using dotAll js const str1 = "bar\nexample foo example"; const regex1 = /bar.example/s; console.log(regex1.dotAll); // true console.log(str1.replace(regex1, "")); // foo example const str2 = "bar\nexample foo example"; const regex2 = /bar.example/; console.log(regex2.dotAll); // false console.log(str2.replace(regex2, "")); // bar // example foo example Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-get-regexp.prototype.dotAll Browser compatibility Loading‚Ä¶ See also Polyfill of the dotAll flag in core-js RegExp.prototype.lastIndex RegExp.prototype.global RegExp.prototype.hasIndices RegExp.prototype.ignoreCase RegExp.prototype.multiline RegExp.prototype.source RegExp.prototype.sticky RegExp.prototype.unicode Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, ‚Ä¶, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .