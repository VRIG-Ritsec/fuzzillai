RegExp.escape() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp escape() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 RegExp.escape() Baseline 2025 Newly available Since ⁨May 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The RegExp.escape() static method escapes any potential regex syntax characters in a string, and returns a new string that can be safely used as a literal pattern for the RegExp() constructor. When dynamically creating a RegExp with user-provided content, consider using this function to sanitize the input (unless the input is actually intended to contain regex syntax). In addition, don't try to re-implement its functionality by, for example, using String.prototype.replaceAll() to insert a \ before all syntax characters. RegExp.escape() is designed to use escape sequences that work in many more edge cases/contexts than hand-crafted code is likely to achieve. In this article Syntax Examples Specifications Browser compatibility See also Syntax js RegExp.escape(string) Parameters string The string to escape. Return value A new string that can be safely used as a literal pattern for the RegExp() constructor. Namely, the following things in the input string are replaced: The first character of the string, if it's either a decimal digit (0–9) or ASCII letter (a–z, A–Z), is escaped using the \x character escape syntax. For example, RegExp.escape("foo") returns "\\x66oo" (here and after, the two backslashes in a string literal denote a single backslash character). This step ensures that if this escaped string is embedded into a bigger pattern where it's immediately preceded by \1 , \x0 , \u000 , etc., the leading character doesn't get interpreted as part of the escape sequence. Regex syntax characters , including ^ , $ , \ , . , * , + , ? , ( , ) , [ , ] , { , } , and | , as well as the / delimiter, are escaped by inserting a \ character before them. For example, RegExp.escape("foo.bar") returns "\\x66oo\\.bar" , and RegExp.escape("(foo)") returns "\\(foo\\)" . Other punctuators, including , , - , = , < , > , # , & , ! , % , : , ; , @ , ~ , ' , ` , and " , are escaped using the \x syntax. For example, RegExp.escape("foo-bar") returns "\\x66oo\\x2dbar" . These characters cannot be escaped by prefixing with \ because, for example, /foo\-bar/u is a syntax error. The characters with their own character escape sequences: \f (U+000C FORM FEED), \n (U+000A LINE FEED), \r (U+000D CARRIAGE RETURN), \t (U+0009 CHARACTER TABULATION), and \v (U+000B LINE TABULATION), are replaced with their escape sequences. For example, RegExp.escape("foo\nbar") returns "\\x66oo\\nbar" . The space character is escaped as "\\x20" . Other non-ASCII line break and white space characters are replaced with one or two \uXXXX escape sequences representing their UTF-16 code units. For example, RegExp.escape("foo\u2028bar") returns "\\x66oo\\u2028bar" . Lone surrogates are replaced with their \uXXXX escape sequences. For example, RegExp.escape("foo\uD800bar") returns "\\x66oo\\ud800bar" . Exceptions TypeError Thrown if string is not a string. Examples Using RegExp.escape() The following examples demonstrate various inputs and outputs for the RegExp.escape() method. js RegExp.escape("Buy it. use it. break it. fix it."); // "\\x42uy\\x20it\\.\\x20use\\x20it\\.\\x20break\\x20it\\.\\x20fix\\x20it\\." RegExp.escape("foo.bar"); // "\\x66oo\\.bar" RegExp.escape("foo-bar"); // "\\x66oo\\x2dbar" RegExp.escape("foo\nbar"); // "\\x66oo\\nbar" RegExp.escape("foo\uD800bar"); // "\\x66oo\\ud800bar" RegExp.escape("foo\u2028bar"); // "\\x66oo\\u2028bar" Using RegExp.escape() with the RegExp constructor The primary use case of RegExp.escape() is when you want to embed a string into a bigger regex pattern, and you want to ensure that the string is treated as a literal pattern, not as a regex syntax. Consider the following naïve example that replaces URLs: js function removeDomain(text, domain) { return text.replace(new RegExp(`https?://${domain}(?=/)`, "g"), ""); } const input = "Consider using [RegExp.escape()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape) to escape special characters in a string."; const domain = "developer.mozilla.org"; console.log(removeDomain(input, domain)); // Consider using [RegExp.escape()](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape) to escape special characters in a string. Inserting the domain above results in the regular expression literal https?://developer.mozilla.org(?=/) , where the "." character is a regex wildcard character. This means the string will match the string with any character in place of the ".", such as developer-mozilla-org . Therefore, it would incorrectly also change the following text: js const input = "This is not an MDN link: https://developer-mozilla.org/, be careful!"; const domain = "developer.mozilla.org"; console.log(removeDomain(input, domain)); // This is not an MDN link: /, be careful! To fix this, we can use RegExp.escape() to ensure that any user input is treated as a literal pattern: js function removeDomain(text, domain) { return text.replace( new RegExp(`https?://${RegExp.escape(domain)}(?=/)`, "g"), "", ); } Now this function will do exactly what we intend to, and will not transform developer-mozilla.org URLs. Specifications Specification ECMAScript® 2026 Language Specification # sec-regexp.escape Browser compatibility Loading… See also Polyfill of RegExp.escape in core-js es-shims polyfill of Reflect.escape RegExp Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, …, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .