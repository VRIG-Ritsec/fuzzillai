RegExp.prototype.exec() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp exec() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 Português (do Brasil) Русский 中文 (简体) RegExp.prototype.exec() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The exec() method of RegExp instances executes a search with this regular expression for a match in a specified string and returns a result array, or null . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const regex = /fo+/g; const str = "table football, foosball"; let array; while ((array = regex.exec(str)) !== null) { console.log(`Found ${array[0]}. Next starts at ${regex.lastIndex}.`); // Expected output: "Found foo. Next starts at 9." // Expected output: "Found foo. Next starts at 19." } Syntax js exec(str) Parameters str The string against which to match the regular expression. All values are coerced to strings , so omitting it or passing undefined causes exec() to search for the string "undefined" , which is rarely what you want. Return value If the match fails, the exec() method returns null , and sets the regex's lastIndex to 0 . If the match succeeds, the exec() method returns an array and updates the lastIndex property of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing group of the matched text. The array also has the following additional properties: index The 0-based index of the match in the string. input The original string that was matched against. groups A null -prototype object of named capturing groups, whose keys are the names, and values are the capturing groups, or undefined if no named capturing groups were defined. See capturing groups for more information. indices Optional This property is only present when the d flag is set. It is an array where each entry represents the bounds of a substring match. The index of each element in this array corresponds to the index of the respective substring match in the array returned by exec() . In other words, the first indices entry represents the entire match, the second indices entry represents the first capturing group, etc. Each entry itself is a two-element array, where the first number represents the match's start index, and the second number, its end index. The indices array additionally has a groups property, which holds a null -prototype object of all named capturing groups. The keys are the names of the capturing groups, and each value is a two-element array, with the first number being the start index, and the second number being the end index of the capturing group. If the regular expression doesn't contain any named capturing groups, groups is undefined . Description JavaScript RegExp objects are stateful when they have the global or sticky flags set (e.g., /foo/g or /foo/y ). They store a lastIndex from the previous match. Using this internally, exec() can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with String.prototype.match() . When using exec() , the global flag has no effect when the sticky flag is set — the match is always sticky. exec() is the primitive method of regexps. Many other regexp methods call exec() internally — including those called by string methods, like [Symbol.replace]() . While exec() itself is powerful (and is the most efficient), it often does not convey the intent most clearly. If you only care whether the regex matches a string, but not what is actually being matched, use RegExp.prototype.test() instead. If you are finding all occurrences of a global regex and you don't care about information like capturing groups, use String.prototype.match() instead. In addition, String.prototype.matchAll() helps to simplify matching multiple parts of a string (with capture groups) by allowing you to iterate over the matches. If you are executing a match to find its index position in the string, use the String.prototype.search() method instead. exec() is useful for complex operations that cannot be easily achieved via any of the methods above, often when you need to manually adjust lastIndex . ( String.prototype.matchAll() copies the regex, so changing lastIndex while iterating over matchAll does not affect the iteration.) For one such example, see rewinding lastIndex . Examples Using exec() Consider the following example: js // Match "quick brown" followed by "jumps", ignoring characters in between // Remember "brown" and "jumps" // Ignore case const re = /quick\s(?<color>brown).+?(jumps)/dgi; const result = re.exec("The Quick Brown Fox Jumps Over The Lazy Dog"); The following table shows the state of result after running this script: Property Value [0] "Quick Brown Fox Jumps" [1] "Brown" [2] "Jumps" index 4 indices [[4, 25], [10, 15], [20, 25]] groups: { color: [10, 15 ]} input "The Quick Brown Fox Jumps Over The Lazy Dog" groups { color: "Brown" } In addition, re.lastIndex will be set to 25 , due to this regex being global. Finding successive matches If your regular expression uses the g flag, you can use the exec() method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of str specified by the regular expression's lastIndex property ( test() will also advance the lastIndex property). Note that the lastIndex property will not be reset when searching a different string, it will start its search at its existing lastIndex . For example, assume you have this script: js const myRe = /ab*/g; const str = "abbcdefabh"; let myArray; while ((myArray = myRe.exec(str)) !== null) { let msg = `Found ${myArray[0]}. `; msg += `Next match starts at ${myRe.lastIndex}`; console.log(msg); } This script displays the following text: Found abb. Next match starts at 3 Found ab. Next match starts at 9 Warning: There are many pitfalls that can lead to this becoming an infinite loop! Do not place the regular expression literal (or RegExp constructor) within the while condition — it will recreate the regex for every iteration and reset lastIndex . Be sure that the global ( g ) flag is set, or lastIndex will never be advanced. If the regex may match zero-length characters (e.g., /^/gm ), increase its lastIndex manually each time to avoid being stuck in the same place. You can usually replace this kind of code with String.prototype.matchAll() to make it less error-prone. Using exec() with RegExp literals You can also use exec() without creating a RegExp object explicitly: js const matches = /(hello \S+)/.exec("This is a hello world!"); console.log(matches[1]); This will log a message containing 'hello world!' . Specifications Specification ECMAScript® 2026 Language Specification # sec-regexp.prototype.exec Browser compatibility Loading… See also Regular expressions guide RegExp Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, …, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .