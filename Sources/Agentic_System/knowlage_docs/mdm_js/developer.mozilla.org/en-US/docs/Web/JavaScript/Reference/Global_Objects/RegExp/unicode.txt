RegExp.prototype.unicode - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects RegExp unicode Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Fran√ßais Êó•Êú¨Ë™û ÌïúÍµ≠Ïñ¥ –†—É—Å—Å–∫–∏–π ‰∏≠Êñá (ÁÆÄ‰Ωì) RegExp.prototype.unicode Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®September 2016‚Å©. Learn more See full compatibility Report feedback The unicode accessor property of RegExp instances returns whether or not the u flag is used with this regular expression. In this article Try it Description Examples Specifications Browser compatibility See also Try it const regex1 = /\u{61}/; const regex2 = /\u{61}/u; console.log(regex1.unicode); // Expected output: false console.log(regex2.unicode); // Expected output: true Description RegExp.prototype.unicode has the value true if the u flag was used; otherwise, false . The u flag enables various Unicode-related features. With the "u" flag: Any Unicode code point escapes ( \u{xxxx} , \p{UnicodePropertyValue} ) will be interpreted as such instead of identity escapes. For example /\u{61}/u matches "a" , but /\u{61}/ (without u flag) matches "u".repeat(61) , where the \u is equivalent to a single u . Surrogate pairs will be interpreted as whole characters instead of two separate characters. For example, /[üòÑ]/u would only match "üòÑ" but not "\ud83d" . When lastIndex is automatically advanced (such as when calling exec() ), unicode regexes advance by Unicode code points instead of UTF-16 code units. There are other changes to the parsing behavior that prevent possible syntax mistakes (which are analogous to strict mode for regex syntax). These syntaxes are all deprecated and only kept for web compatibility , and you should not rely on them. The set accessor of unicode is undefined . You cannot change this property directly. Unicode-aware mode When we refer to Unicode-aware mode , we mean the regex has either the u or the v flag, in which case the regex enables Unicode-related features (such as Unicode character class escape ) and has much stricter syntax rules. Because u and v interpret the same regex in incompatible ways, using both flags results in a SyntaxError . Similarly, a regex is Unicode-unaware if it has neither the u nor the v flag. In this case, the regex is interpreted as a sequence of UTF-16 code units, and there are many legacy syntaxes that do not become syntax errors. Examples Using the unicode property js const regex = /\u{61}/u; console.log(regex.unicode); // true Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-get-regexp.prototype.unicode Browser compatibility Loading‚Ä¶ See also RegExp.prototype.lastIndex RegExp.prototype.dotAll RegExp.prototype.global RegExp.prototype.hasIndices RegExp.prototype.ignoreCase RegExp.prototype.multiline RegExp.prototype.source RegExp.prototype.sticky Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects RegExp Constructor RegExp() Static methods escape() Static properties $1, ‚Ä¶, $9 Deprecated input ($_) Deprecated lastMatch ($&) Deprecated lastParen ($+) Deprecated leftContext ($`) Deprecated rightContext ($') Deprecated [Symbol .species] Instance methods compile() Deprecated exec() test() toString() [Symbol .match]() [Symbol .matchAll]() [Symbol .replace]() [Symbol .search]() [Symbol .split]() Instance properties lastIndex dotAll flags global hasIndices ignoreCase multiline source sticky unicode unicodeSets Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .