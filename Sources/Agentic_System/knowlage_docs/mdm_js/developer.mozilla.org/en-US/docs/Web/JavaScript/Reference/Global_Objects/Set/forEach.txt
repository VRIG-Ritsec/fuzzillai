Set.prototype.forEach() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Set forEach() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) Set.prototype.forEach() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The forEach() method of Set instances executes a provided function once for each value in this set, in insertion order. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it function logSetElements(value1, value2, set) { console.log(`s[${value1}] = ${value2}`); } new Set(["foo", "bar", undefined]).forEach(logSetElements); // Expected output: "s[foo] = foo" // Expected output: "s[bar] = bar" // Expected output: "s[undefined] = undefined" Syntax js forEach(callbackFn) forEach(callbackFn, thisArg) Parameters callback A function to execute for each entry in the set. The function is called with the following arguments: value Value of each iteration. key Key of each iteration. This is always the same as value . set The set being iterated. thisArg Optional A value to use as this when executing callbackFn . Return value None ( undefined ). Description The forEach() method executes the provided callback once for each value which actually exists in the Set object. It is not invoked for values which have been deleted. However, it is executed for values which are present but have the value undefined . callback is invoked with three arguments : the element value the element key the Set object being traversed There are no keys in Set objects, however, so the first two arguments are both values contained in the Set . This is to make it consistent with other forEach() methods for Map and Array . If a thisArg parameter is provided to forEach() , it will be passed to callback when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its this value. The this value ultimately observable by callback is determined according to the usual rules for determining the this seen by a function . Each value is visited once, except in the case when it was deleted and re-added before forEach() has finished. callback is not invoked for values deleted before being visited. New values added before forEach() has finished will be visited. forEach() executes the callback function once for each element in the Set object; it does not return a value. Examples Logging the contents of a Set object The following code logs a line for each element in a Set object: js function logSetElements(value1, value2, set) { console.log(`s[${value1}] = ${value2}`); } new Set(["foo", "bar", undefined]).forEach(logSetElements); // Logs: // "s[foo] = foo" // "s[bar] = bar" // "s[undefined] = undefined" Specifications Specification ECMAScript® 2026 Language Specification # sec-set.prototype.foreach Browser compatibility Loading… See also Array.prototype.forEach() Map.prototype.forEach() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Set Constructor Set() Static properties [Symbol .species] Instance methods add() clear() delete() difference() entries() forEach() has() intersection() isDisjointFrom() isSubsetOf() isSupersetOf() keys() symmetricDifference() union() values() [Symbol .iterator]() Instance properties size Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .