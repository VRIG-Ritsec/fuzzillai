String.prototype.charAt() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String charAt() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.prototype.charAt() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The charAt() method of String values returns a new string consisting of the single UTF-16 code unit at the given index. charAt() always indexes the string as a sequence of UTF-16 code units , so it may return lone surrogates. To get the full Unicode code point at the given index, use String.prototype.codePointAt() and String.fromCodePoint() . In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const sentence = "The quick brown fox jumps over the lazy dog."; const index = 4; console.log(`The character at index ${index} is ${sentence.charAt(index)}`); // Expected output: "The character at index 4 is q" Syntax js charAt(index) Parameters index Zero-based index of the character to be returned. Converted to an integer — undefined is converted to 0. Return value A string representing the character (exactly one UTF-16 code unit) at the specified index . If index is out of the range of 0 – str.length - 1 , charAt() returns an empty string. Description Characters in a string are indexed from left to right. The index of the first character is 0 , and the index of the last character in a string called str is str.length - 1 . Unicode code points range from 0 to 1114111 ( 0x10FFFF ). charAt() always returns a character whose value is less than 65536 , because the higher code points are represented by a pair of 16-bit surrogate pseudo-characters. Therefore, in order to get a full character with value greater than 65535 , it is necessary to retrieve not only charAt(i) , but also charAt(i + 1) (as if manipulating a string with two characters), or to use codePointAt(i) and String.fromCodePoint() instead. For information on Unicode, see UTF-16 characters, Unicode code points, and grapheme clusters . charAt() is very similar to using bracket notation to access a character at the specified index. The main differences are: charAt() attempts to convert index to an integer, while bracket notation does not, and directly uses index as a property name. charAt() returns an empty string if index is out of range, while bracket notation returns undefined . Examples Using charAt() The following example displays characters at different locations in the string "Brave new world" : js const anyString = "Brave new world"; console.log(`The character at index 0 is '${anyString.charAt()}'`); // No index was provided, used 0 as default console.log(`The character at index 0 is '${anyString.charAt(0)}'`); console.log(`The character at index 1 is '${anyString.charAt(1)}'`); console.log(`The character at index 2 is '${anyString.charAt(2)}'`); console.log(`The character at index 3 is '${anyString.charAt(3)}'`); console.log(`The character at index 4 is '${anyString.charAt(4)}'`); console.log(`The character at index 999 is '${anyString.charAt(999)}'`); These lines display the following: The character at index 0 is 'B' The character at index 0 is 'B' The character at index 1 is 'r' The character at index 2 is 'a' The character at index 3 is 'v' The character at index 4 is 'e' The character at index 999 is '' charAt() may return lone surrogates, which are not valid Unicode characters. js const str = "𠮷𠮾"; console.log(str.charAt(0)); // "\ud842", which is not a valid Unicode character console.log(str.charAt(1)); // "\udfb7", which is not a valid Unicode character To get the full Unicode code point at the given index, use an indexing method that splits by Unicode code points, such as String.prototype.codePointAt() and spreading strings into an array of Unicode code points. js const str = "𠮷𠮾"; console.log(String.fromCodePoint(str.codePointAt(0))); // "𠮷" console.log([...str][0]); // "𠮷" Note: Avoid re-implementing the solutions above using charAt() . The detection of lone surrogates and their pairing is complex, and built-in APIs may be more performant as they directly use the internal representation of the string. Install a polyfill for the APIs mentioned above if necessary. Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.charat Browser compatibility Loading… See also String.prototype.indexOf() String.prototype.lastIndexOf() String.prototype.charCodeAt() String.prototype.codePointAt() String.prototype.split() String.fromCodePoint() JavaScript has a Unicode problem by Mathias Bynens (2013) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .