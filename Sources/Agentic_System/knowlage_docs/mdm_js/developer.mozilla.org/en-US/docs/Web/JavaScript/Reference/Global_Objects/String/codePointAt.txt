String.prototype.codePointAt() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String codePointAt() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Espa√±ol Fran√ßais Êó•Êú¨Ë™û ÌïúÍµ≠Ïñ¥ Portugu√™s (do Brasil) –†—É—Å—Å–∫–∏–π ‰∏≠Êñá (ÁÆÄ‰Ωì) String.prototype.codePointAt() Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®September 2015‚Å©. Learn more See full compatibility Report feedback The codePointAt() method of String values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const icons = "‚òÉ‚òÖ‚ô≤"; console.log(icons.codePointAt(1)); // Expected output: "9733" Syntax js codePointAt(index) Parameters index Zero-based index of the character to be returned. Converted to an integer ‚Äî undefined is converted to 0. Return value A non-negative integer representing the code point value of the character at the given index . If index is out of the range of 0 ‚Äì str.length - 1 , codePointAt() returns undefined . If the element at index is a UTF-16 leading surrogate, returns the code point of the surrogate pair . If the element at index is a UTF-16 trailing surrogate, returns only the trailing surrogate code unit. Description Characters in a string are indexed from left to right. The index of the first character is 0 , and the index of the last character in a string called str is str.length - 1 . Unicode code points range from 0 to 1114111 ( 0x10FFFF ). In UTF-16, each string index is a code unit with value 0 ‚Äì 65535 . Higher code points are represented by a pair of 16-bit surrogate pseudo-characters. Therefore, codePointAt() returns a code point that may span two string indices. For information on Unicode, see UTF-16 characters, Unicode code points, and grapheme clusters . Examples Using codePointAt() js "ABC".codePointAt(0); // 65 "ABC".codePointAt(0).toString(16); // 41 "üòç".codePointAt(0); // 128525 "\ud83d\ude0d".codePointAt(0); // 128525 "\ud83d\ude0d".codePointAt(0).toString(16); // 1f60d "üòç".codePointAt(1); // 56845 "\ud83d\ude0d".codePointAt(1); // 56845 "\ud83d\ude0d".codePointAt(1).toString(16); // de0d "ABC".codePointAt(42); // undefined Looping with codePointAt() Because using string indices for looping causes the same code point to be visited twice (once for the leading surrogate, once for the trailing surrogate), and the second time codePointAt() returns only the trailing surrogate, it's better to avoid looping by index. js const str = "\ud83d\udc0e\ud83d\udc71\u2764"; for (let i = 0; i < str.length; i++) { console.log(str.codePointAt(i).toString(16)); } // '1f40e', 'dc0e', '1f471', 'dc71', '2764' Instead, use a for...of statement or spread the string , both of which invoke the string's [Symbol.iterator]() , which iterates by code points. Then, use codePointAt(0) to get the code point of each element. js for (const codePoint of str) { console.log(codePoint.codePointAt(0).toString(16)); } // '1f40e', '1f471', '2764' [...str].map((cp) => cp.codePointAt(0).toString(16)); // ['1f40e', '1f471', '2764'] Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-string.prototype.codepointat Browser compatibility Loading‚Ä¶ See also Polyfill of String.prototype.codePointAt in core-js es-shims polyfill of String.prototype.codePointAt String.fromCodePoint() String.fromCharCode() String.prototype.charCodeAt() String.prototype.charAt() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .