String: length - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String length Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Espa√±ol Fran√ßais Êó•Êú¨Ë™û ÌïúÍµ≠Ïñ¥ Portugu√™s (do Brasil) –†—É—Å—Å–∫–∏–π ‰∏≠Êñá (ÁÆÄ‰Ωì) String: length Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®July 2015‚Å©. Learn more See full compatibility Report feedback The length data property of a String value contains the length of the string in UTF-16 code units. In this article Try it Value Description Examples Specifications Browser compatibility See also Try it const str = "Life, the universe and everything. Answer:"; console.log(`${str} ${str.length}`); // Expected output: "Life, the universe and everything. Answer: 42" Value A non-negative integer. Property attributes of String: length Writable no Enumerable no Configurable no Description This property returns the number of code units in the string. JavaScript uses UTF-16 encoding, where each Unicode character may be encoded as one or two code units, so it's possible for the value returned by length to not match the actual number of Unicode characters in the string. For common scripts like Latin, Cyrillic, wellknown CJK characters, etc., this should not be an issue, but if you are working with certain scripts, such as emojis, mathematical symbols , or obscure Chinese characters, you may need to account for the difference between code units and characters. The language specification requires strings to have a maximum length of 2 53 - 1 elements, which is the upper limit for precise integers . However, a string with this length needs 16384TiB of storage, which cannot fit in any reasonable device's memory, so implementations tend to lower the threshold, which allows the string's length to be conveniently stored in a 32-bit integer. In V8 (used by Chrome and Node), the maximum length is 2 29 - 24 (~1GiB). On 32-bit systems, the maximum length is 2 28 - 16 (~512MiB). In Firefox, the maximum length is 2 30 - 2 (~2GiB). Before Firefox 65, the maximum length was 2 28 - 1 (~512MiB). In Safari, the maximum length is 2 31 - 1 (~4GiB). If you are working with large strings in other encodings (such as UTF-8 files or blobs), note that when you load the data into a JS string, the encoding always becomes UTF-16. The size of the string may be different from the size of the source file. js const str1 = "a".repeat(2 ** 29 - 24); // Success const str2 = "a".repeat(2 ** 29 - 23); // RangeError: Invalid string length const buffer = new Uint8Array(2 ** 29 - 24).fill("a".codePointAt(0)); // This buffer is 512MiB in size const str = new TextDecoder().decode(buffer); // This string is 1GiB in size For an empty string, length is 0. The static property String.length is unrelated to the length of strings. It's the arity of the String function (loosely, the number of formal parameters it has), which is 1. Since length counts code units instead of characters, if you want to get the number of characters, you can first split the string with its iterator , which iterates by characters: js function getCharacterLength(str) { // The string iterator that is used here iterates over characters, // not mere code units return [...str].length; } console.log(getCharacterLength("A\uD87E\uDC04Z")); // 3 If you want to count characters by grapheme clusters , use Intl.Segmenter . You can first pass the string you want to split to the segment() method, and then iterate over the returned Segments object to get the length: js function getGraphemeCount(str) { const segmenter = new Intl.Segmenter("en-US", { granularity: "grapheme" }); // The Segments object iterator that is used here iterates over characters in grapheme clusters, // which may consist of multiple Unicode characters return [...segmenter.segment(str)].length; } console.log(getGraphemeCount("üë®‚Äçüë©‚Äçüëß‚Äçüëß")); // 1 Examples Basic usage js const x = "Mozilla"; const empty = ""; console.log(`${x} is ${x.length} code units long`); // Mozilla is 7 code units long console.log(`The empty string has a length of ${empty.length}`); // The empty string has a length of 0 Strings with length not equal to the number of characters js const emoji = "üòÑ"; console.log(emoji.length); // 2 console.log([...emoji].length); // 1 const adlam = "û§≤û•ãû§£û§´"; console.log(adlam.length); // 8 console.log([...adlam].length); // 4 const formula = "‚àÄùë•‚àà‚Ñù,ùë•¬≤‚â•0"; console.log(formula.length); // 11 console.log([...formula].length); // 9 Assigning to length Because string is a primitive, attempting to assign a value to a string's length property has no observable effect, and will throw in strict mode . js const myString = "bluebells"; myString.length = 4; console.log(myString); // "bluebells" console.log(myString.length); // 9 Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-properties-of-string-instances-length Browser compatibility Loading‚Ä¶ See also Array : length Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .