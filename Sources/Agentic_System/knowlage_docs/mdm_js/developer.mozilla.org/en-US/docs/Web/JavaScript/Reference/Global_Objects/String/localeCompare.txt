String.prototype.localeCompare() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String localeCompare() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) String.prototype.localeCompare() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The localeCompare() method of String values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method delegates to Intl.Collator . When comparing large numbers of strings, such as in sorting large arrays, it is better to create an Intl.Collator object and use the function provided by its compare() method. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const a = "réservé"; // With accents, lowercase const b = "RESERVE"; // No accents, uppercase console.log(a.localeCompare(b)); // Expected output: 1 console.log(a.localeCompare(b, "en", { sensitivity: "base" })); // Expected output: 0 Syntax js localeCompare(compareString) localeCompare(compareString, locales) localeCompare(compareString, locales, options) Parameters The locales and options parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations that support the Intl.Collator API , these parameters correspond exactly to the Intl.Collator() constructor's parameters. Implementations without Intl.Collator support are asked to ignore both parameters, making the comparison result returned entirely implementation-dependent — it's only required to be consistent . compareString The string against which the referenceStr is compared. All values are coerced to strings , so omitting it or passing undefined causes localeCompare() to compare against the string "undefined" , which is rarely what you want. locales Optional A string with a BCP 47 language tag , or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor. In implementations without Intl.Collator support, this parameter is ignored and the host's locale is usually used. options Optional An object adjusting the output format. Corresponds to the options parameter of the Intl.Collator() constructor. In implementations without Intl.Collator support, this parameter is ignored. See the Intl.Collator() constructor for details on the locales and options parameters and how to use them. Return value A negative number if referenceStr occurs before compareString ; positive if the referenceStr occurs after compareString ; 0 if they are equivalent. In implementations with Intl.Collator , this is equivalent to new Intl.Collator(locales, options).compare(referenceStr, compareString) . Description Returns an integer indicating whether the referenceStr comes before, after or is equivalent to the compareString . Negative when the referenceStr occurs before compareString Positive when the referenceStr occurs after compareString Returns 0 if they are equivalent Warning: Do not rely on exact return values of -1 or 1 ! Negative and positive integer results vary between browsers (as well as between browser versions) because the ECMAScript specification only mandates negative and positive values. Some browsers may return -2 or 2 , or even some other negative or positive value. Examples Using localeCompare() js // The letter "a" is before "c" yielding a negative value "a".localeCompare("c"); // -2 or -1 (or some other negative value) // Alphabetically the word "check" comes after "against" yielding a positive value "check".localeCompare("against"); // 2 or 1 (or some other positive value) // "a" and "a" are equivalent yielding a neutral value of zero "a".localeCompare("a"); // 0 Sort an array localeCompare() enables case-insensitive sorting for an array. js const items = ["réservé", "Premier", "Cliché", "communiqué", "café", "Adieu"]; items.sort((a, b) => a.localeCompare(b, "fr", { ignorePunctuation: true })); // ['Adieu', 'café', 'Cliché', 'communiqué', 'Premier', 'réservé'] Check browser support for extended arguments The locales and options arguments are not supported in all browsers yet. To check whether an implementation supports them, use the "i" argument (a requirement that illegal language tags are rejected) and look for a RangeError exception: js function localeCompareSupportsLocales() { try { "foo".localeCompare("bar", "i"); } catch (e) { return e.name === "RangeError"; } return false; } Using locales The results provided by localeCompare() vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument: js console.log("ä".localeCompare("z", "de")); // a negative value: in German, ä sorts before z console.log("ä".localeCompare("z", "sv")); // a positive value: in Swedish, ä sorts after z Using options The results provided by localeCompare() can be customized using the options argument: js // in German, ä has a as the base letter console.log("ä".localeCompare("a", "de", { sensitivity: "base" })); // 0 // in Swedish, ä and a are separate base letters console.log("ä".localeCompare("a", "sv", { sensitivity: "base" })); // a positive value Numeric sorting js // by default, "2" > "10" console.log("2".localeCompare("10")); // 1 // numeric using options: console.log("2".localeCompare("10", undefined, { numeric: true })); // -1 // numeric using locales tag: console.log("2".localeCompare("10", "en-u-kn-true")); // -1 Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.localecompare ECMAScript® 2026 Internationalization API Specification # sup-String.prototype.localeCompare Browser compatibility Loading… See also Intl.Collator Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .