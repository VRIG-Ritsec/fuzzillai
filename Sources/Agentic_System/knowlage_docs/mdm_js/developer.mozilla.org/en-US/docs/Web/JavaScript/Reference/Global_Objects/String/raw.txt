String.raw() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String raw() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.raw() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. Learn more See full compatibility Report feedback The String.raw() static method is a tag function of template literals . This is similar to the r prefix in Python, or the @ prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g., ${foo} ) are processed, but escape sequences (e.g., \n ) are not. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it // Create a variable that uses a Windows // path without escaping the backslashes: const filePath = String.raw`C:\Development\profile\about.html`; console.log(`The file was uploaded from: ${filePath}`); // Expected output: "The file was uploaded from: C:\Development\profile\about.html" Syntax js String.raw(strings) String.raw(strings, sub1) String.raw(strings, sub1, sub2) String.raw(strings, sub1, sub2, /* …, */ subN) String.raw`templateString` Parameters strings Well-formed template literal array object, like { raw: ['foo', 'bar', 'baz'] } . Should be an object with a raw property whose value is an array-like object of strings. sub1 , …, subN Contains substitution values. templateString A template literal , optionally with substitutions ( ${...} ). Return value The raw string form of a given template literal. Exceptions TypeError Thrown if the first argument doesn't have a raw property, or the raw property is undefined or null . Description In most cases, String.raw() is used with template literals. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, (just like with other tag functions ). String.raw() is the only built-in template literal tag. It has close semantics to an untagged literal since it concatenates all arguments and returns a string. You can even re-implement it with normal JavaScript code. Warning: You should not use String.raw directly as an "identity" tag. See Building an identity tag for how to implement this. If String.raw() is called with an object whose raw property doesn't have a length property or a non-positive length , it returns an empty string "" . If substitutions.length < strings.raw.length - 1 (i.e., there are not enough substitutions to fill the placeholders — which can't happen in a well-formed tagged template literal), the rest of the placeholders are filled with empty strings. Examples Using String.raw() js String.raw`Hi\n${2 + 3}!`; // 'Hi\\n5!', the character after 'Hi' // is not a newline character, // '\' and 'n' are two characters. String.raw`Hi\u000A!`; // 'Hi\\u000A!', same here, this time we will get the // \, u, 0, 0, 0, A, 6 characters. // All kinds of escape characters will be ineffective // and backslashes will be present in the output string. // You can confirm this by checking the .length property // of the string. const name = "Bob"; String.raw`Hi\n${name}!`; // 'Hi\\nBob!', substitutions are processed. String.raw`Hi \${name}!`; // 'Hi \\${name}!', the dollar sign is escaped; there's no interpolation. Using String.raw with RegExp Combining a String.raw template literal with the RegExp() constructor allows you to create regular expressions with dynamic parts (which is not possible with regex literals) without double-escaping ( \\ ) regular expression escape sequences (which is not possible with normal string literals). This is also valuable in strings that contain a lot of slashes, such as file paths or URLs. js // A String.raw template allows a fairly readable regular expression matching a URL: const reRawTemplate = new RegExp( String.raw`https://developer\.mozilla\.org/en-US/docs/Web/JavaScript/Reference/`, ); // The same thing with a regexp literal looks like this, with \/ for // each forward slash: const reRegexpLiteral = /https:\/\/developer\.mozilla\.org\/en-US\/docs\/Web\/JavaScript\/Reference\//; // And the same thing written with the RegExp constructor and a // traditional string literal, with \\. for each period: const reStringLiteral = new RegExp( "https://developer\\.mozilla\\.org/en-US/docs/Web/JavaScript/Reference/", ); // String.raw also allows dynamic parts to be included function makeURLRegExp(path) { return new RegExp(String.raw`https://developer\.mozilla\.org/${path}`); } const reDynamic = makeURLRegExp("en-US/docs/Web/JavaScript/Reference/"); const reWildcard = makeURLRegExp(".*"); Building an identity tag Many tools give special treatment to literals tagged by a particular name. js // Some formatters will format this literal's content as HTML const doc = html`<!doctype html> <html lang="en-US"> <head> <title>Hello</title> </head> <body> <h1>Hello world!</h1> </body> </html>`; One might naïvely implement the html tag as: js const html = String.raw; This, in fact, works for the case above. However, because String.raw would concatenate the raw string literals instead of the "cooked" ones, escape sequences would not be processed. js const doc = html`<canvas>\n</canvas>`; // "<canvas>\\n</canvas>" This may not be what you want for a "true identity" tag, where the tag is purely for markup and doesn't change the literal's value. In this case, you can create a custom tag and pass the "cooked" (i.e., escape sequences are processed) literal array to String.raw , pretending they are raw strings. js const html = (strings, ...values) => String.raw({ raw: strings }, ...values); // Some formatters will format this literal's content as HTML const doc = html`<canvas>\n</canvas>`; // "<canvas>\n</canvas>"; the "\n" becomes a line break Notice the first argument is an object with a raw property, whose value is an array-like object (with a length property and integer indexes) representing the separated strings in the template literal. The rest of the arguments are the substitutions. Since the raw value can be any array-like object, it can even be a string! For example, 'test' is treated as ['t', 'e', 's', 't'] . The following is equivalent to `t${0}e${1}s${2}t` : js String.raw({ raw: "test" }, 0, 1, 2); // 't0e1s2t' Specifications Specification ECMAScript® 2026 Language Specification # sec-string.raw Browser compatibility Loading… See also Polyfill of String.raw in core-js es-shims polyfill of String.raw Template literals String Lexical grammar Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .