String.prototype.replace() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String replace() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.prototype.replace() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The replace() method of String values returns a new string with one, some, or all matches of a pattern replaced by a replacement . The pattern can be a string or a RegExp , and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const paragraph = "I think Ruth's dog is cuter than your dog!"; console.log(paragraph.replace("Ruth's", "my")); // Expected output: "I think my dog is cuter than your dog!" const regex = /dog/i; console.log(paragraph.replace(regex, "ferret")); // Expected output: "I think Ruth's ferret is cuter than your dog!" Syntax js replace(pattern, replacement) Parameters pattern Can be a string or an object with a Symbol.replace method — the typical example being a regular expression . Any value that doesn't have the Symbol.replace method will be coerced to a string. replacement Can be a string or a function. If it's a string, it will replace the substring matched by pattern . A number of special replacement patterns are supported; see the Specifying a string as the replacement section below. If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the Specifying a function as the replacement section below. Return value A new string, with one, some, or all matches of the pattern replaced by the specified replacement. Description This method does not mutate the string value it's called on. It returns a new string. A string pattern will only be replaced once. To perform a global search and replace, use a regular expression with the g flag, or use replaceAll() instead. If pattern is an object with a Symbol.replace method (including RegExp objects), that method is called with the target string and replacement as arguments. Its return value becomes the return value of replace() . In this case the behavior of replace() is entirely encoded by the [Symbol.replace]() method — for example, any mention of "capturing groups" in the description below is actually functionality provided by RegExp.prototype[Symbol.replace]() . If the pattern is an empty string, the replacement is prepended to the start of the string. js "xxx".replace("", "_"); // "_xxx" A regexp with the g flag is the only case where replace() replaces more than once. For more information about how regex properties (especially the sticky flag) interact with replace() , see RegExp.prototype[Symbol.replace]() . Specifying a string as the replacement The replacement string can include the following special replacement patterns: Pattern Inserts $$ Inserts a "$" . $& Inserts the matched substring. $` Inserts the portion of the string that precedes the matched substring. $' Inserts the portion of the string that follows the matched substring. $n Inserts the n th ( 1 -indexed) capturing group where n is a positive integer less than 100. $<Name> Inserts the named capturing group where Name is the group name. $n and $<Name> are only available if the pattern argument is a RegExp object. If the pattern is a string, or if the corresponding capturing group isn't present in the regex, then the pattern will be replaced as a literal. If the group is present but isn't matched (because it's part of a disjunction), it will be replaced with an empty string. js "foo".replace(/(f)/, "$2"); // "$2oo"; the regex doesn't have the second group "foo".replace("f", "$1"); // "$1oo"; the pattern is a string, so it doesn't have any groups "foo".replace(/(f)|(g)/, "$2"); // "oo"; the second group exists but isn't matched Specifying a function as the replacement You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. Note: The above-mentioned special replacement patterns do not apply for strings returned from the replacer function. The function has the following signature: js function replacer(match, p1, p2, /* …, */ pN, offset, string, groups) { return replacement; } The arguments to the function are as follows: match The matched substring. (Corresponds to $& above.) p1 , p2 , …, pN The n th string found by a capture group (including named capturing groups), provided the first argument to replace() is a RegExp object. (Corresponds to $1 , $2 , etc. above.) For example, if the pattern is /(\a+)(\b+)/ , then p1 is the match for \a+ , and p2 is the match for \b+ . If the group is part of a disjunction (e.g., "abc".replace(/(a)|(b)/, replacer) ), the unmatched alternative will be undefined . offset The offset of the matched substring within the whole string being examined. For example, if the whole string was 'abcd' , and the matched substring was 'bc' , then this argument will be 1 . string The whole string being examined. groups An object whose keys are the used group names, and whose values are the matched portions ( undefined if not matched). Only present if the pattern contains at least one named capturing group. The exact number of arguments depends on whether the first argument is a RegExp object — and, if so, how many capture groups it has. The following example will set newString to 'abc - 12345 - #$*%' : js function replacer(match, p1, p2, p3, offset, string) { // p1 is non-digits, p2 digits, and p3 non-alphanumerics return [p1, p2, p3].join(" - "); } const newString = "abc12345#$*%".replace(/(\D*)(\d*)(\W*)/, replacer); console.log(newString); // abc - 12345 - #$*% The function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global. Examples Defining the regular expression in replace() In the following example, the regular expression is defined in replace() and includes the ignore case flag. js const str = "Twas the night before Xmas..."; const newStr = str.replace(/xmas/i, "Christmas"); console.log(newStr); // Twas the night before Christmas... This logs 'Twas the night before Christmas...' . Note: See the regular expression guide for more explanations about regular expressions. Using the global and ignoreCase flags with replace() Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits replace() to replace each occurrence of 'apples' in the string with 'oranges' . js const re = /apples/gi; const str = "Apples are round, and apples are juicy."; const newStr = str.replace(re, "oranges"); console.log(newStr); // oranges are round, and oranges are juicy. This logs 'oranges are round, and oranges are juicy' . Switching words in a string The following script switches the words in the string. For the replacement text, the script uses capturing groups and the $1 and $2 replacement patterns. js const re = /(\w+)\s(\w+)/; const str = "Maria Cruz"; const newStr = str.replace(re, "$2, $1"); console.log(newStr); // Cruz, Maria This logs 'Cruz, Maria' . Using an inline function that modifies the matched characters In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement. The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning. js function styleHyphenFormat(propertyName) { function upperToHyphenLower(match, offset, string) { return (offset > 0 ? "-" : "") + match.toLowerCase(); } return propertyName.replace(/[A-Z]/g, upperToHyphenLower); } Given styleHyphenFormat('borderTop') , this returns 'border-top' . Because we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect. js // Won't work const newString = propertyName.replace(/[A-Z]/g, "-" + "$&".toLowerCase()); This is because '$&'.toLowerCase() would first be evaluated as a string literal (resulting in the same '$&' ) before using the characters as a pattern. Replacing a Fahrenheit degree with its Celsius equivalent The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with "F" . The function returns the Celsius number ending with "C" . For example, if the input number is "212F" , the function returns "100C" . If the number is "0F" , the function returns "-17.77777777777778C" . The regular expression test checks for any number that ends with F . The number of Fahrenheit degrees is accessible to the function through its second parameter, p1 . The function sets the Celsius number based on the number of Fahrenheit degrees passed in a string to the f2c() function. f2c() then returns the Celsius number. This function approximates Perl's s///e flag. js function f2c(x) { function convert(str, p1, offset, s) { return `${((p1 - 32) * 5) / 9}C`; } const s = String(x); const test = /(-?\d+(?:\.\d*)?)F\b/g; return s.replace(test, convert); } Making a generic replacer Suppose we want to create a replacer that appends the offset data to every matched string. Because the replacer function already receives the offset parameter, it will be trivial if the regex is statically known. js "abcd".replace(/(bc)/, (match, p1, offset) => `${match} (${offset}) `); // "abc (1) d" However, this replacer would be hard to generalize if we want it to work with any regex pattern. The replacer is variadic — the number of arguments it receives depends on the number of capturing groups present. We can use rest parameters , but it would also collect offset , string , etc. into the array. The fact that groups may or may not be passed depending on the identity of the regex would also make it hard to generically know which argument corresponds to the offset . js function addOffset(match, ...args) { const offset = args.at(-2); return `${match} (${offset}) `; } console.log("abcd".replace(/(bc)/, addOffset)); // "abc (1) d" console.log("abcd".replace(/(?<group>bc)/, addOffset)); // "abc (abcd) d" The addOffset example above doesn't work when the regex contains a named group, because in this case args.at(-2) would be the string instead of the offset . Instead, you need to extract the last few arguments based on type, because groups is an object while string is a string. js function addOffset(match, ...args) { const hasNamedGroups = typeof args.at(-1) === "object"; const offset = hasNamedGroups ? args.at(-3) : args.at(-2); return `${match} (${offset}) `; } console.log("abcd".replace(/(bc)/, addOffset)); // "abc (1) d" console.log("abcd".replace(/(?<group>bc)/, addOffset)); // "abc (1) d" Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.replace Browser compatibility Loading… See also Polyfill of String.prototype.replace in core-js with fixes and implementation of modern behavior like Symbol.replace support Regular expressions guide String.prototype.replaceAll() String.prototype.match() RegExp.prototype.exec() RegExp.prototype.test() Symbol.replace RegExp.prototype[Symbol.replace]() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .