String.prototype.replaceAll() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String replaceAll() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.prototype.replaceAll() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨August 2020⁩. Learn more See full compatibility Report feedback The replaceAll() method of String values returns a new string with all matches of a pattern replaced by a replacement . The pattern can be a string or a RegExp , and the replacement can be a string or a function to be called for each match. The original string is left unchanged. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const paragraph = "I think Ruth's dog is cuter than your dog!"; console.log(paragraph.replaceAll("dog", "monkey")); // Expected output: "I think Ruth's monkey is cuter than your monkey!" // Global flag required when calling replaceAll with regex const regex = /dog/gi; console.log(paragraph.replaceAll(regex, "ferret")); // Expected output: "I think Ruth's ferret is cuter than your ferret!" Syntax js replaceAll(pattern, replacement) Parameters pattern Can be a string or an object with a Symbol.replace method — the typical example being a regular expression . Any value that doesn't have the Symbol.replace method will be coerced to a string. If pattern is a regex , then it must have the global ( g ) flag set, or a TypeError is thrown. replacement Can be a string or a function. The replacement has the same semantics as that of String.prototype.replace() . Return value A new string, with all matches of a pattern replaced by a replacement. Exceptions TypeError Thrown if the pattern is a regex that does not have the global ( g ) flag set (its flags property does not contain "g" ). Description This method does not mutate the string value it's called on. It returns a new string. Unlike replace() , this method replaces all occurrences of a string, not just the first one. While it is also possible to use replace() with a global regex dynamically constructed with RegExp() to replace all instances of a string, this can have unintended consequences if the string contains special characters that have meaning in regular expressions (which might happen if the replacement string comes from user input). While you can mitigate this case using RegExp.escape() to make the regular expression string into a literal pattern, it is simpler to pass the string to replaceAll() directly, without converting it to a regex. js function unsafeRedactName(text, name) { return text.replace(new RegExp(name, "g"), "[REDACTED]"); } function semiSafeRedactName(text, name) { return text.replaceAll(name, "[REDACTED]"); } function superSafeRedactName(text, name) { // only match at word boundaries return text.replaceAll( new RegExp(`\\b${RegExp.escape(name)}\\b`, "g"), "[REDACTED]", ); } let report = "A hacker called ha.*er used special characters in their name to breach the system."; console.log(unsafeRedactName(report, "ha.*er")); // "A [REDACTED]s in their name to breach the system." console.log(semiSafeRedactName(report, "ha.*er")); // "A hacker called [REDACTED] used special characters in their name to breach the system." report = "A hacker called acke breached the system."; console.log(semiSafeRedactName(report, "acke")); // "A h[REDACTED]r called [REDACTED] breached the system." console.log(superSafeRedactName(report, "acke")); // "A hacker called [REDACTED] breached the system." If pattern is an object with a Symbol.replace method (including RegExp objects), that method is called with the target string and replacement as arguments. Its return value becomes the return value of replaceAll() . In this case the behavior of replaceAll() is entirely encoded by the [Symbol.replace]() method, and therefore will have the same result as replace() (apart from the extra input validation that the regex is global). If the pattern is an empty string, the replacement will be inserted in between every UTF-16 code unit, similar to split() behavior. js "xxx".replaceAll("", "_"); // "_x_x_x_" For more information about how regex properties (especially the sticky flag) interact with replaceAll() , see RegExp.prototype[Symbol.replace]() . Examples Using replaceAll() js "aabbcc".replaceAll("b", "."); // 'aa..cc' Non-global regex throws When using a regular expression search value, it must be global. This won't work: js "aabbcc".replaceAll(/b/, "."); // TypeError: replaceAll must be called with a global RegExp This will work: js "aabbcc".replaceAll(/b/g, "."); ("aa..cc"); Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.replaceall Browser compatibility Loading… See also Polyfill of String.prototype.replaceAll in core-js es-shims polyfill of String.prototype.replaceAll Regular expressions guide String.prototype.replace() String.prototype.match() RegExp.prototype.exec() RegExp.prototype.test() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 22, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .