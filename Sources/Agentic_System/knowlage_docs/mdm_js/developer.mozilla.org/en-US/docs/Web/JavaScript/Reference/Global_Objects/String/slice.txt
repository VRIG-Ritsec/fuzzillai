String.prototype.slice() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String slice() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.prototype.slice() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The slice() method of String values extracts a section of this string and returns it as a new string, without modifying the original string. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const str = "The quick brown fox jumps over the lazy dog."; console.log(str.slice(31)); // Expected output: "the lazy dog." console.log(str.slice(4, 19)); // Expected output: "quick brown fox" console.log(str.slice(-4)); // Expected output: "dog." console.log(str.slice(-9, -5)); // Expected output: "lazy" Syntax js slice(indexStart) slice(indexStart, indexEnd) Parameters indexStart The index of the first character to include in the returned substring. indexEnd Optional The index of the first character to exclude from the returned substring. Return value A new string containing the extracted section of the string. Description slice() extracts the text from one string and returns a new string. slice() extracts up to but not including indexEnd . For example, str.slice(4, 8) extracts the fifth character through the eighth character (characters indexed 4 , 5 , 6 , and 7 ): indexStart indexEnd ↓ ↓ | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | | T | h | e | | m | i | r | r | o | r | m i r r _______________ ↑ Result If indexStart >= str.length , an empty string is returned. If indexStart < 0 , the index is counted from the end of the string. More formally, in this case, the substring starts at max(indexStart + str.length, 0) . If indexStart is omitted, undefined , or cannot be converted to a number , it's treated as 0 . If indexEnd is omitted or undefined , or if indexEnd >= str.length , slice() extracts to the end of the string. If indexEnd < 0 , the index is counted from the end of the string. More formally, in this case, the substring ends at max(indexEnd + str.length, 0) . If indexEnd <= indexStart after normalizing negative values (i.e., indexEnd represents a character that's before indexStart ), an empty string is returned. Examples Using slice() to create a new string The following example uses slice() to create a new string. js const str1 = "The morning is upon us."; // The length of str1 is 23. const str2 = str1.slice(1, 8); const str3 = str1.slice(4, -2); const str4 = str1.slice(12); const str5 = str1.slice(30); console.log(str2); // he morn console.log(str3); // morning is upon u console.log(str4); // is upon us. console.log(str5); // "" Using slice() with negative indexes The following example uses slice() with negative indexes. js const str = "The morning is upon us."; str.slice(-3); // 'us.' str.slice(-3, -1); // 'us' str.slice(0, -1); // 'The morning is upon us' str.slice(4, -1); // 'morning is upon us' This example counts backwards from the end of the string by 11 to find the start index and forwards from the start of the string by 16 to find the end index. js console.log(str.slice(-11, 16)); // "is u" Here it counts forwards from the start by 11 to find the start index and backwards from the end by 7 to find the end index. js console.log(str.slice(11, -7)); // " is u" These arguments count backwards from the end by 5 to find the start index and backwards from the end by 1 to find the end index. js console.log(str.slice(-5, -1)); // "n us" Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.slice Browser compatibility Loading… See also String.prototype.substr() String.prototype.substring() Array.prototype.slice() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .