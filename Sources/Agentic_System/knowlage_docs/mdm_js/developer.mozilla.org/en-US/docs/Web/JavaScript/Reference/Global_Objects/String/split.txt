String.prototype.split() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all‚Ä¶ HTML guides Responsive images HTML cheatsheet Date & time formats See all‚Ä¶ Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all‚Ä¶ CSS guides Box model Animations Flexbox Colors See all‚Ä¶ Layout cookbook Column layouts Centering an element Card component See all‚Ä¶ JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all‚Ä¶ JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all‚Ä¶ Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all‚Ä¶ Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all‚Ä¶ Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String split() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Espa√±ol Fran√ßais Êó•Êú¨Ë™û ÌïúÍµ≠Ïñ¥ Portugu√™s (do Brasil) –†—É—Å—Å–∫–∏–π ‰∏≠Êñá (ÁÆÄ‰Ωì) String.prototype.split() Baseline Widely available This feature is well established and works across many devices and browser versions. It‚Äôs been available across browsers since ‚Å®July 2015‚Å©. Learn more See full compatibility Report feedback The split() method of String values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const str = "The quick brown fox jumps over the lazy dog."; const words = str.split(" "); console.log(words[3]); // Expected output: "fox" const chars = str.split(""); console.log(chars[8]); // Expected output: "k" const strCopy = str.split(); console.log(strCopy); // Expected output: Array ["The quick brown fox jumps over the lazy dog."] Syntax js split(separator) split(separator, limit) Parameters separator The pattern describing where each split should occur. Can be undefined , a string, or an object with a Symbol.split method ‚Äî the typical example being a regular expression . Omitting separator or passing undefined causes split() to return an array with the calling string as a single element. All values that are not undefined or objects with a [Symbol.split]() method are coerced to strings . limit Optional A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified separator , but stops when limit entries have been placed in the array. Any leftover text is not included in the array at all. The array may contain fewer entries than limit if the end of the string is reached before the limit is reached. If limit is 0 , [] is returned. Return value If separator is a string, an Array of strings is returned, split at each point where the separator occurs in the given string. If separator is a regex, the returned Array also contains the captured groups for each separator match; see below for details. The capturing groups may be unmatched, in which case they are undefined in the array. If separator has a custom [Symbol.split]() method, its return value is directly returned. Description If separator is a non-empty string, the target string is split by all matches of the separator without including separator in the results. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like myString.split("\t") . If separator contains multiple characters, that entire character sequence must be found in order to split. If separator appears at the beginning (or end) of the string, it still has the effect of splitting, resulting in an empty (i.e., zero length) string appearing at the first (or last) position of the returned array. If separator does not occur in str , the returned array contains one element consisting of the entire string. If separator is an empty string ( "" ), str is converted to an array of each of its UTF-16 "characters", without empty strings on either ends of the resulting string. Note: "".split("") is therefore the only way to produce an empty array when a string is passed as separator and limit is not 0 . Warning: When the empty string ( "" ) is used as a separator, the string is not split by user-perceived characters ( grapheme clusters ) or unicode characters (code points), but by UTF-16 code units. This destroys surrogate pairs . See "How do you get a string to a character array in JavaScript?" on Stack Overflow . If separator is a regexp that matches empty strings, whether the match is split by UTF-16 code units or Unicode code points depends on if the regex is Unicode-aware . js "üòÑüòÑ".split(/(?:)/); // [ "\ud83d", "\ude04", "\ud83d", "\ude04" ] "üòÑüòÑ".split(/(?:)/u); // [ "üòÑ", "üòÑ" ] If separator is a regular expression with capturing groups, then each time separator matches, the captured groups (including any undefined results) are spliced into the output array. This behavior is specified by the regexp's Symbol.split method. If separator is an object with a Symbol.split method, that method is called with the target string and limit as arguments, and this set to the object. Its return value becomes the return value of split . Any other value will be coerced to a string before being used as separator. Examples Using split() When the string is empty and a non-empty separator is specified, split() returns [""] . If the string and separator are both empty strings, an empty array is returned. js const emptyString = ""; // string is empty and separator is non-empty console.log(emptyString.split("a")); // [""] // string and separator are both empty strings console.log(emptyString.split(emptyString)); // [] The following example defines a function that splits a string into an array of strings using separator . After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements. js function splitString(stringToSplit, separator) { const arrayOfStrings = stringToSplit.split(separator); console.log("The original string is:", stringToSplit); console.log("The separator is:", separator); console.log( "The array has", arrayOfStrings.length, "elements:", arrayOfStrings.join(" / "), ); } const tempestString = "Oh brave new world that has such people in it."; const monthString = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"; const space = " "; const comma = ","; splitString(tempestString, space); splitString(tempestString); splitString(monthString, comma); This example produces the following output: The original string is: "Oh brave new world that has such people in it." The separator is: " " The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. The original string is: "Oh brave new world that has such people in it." The separator is: "undefined" The array has 1 elements: Oh brave new world that has such people in it. The original string is: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec" The separator is: "," The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec Removing spaces from a string In the following example, split() looks for zero or more spaces, followed by a semicolon, followed by zero or more spaces‚Äîand, when found, removes the spaces and the semicolon from the string. nameList is the array returned as a result of split() . js const names = "Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand "; console.log(names); const re = /\s*(?:;|$)\s*/; const nameList = names.split(re); console.log(nameList); This logs two lines; the first line logs the original string, and the second line logs the resulting array. Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand [ "Harry Trump", "Fred Barney", "Helen Rigby", "Bill Abel", "Chris Hand", "" ] Returning a limited number of splits In the following example, split() looks for spaces in a string and returns the first 3 splits that it finds. js const myString = "Hello World. How are you doing?"; const splits = myString.split(" ", 3); console.log(splits); // [ "Hello", "World.", "How" ] Splitting with a RegExp to include parts of the separator in the result If separator is a regular expression that contains capturing parentheses ( ) , matched results are included in the array. js const myString = "Hello 1 word. Sentence number 2."; const splits = myString.split(/(\d)/); console.log(splits); // [ "Hello ", "1", " word. Sentence number ", "2", "." ] Note: \d matches the character class for digits between 0 and 9. Using a custom splitter An object with a Symbol.split method can be used as a splitter with custom behavior. The following example splits a string using an internal state consisting of an incrementing number: js const splitByNumber = { [Symbol.split](str) { let num = 1; let pos = 0; const result = []; while (pos < str.length) { const matchPos = str.indexOf(num, pos); if (matchPos === -1) { result.push(str.substring(pos)); break; } result.push(str.substring(pos, matchPos)); pos = matchPos + String(num).length; num++; } return result; }, }; const myString = "a1bc2c5d3e4f"; console.log(myString.split(splitByNumber)); // [ "a", "bc", "c5d", "e", "f" ] The following example uses an internal state to enforce certain behavior, and to ensure a "valid" result is produced. js const DELIMITER = ";"; // Split the commands, but remove any invalid or unnecessary values. const splitCommands = { [Symbol.split](str, lim) { const results = []; const state = { on: false, brightness: { current: 2, min: 1, max: 3, }, }; let pos = 0; let matchPos = str.indexOf(DELIMITER, pos); while (matchPos !== -1) { const subString = str.slice(pos, matchPos).trim(); switch (subString) { case "light on": // If the `on` state is already true, do nothing. if (!state.on) { state.on = true; results.push(subString); } break; case "light off": // If the `on` state is already false, do nothing. if (state.on) { state.on = false; results.push(subString); } break; case "brightness up": // Enforce a brightness maximum. if (state.brightness.current < state.brightness.max) { state.brightness.current += 1; results.push(subString); } break; case "brightness down": // Enforce a brightness minimum. if (state.brightness.current > state.brightness.min) { state.brightness.current -= 1; results.push(subString); } break; } if (results.length === lim) { break; } pos = matchPos + DELIMITER.length; matchPos = str.indexOf(DELIMITER, pos); } // If we broke early due to reaching the split `lim`, don't add the remaining commands. if (results.length < lim) { results.push(str.slice(pos).trim()); } return results; }, }; const commands = "light on; brightness up; brightness up; brightness up; light on; brightness down; brightness down; light off"; console.log(commands.split(splitCommands, 3)); // ["light on", "brightness up", "brightness down"] Specifications Specification ECMAScript¬Æ 2026 Language Specification # sec-string.prototype.split Browser compatibility Loading‚Ä¶ See also Polyfill of String.prototype.split in core-js with fixes and implementation of modern behavior like Symbol.split support es-shims polyfill of String.prototype.split Regular expressions guide String.prototype.charAt() String.prototype.indexOf() String.prototype.lastIndexOf() Array.prototype.join() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ‚Å®Jul 10, 2025‚Å© by MDN contributors . View this page on GitHub ‚Ä¢ Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation‚Äôs not-for-profit parent, the Mozilla Foundation . Portions of this content are ¬©1998‚Äì‚Å®2025‚Å© by individual mozilla.org contributors. Content available under a Creative Commons license .