String.prototype.substring() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects String substring() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) String.prototype.substring() Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨July 2015⁩. Learn more See full compatibility Report feedback The substring() method of String values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied. In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it const str = "Mozilla"; console.log(str.substring(1, 3)); // Expected output: "oz" console.log(str.substring(2)); // Expected output: "zilla" Syntax js substring(indexStart) substring(indexStart, indexEnd) Parameters indexStart The index of the first character to include in the returned substring. indexEnd Optional The index of the first character to exclude from the returned substring. Return value A new string containing the specified part of the given string. Description substring() extracts characters from indexStart up to but not including indexEnd . In particular: If indexEnd is omitted or undefined , substring() extracts characters to the end of the string. If indexStart is equal to indexEnd , substring() returns an empty string. If indexStart is greater than indexEnd , then the effect of substring() is as if the two arguments were swapped; see example below. Any argument value that is less than 0 or greater than str.length is treated as if it were 0 and str.length , respectively. Any argument value that is NaN is treated as if it were 0 . Examples Using substring() The following example uses substring() to display characters from the string "Mozilla" : js const anyString = "Mozilla"; console.log(anyString.substring(0, 1)); // "M" console.log(anyString.substring(1, 0)); // "M" console.log(anyString.substring(0, 6)); // "Mozill" console.log(anyString.substring(4)); // "lla" console.log(anyString.substring(4, 7)); // "lla" console.log(anyString.substring(7, 4)); // "lla" console.log(anyString.substring(0, 7)); // "Mozilla" console.log(anyString.substring(0, 10)); // "Mozilla" Using substring() with length property The following example uses the substring() method and length property to extract the last characters of a particular string. This method may be easier to remember, given that you don't need to know the starting and ending indices as you would in the above examples. js const text = "Mozilla"; // Takes 4 last characters of string console.log(text.substring(text.length - 4)); // prints "illa" // Takes 5 last characters of string console.log(text.substring(text.length - 5)); // prints "zilla" The difference between substring() and substr() There are subtle differences between the substring() and substr() methods, so you should be careful not to get them confused. The two parameters of substr() are start and length , while for substring() , they are start and end . substr() 's start index will wrap to the end of the string if it is negative, while substring() will clamp it to 0 . Negative lengths in substr() are treated as zero, while substring() will swap the two indexes if end is less than start . Furthermore, substr() is considered a legacy feature in ECMAScript , so it is best to avoid using it if possible. js const text = "Mozilla"; console.log(text.substring(2, 5)); // "zil" console.log(text.substr(2, 3)); // "zil" Differences between substring() and slice() The substring() and slice() methods are almost identical, but there are a couple of subtle differences between the two, especially in the way negative arguments are dealt with. The substring() method swaps its two arguments if indexStart is greater than indexEnd , meaning that a string is still returned. The slice() method returns an empty string if this is the case. js const text = "Mozilla"; console.log(text.substring(5, 2)); // "zil" console.log(text.slice(5, 2)); // "" If either or both of the arguments are negative or NaN , the substring() method treats them as if they were 0 . js console.log(text.substring(-5, 2)); // "Mo" console.log(text.substring(-5, -2)); // "" slice() also treats NaN arguments as 0 , but when it is given negative values it counts backwards from the end of the string to find the indexes. js console.log(text.slice(-5, 2)); // "" console.log(text.slice(-5, -2)); // "zil" See the slice() page for more examples with negative numbers. Replacing a substring within a string The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example creates a string Brave New Web from the original string Brave New World . js // Replaces oldS with newS in the string fullS function replaceString(oldS, newS, fullS) { for (let i = 0; i < fullS.length; ++i) { if (fullS.substring(i, i + oldS.length) === oldS) { fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length); } } return fullS; } replaceString("World", "Web", "Brave New World"); Note that this can result in an infinite loop if oldS is itself a substring of newS — for example, if you attempted to replace "World" with "OtherWorld" here. A better method for replacing strings is as follows: js function replaceString(oldS, newS, fullS) { return fullS.split(oldS).join(newS); } The code above serves as an example for substring operations. If you need to replace substrings, most of the time you will want to use String.prototype.replace() . Specifications Specification ECMAScript® 2026 Language Specification # sec-string.prototype.substring Browser compatibility Loading… See also String.prototype.substr() String.prototype.slice() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects String Constructor String() Static methods fromCharCode() fromCodePoint() raw() Instance methods anchor() Deprecated at() big() Deprecated blink() Deprecated bold() Deprecated charAt() charCodeAt() codePointAt() concat() endsWith() fixed() Deprecated fontcolor() Deprecated fontsize() Deprecated includes() indexOf() isWellFormed() italics() Deprecated lastIndexOf() link() Deprecated localeCompare() match() matchAll() normalize() padEnd() padStart() repeat() replace() replaceAll() search() slice() small() Deprecated split() startsWith() strike() Deprecated sub() Deprecated substr() Deprecated substring() sup() Deprecated toLocaleLowerCase() toLocaleUpperCase() toLowerCase() toString() toUpperCase() toWellFormed() trim() trimEnd() trimStart() valueOf() [Symbol .iterator]() Instance properties length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .