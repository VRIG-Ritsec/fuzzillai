Symbol.asyncDispose - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Symbol asyncDispose Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Symbol.asyncDispose Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The Symbol.asyncDispose static data property represents the well-known symbol Symbol.asyncDispose . The await using declaration looks up this symbol on the variable initializer for the method to call when the variable goes out of scope. In this article Value Description Examples Specifications Browser compatibility See also Value The well-known symbol Symbol.asyncDispose . Property attributes of Symbol.asyncDispose Writable no Enumerable no Configurable no Description An object is async disposable if it has the [Symbol.asyncDispose]() method. The method is expected to have the following semantics: Invoking this method notifies the AsyncDisposable object that the caller does not intend to continue to use this object. This method should perform any necessary logic to explicit clean up the resource including, but not limited to, file system handles, streams, host objects, etc. This method can return a promise, which will be awaited before continuing. When an exception is thrown from this method, it typically means that the resource could not be explicitly freed. An AsyncDisposable object is not considered "disposed" until the resulting Promise has been fulfilled. If called more than once on the same object, the function should not throw an exception. However, this requirement is not enforced. Examples User defined async disposables [Symbol.asyncDispose] allows the creation of custom async disposables. See the await using reference for more information. js class Disposable { #fileHandle; #disposed; constructor(handle) { this.#disposed = false; this.#fileHandle = handle; } async [Symbol.asyncDispose]() { await this.#fileHandle.close(); this.disposed = true; } get isDisposed() { return this.disposed; } } const resource = new Disposable(await fs.open("my-file.txt", "r")); { await using resourceUsed = resource; console.log(resource.isDisposed); // false } console.log(resource.isDisposed); // true Specifications Specification ECMAScript Async Explicit Resource Management # table-1 Browser compatibility Loading… See also Polyfill of Symbol.asyncDispose in core-js JavaScript resource management Symbol.dispose await using AsyncDisposableStack.prototype[Symbol.asyncDispose]() AsyncIterator.prototype[Symbol.asyncDispose]() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Aug 2, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Symbol Constructor Symbol() Static methods for() keyFor() Static properties asyncDispose asyncIterator dispose hasInstance isConcatSpreadable iterator match matchAll replace search species split toPrimitive toStringTag unscopables Instance methods toString() valueOf() [Symbol .toPrimitive]() Instance properties description Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .