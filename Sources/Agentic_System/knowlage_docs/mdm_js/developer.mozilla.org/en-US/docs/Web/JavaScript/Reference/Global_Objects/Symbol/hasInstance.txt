Symbol.hasInstance - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Symbol hasInstance Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Symbol.hasInstance Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2017⁩. Learn more See full compatibility Report feedback The Symbol.hasInstance static data property represents the well-known symbol Symbol.hasInstance . The instanceof operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance. In this article Try it Value Description Examples Specifications Browser compatibility See also Try it class Array1 { static [Symbol.hasInstance](instance) { return Array.isArray(instance); } } console.log([] instanceof Array1); // Expected output: true Value The well-known symbol Symbol.hasInstance . Property attributes of Symbol.hasInstance Writable no Enumerable no Configurable no Description The instanceof operator uses the following algorithm to calculate the return value of object instanceof constructor : If constructor has a [Symbol.hasInstance]() method, then call it with object as the first argument and return the result, coerced to a boolean . Throw a TypeError if constructor is not an object, or if constructor[Symbol.hasInstance] is not one of null , undefined , or a function. Otherwise, if constructor doesn't have a [Symbol.hasInstance]() method ( constructor[Symbol.hasInstance] is null or undefined ), then determine the result using the same algorithm as Function.prototype[Symbol.hasInstance]() . Throw a TypeError if constructor is not a function. Because all functions inherit from Function.prototype by default, most of the time, the Function.prototype[Symbol.hasInstance]() method specifies the behavior of instanceof when the right-hand side is a function. Examples Custom instanceof behavior You could implement your custom instanceof behavior like this, for example: js class MyArray { static [Symbol.hasInstance](instance) { return Array.isArray(instance); } } console.log([] instanceof MyArray); // true js function MyArray() {} Object.defineProperty(MyArray, Symbol.hasInstance, { value(instance) { return Array.isArray(instance); }, }); console.log([] instanceof MyArray); // true Checking the instance of an object Just in the same manner at which you can check if an object is an instance of a class using the instanceof keyword, we can also use Symbol.hasInstance for such checks. js class Animal { constructor() {} } const cat = new Animal(); console.log(Animal[Symbol.hasInstance](cat)); // true Specifications Specification ECMAScript® 2026 Language Specification # sec-symbol.hasinstance Browser compatibility Loading… See also instanceof Function.prototype[Symbol.hasInstance]() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Symbol Constructor Symbol() Static methods for() keyFor() Static properties asyncDispose asyncIterator dispose hasInstance isConcatSpreadable iterator match matchAll replace search species split toPrimitive toStringTag unscopables Instance methods toString() valueOf() [Symbol .toPrimitive]() Instance properties description Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .