Symbol.toPrimitive - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Symbol toPrimitive Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Symbol.toPrimitive Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2017⁩. Learn more See full compatibility Report feedback The Symbol.toPrimitive static data property represents the well-known symbol Symbol.toPrimitive . All type coercion algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's valueOf() and toString() methods. In this article Try it Value Description Examples Specifications Browser compatibility See also Try it const object = { [Symbol.toPrimitive](hint) { if (hint === "number") { return 42; } return null; }, }; console.log(+object); // Expected output: 42 Value The well-known symbol Symbol.toPrimitive . Property attributes of Symbol.toPrimitive Writable no Enumerable no Configurable no Description With the help of the Symbol.toPrimitive property (used as a function value), an object can be converted to a primitive value. The function is called with a string argument hint , which specifies the preferred type of the result primitive value. The hint argument can be one of "number" , "string" , and "default" . The "number" hint is used by numeric coercion algorithms. The "string" hint is used by the string coercion algorithm. The "default" hint is used by the primitive coercion algorithm. The hint only acts as a weak signal of preference, and the implementation is free to ignore it (as Symbol.prototype[Symbol.toPrimitive]() does). The language does not enforce alignment between the hint and the result type, although [Symbol.toPrimitive]() must return a primitive, or a TypeError is thrown. Objects without the [Symbol.toPrimitive] property are converted to primitives by calling the valueOf() and toString() methods in different orders, which is explained in more detail in the type coercion section. [Symbol.toPrimitive]() allows full control over the primitive conversion process. For example, Date.prototype[Symbol.toPrimitive]() treats "default" as if it's "string" and calls toString() instead of valueOf() . Symbol.prototype[Symbol.toPrimitive]() ignores the hint and always returns a symbol, which means even in string contexts, Symbol.prototype.toString() won't be called, and Symbol objects must always be explicitly converted to strings through String() . Examples Modifying primitive values converted from an object Following example describes how Symbol.toPrimitive property can modify the primitive value converted from an object. js // An object without Symbol.toPrimitive property. const obj1 = {}; console.log(+obj1); // NaN console.log(`${obj1}`); // "[object Object]" console.log(obj1 + ""); // "[object Object]" // An object with Symbol.toPrimitive property. const obj2 = { [Symbol.toPrimitive](hint) { if (hint === "number") { return 10; } if (hint === "string") { return "hello"; } return true; }, }; console.log(+obj2); // 10 — hint is "number" console.log(`${obj2}`); // "hello" — hint is "string" console.log(obj2 + ""); // "true" — hint is "default" Specifications Specification ECMAScript® 2026 Language Specification # sec-symbol.toprimitive Browser compatibility Loading… See also Polyfill of Symbol.toPrimitive in core-js Date.prototype[Symbol.toPrimitive]() Symbol.prototype[Symbol.toPrimitive]() Object.prototype.toString() Object.prototype.valueOf() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 20, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Symbol Constructor Symbol() Static methods for() keyFor() Static properties asyncDispose asyncIterator dispose hasInstance isConcatSpreadable iterator match matchAll replace search species split toPrimitive toStringTag unscopables Instance methods toString() valueOf() [Symbol .toPrimitive]() Instance properties description Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .