Symbol.toStringTag - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Symbol toStringTag Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) Symbol.toStringTag Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨April 2017⁩. Learn more See full compatibility Report feedback The Symbol.toStringTag static data property represents the well-known symbol Symbol.toStringTag . Object.prototype.toString() looks up this symbol on the this value for the property containing a string that represents the type of the object. In this article Try it Value Examples Specifications Browser compatibility See also Try it class ValidatorClass { get [Symbol.toStringTag]() { return "Validator"; } } console.log(Object.prototype.toString.call(new ValidatorClass())); // Expected output: "[object Validator]" Value The well-known symbol Symbol.toStringTag . Property attributes of Symbol.toStringTag Writable no Enumerable no Configurable no Examples Default tags Some values do not have Symbol.toStringTag , but have special toString() representations. For a complete list, see Object.prototype.toString() . js Object.prototype.toString.call("foo"); // "[object String]" Object.prototype.toString.call([1, 2]); // "[object Array]" Object.prototype.toString.call(3); // "[object Number]" Object.prototype.toString.call(true); // "[object Boolean]" Object.prototype.toString.call(undefined); // "[object Undefined]" Object.prototype.toString.call(null); // "[object Null]" // … and more Built-in toStringTag symbols Most built-in objects provide their own [Symbol.toStringTag] property. Almost all built-in objects' [Symbol.toStringTag] property is not writable, not enumerable, and configurable; the exception is Iterator , which is writable for compatibility reasons. For constructor objects like Promise , the property is installed on Constructor.prototype , so that all instances of the constructor inherit [Symbol.toStringTag] and can be stringified. For non-constructor objects like Math and JSON , the property is installed as a static property, so that the namespace object itself can be stringified. Sometimes, the constructor also provides its own toString method (for example, Intl.Locale ), in which case the [Symbol.toStringTag] property is only used when you explicitly call Object.prototype.toString on it. js Object.prototype.toString.call(new Map()); // "[object Map]" Object.prototype.toString.call(function* () {}); // "[object GeneratorFunction]" Object.prototype.toString.call(Promise.resolve()); // "[object Promise]" // … and more Custom tag with toStringTag When creating your own class, JavaScript defaults to the "Object" tag: js class ValidatorClass {} Object.prototype.toString.call(new ValidatorClass()); // "[object Object]" Now, with the help of toStringTag , you are able to set your own custom tag: js class ValidatorClass { get [Symbol.toStringTag]() { return "Validator"; } } Object.prototype.toString.call(new ValidatorClass()); // "[object Validator]" toStringTag available on all DOM prototype objects Due to a WebIDL spec change in mid-2020, browsers are adding a Symbol.toStringTag property to all DOM prototype objects. For example, to access the Symbol.toStringTag property on HTMLButtonElement : js const test = document.createElement("button"); test.toString(); // "[object HTMLButtonElement]" test[Symbol.toStringTag]; // "HTMLButtonElement" Specifications Specification ECMAScript® 2026 Language Specification # sec-symbol.tostringtag Browser compatibility Loading… See also Polyfill of Symbol.toStringTag in core-js Object.prototype.toString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Symbol Constructor Symbol() Static methods for() keyFor() Static properties asyncDispose asyncIterator dispose hasInstance isConcatSpreadable iterator match matchAll replace search species split toPrimitive toStringTag unscopables Instance methods toString() valueOf() [Symbol .toPrimitive]() Instance properties description Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .