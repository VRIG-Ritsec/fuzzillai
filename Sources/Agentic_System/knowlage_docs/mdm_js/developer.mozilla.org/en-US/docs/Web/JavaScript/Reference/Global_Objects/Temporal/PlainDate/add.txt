Temporal.PlainDate.prototype.add() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Temporal Temporal.PlainDate add() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Temporal.PlainDate.prototype.add() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The add() method of Temporal.PlainDate instances returns a new Temporal.PlainDate object representing this date moved forward by a given duration (in a form convertible by Temporal.Duration.from() ). In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js add(duration) add(duration, options) Parameters duration A string, an object, or a Temporal.Duration instance representing a duration to add to this date. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from() . options Optional An object containing the following property: overflow Optional A string specifying the behavior when a date component is out of range. Possible values are: "constrain" (default) The date component is clamped to the valid range. "reject" A RangeError is thrown if the date component is out of range. Return value A new Temporal.PlainDate object representing the date specified by the original PlainDate , plus the duration. Exceptions RangeError Thrown if the result is not in the representable range , which is ±(10 8 + 1) days, or about ±273,972.6 years, from the Unix epoch. Description The duration is handled in this way: Move forward by the number of years, keeping the monthCode and day the same. If the monthCode is invalid in the resulting year (impossible for Gregorian and ISO 8601, but possible for calendars with leap months), we adjust based on the overflow option: for constrain , we pick another month according to the cultural conventions of that calendar's users. For example, because the leap month is usually thought of as a duplicate of another month, we may pick the month that it is a duplicate of. Move forward by the number of months, adjusting the year if necessary, keeping the day the same. If the day is invalid in the resulting month (e.g., February 30), we adjust based on the overflow option: for constrain , we pick the closest valid day (e.g., February 28 or 29). All commonly supported calendars use fixed-length weeks, so the number of weeks is just converted to the number of days. If the rule is more complex, we may take an approach similar to shifting months. For all non-calendar units (days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds), they are converted to the number of days. Fractional part of a day is ignored. Then, we move forward by that number of days, adjusting the month and year if necessary. Adding a duration is equivalent to subtracting its negation . Examples Adding a duration in ISO 8601 calendar js const start = Temporal.PlainDate.from("2021-01-01"); const end = start.add({ years: 1, months: 2, weeks: 3, days: 4 }); console.log(end.toString()); // 2022-03-26 const end2 = start.add({ years: -1, months: -2, weeks: -3, days: -4 }); console.log(end2.toString()); // 2019-10-07 const distance = Temporal.PlainDate.from("2020-01-01").until("2021-01-01"); // 366 days const end3 = start.add(distance); console.log(end3.toString()); // 2022-01-02 Adding a duration in a non-ISO calendar js const start = Temporal.PlainDate.from("2021-01-01[u-ca=chinese]"); console.log(start.toLocaleString("en-US", { calendar: "chinese" })); // 11/18/2020 const end = start.add({ months: 1 }); console.log(end.toLocaleString("en-US", { calendar: "chinese" })); // 12/18/2020 Adding a duration with overflow If we move a few months and the corresponding day is invalid in this month, then we adjust the day based on the overflow option. js const start = Temporal.PlainDate.from("2021-01-31"); const end = start.add({ months: 1 }); console.log(end.toString()); // 2021-02-28 // Any further day additions are based on the clamped month-day: const end2 = start.add({ months: 1, days: 31 }); console.log(end2.toString()); // 2021-03-31 // Compare with the same addition in a different order that results in no overflow: const end3 = start.add({ days: 31 }).add({ months: 1 }); console.log(end3.toString()); // 2021-04-03 Overflow can also occur for the month, for calendars where different years have different numbers of months (usually due to leap months). js const start = Temporal.PlainDate.from("2023-04-01[u-ca=chinese]"); console.log(start.toLocaleString("en-US", { calendar: "chinese" })); // 2bis/11/2023; "bis" means leap month const end = start.add({ years: 1 }); console.log(end.toLocaleString("en-US", { calendar: "chinese" })); // 3/11/2024 // Compare: const start = Temporal.PlainDate.from("2023-04-30[u-ca=chinese]"); console.log(start.toLocaleString("en-US", { calendar: "chinese" })); // 3/11/2023 const end = start.add({ years: 1 }); console.log(end.toLocaleString("en-US", { calendar: "chinese" })); // 3/11/2024; same day as above! Note that the following is not an overflow because the month can just increment: js const start = Temporal.PlainDate.from("2021-01-01"); const end = start.add({ days: 100 }); console.log(end.toString()); // 2021-04-11 You can also throw an error if the date component is out of range: js const start = Temporal.PlainDate.from("2021-01-31"); const end = start.add({ months: 1 }, { overflow: "reject" }); // RangeError: date value "day" not in 1..28: 31 const start = Temporal.PlainDate.from("2023-04-01[u-ca=chinese]"); const end = start.add({ years: 1 }, { overflow: "reject" }); // RangeError: invalid "monthCode" calendar field: M02L Adding time durations Fractional parts of a day are ignored. js const start = Temporal.PlainDate.from("2021-01-01"); const end = start.add({ hours: 25 }); // Same as adding 1 day console.log(end.toString()); // 2021-01-02 Specifications Specification Temporal # sec-temporal.plaindate.prototype.add Browser compatibility Loading… See also Temporal.PlainDate Temporal.Duration Temporal.PlainDate.prototype.subtract() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Temporal .PlainDate Experimental Constructor Temporal .PlainDate() Experimental Static methods compare() Experimental from() Experimental Instance methods add() Experimental equals() Experimental since() Experimental subtract() Experimental toJSON() Experimental toLocaleString() Experimental toPlainDateTime() Experimental toPlainMonthDay() Experimental toPlainYearMonth() Experimental toString() Experimental toZonedDateTime() Experimental until() Experimental valueOf() Experimental with() Experimental withCalendar() Experimental Instance properties calendarId Experimental day Experimental dayOfWeek Experimental dayOfYear Experimental daysInMonth Experimental daysInWeek Experimental daysInYear Experimental era Experimental eraYear Experimental inLeapYear Experimental month Experimental monthCode Experimental monthsInYear Experimental weekOfYear Experimental year Experimental yearOfWeek Experimental Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Temporal Experimental Temporal .Duration Experimental Temporal .Instant Experimental Temporal .Now Experimental Temporal .PlainDateTime Experimental Temporal .PlainMonthDay Experimental Temporal .PlainTime Experimental Temporal .PlainYearMonth Experimental Temporal .ZonedDateTime Experimental Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .