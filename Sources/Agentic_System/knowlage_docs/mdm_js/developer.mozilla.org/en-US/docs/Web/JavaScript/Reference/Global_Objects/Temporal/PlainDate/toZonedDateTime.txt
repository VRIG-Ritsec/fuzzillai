Temporal.PlainDate.prototype.toZonedDateTime() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Temporal Temporal.PlainDate toZonedDateTime() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Temporal.PlainDate.prototype.toZonedDateTime() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The toZonedDateTime() method of Temporal.PlainDate instances returns a new Temporal.ZonedDateTime object representing this date, a supplied time, and a supplied time zone, in the same calendar system. In this article Syntax Examples Specifications Browser compatibility See also Syntax js toZonedDateTime(timeZone) toZonedDateTime(info) Parameters timeZone Either a string or a Temporal.ZonedDateTime instance representing the timeZone option. This is a convenience overload, so toZonedDateTime(timeZone) is equivalent to toZonedDateTime({ timeZone }) , where timeZone is a string or Temporal.ZonedDateTime . This overload is chosen when the first argument is not an object, or the object's timeZone property is undefined (because ZonedDateTime instances have a timeZoneId property instead). info An object containing some or all of the following properties (in the order they are retrieved and validated): plainTime Optional A string, an object, or a Temporal.PlainTime instance representing the time component of the resulting ZonedDateTime . It is converted to a Temporal.PlainTime object using the same algorithm as Temporal.PlainTime.from() . Defaults to the first valid time in this time zone on this calendar date, which is usually "00:00:00" , but may be different if, for example, daylight saving time skips midnight. timeZone Either a string or a Temporal.ZonedDateTime instance representing the time zone to use. If a Temporal.ZonedDateTime instance, its time zone is used. If a string, it can be a named time zone identifier, an offset time zone identifier, or a date-time string containing a time zone identifier or an offset (see time zones and offsets for more information). Return value A new Temporal.ZonedDateTime object representing the date and time specified by this date, plainTime , and timeZone , interpreted in the calendar system of this date. In the case of ambiguities , the compatible behavior is always used: if the time falls into a gap, we move forward by the gap length; if the time falls into an ambiguity, we choose the earlier of the two possibilities. This means the resulting ZonedDateTime may have a potentially different date or time than the input. Exceptions TypeError Thrown if timeZone is not a string or a Temporal.ZonedDateTime instance. RangeError Thrown if timeZone is a string that is not a valid time zone identifier. Examples Using toZonedDateTime() js const summer = Temporal.PlainDate.from("2021-07-01"); // Just time zone const summerTime = summer.toZonedDateTime("America/New_York"); console.log(summerTime.toString()); // 2021-07-01T00:00:00-04:00[America/New_York] const winter = Temporal.PlainDate.from("2021-01-01"); // Time zone and time const winterTime = winter.toZonedDateTime({ plainTime: "12:34:56", timeZone: "America/New_York", }); console.log(winterTime.toString()); // 2021-01-01T12:34:56-05:00[America/New_York] const spring = Temporal.PlainDate.from("2021-03-01"); // Time zone as object and time as object const springTime = spring.toZonedDateTime({ plainTime: summerTime.toPlainTime(), timeZone: winterTime, }); console.log(springTime.toString()); // 2021-03-01T00:00:00-05:00[America/New_York] Specifications Specification Temporal # sec-temporal.plaindate.prototype.tozoneddatetime Browser compatibility Loading… See also Temporal.PlainDate Temporal.ZonedDateTime Temporal.PlainTime Temporal.PlainDate.prototype.toPlainDateTime() Temporal.PlainDate.prototype.toPlainMonthDay() Temporal.PlainDate.prototype.toPlainYearMonth() Temporal.ZonedDateTime.prototype.toPlainDate() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Temporal .PlainDate Experimental Constructor Temporal .PlainDate() Experimental Static methods compare() Experimental from() Experimental Instance methods add() Experimental equals() Experimental since() Experimental subtract() Experimental toJSON() Experimental toLocaleString() Experimental toPlainDateTime() Experimental toPlainMonthDay() Experimental toPlainYearMonth() Experimental toString() Experimental toZonedDateTime() Experimental until() Experimental valueOf() Experimental with() Experimental withCalendar() Experimental Instance properties calendarId Experimental day Experimental dayOfWeek Experimental dayOfYear Experimental daysInMonth Experimental daysInWeek Experimental daysInYear Experimental era Experimental eraYear Experimental inLeapYear Experimental month Experimental monthCode Experimental monthsInYear Experimental weekOfYear Experimental year Experimental yearOfWeek Experimental Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Temporal Experimental Temporal .Duration Experimental Temporal .Instant Experimental Temporal .Now Experimental Temporal .PlainDateTime Experimental Temporal .PlainMonthDay Experimental Temporal .PlainTime Experimental Temporal .PlainYearMonth Experimental Temporal .ZonedDateTime Experimental Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .