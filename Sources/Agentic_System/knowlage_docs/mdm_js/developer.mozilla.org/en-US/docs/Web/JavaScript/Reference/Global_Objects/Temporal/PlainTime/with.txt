Temporal.PlainTime.prototype.with() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Temporal Temporal.PlainTime with() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Temporal.PlainTime.prototype.with() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The with() method of Temporal.PlainTime instances returns a new Temporal.PlainTime object representing this time with some fields replaced by new values. Because all Temporal objects are designed to be immutable, this method essentially functions as the setter for the time's fields. In this article Syntax Examples Specifications Browser compatibility See also Syntax js with(info) with(info, options) Parameters info An object containing at least one of the properties recognized by Temporal.PlainTime.from() : hour , microsecond , millisecond , minute , nanosecond , second . Unspecified properties use the values from the original time. options Optional An object containing the following property: overflow Optional A string specifying the behavior when a time component is out of range. Possible values are: "constrain" (default) The time component is clamped to the valid range. "reject" A RangeError is thrown if the time component is out of range. Return value A new Temporal.PlainTime object, where the fields specified in info that are not undefined are replaced by the corresponding values, and the rest of the fields are copied from the original time. Exceptions TypeError Thrown in one of the following cases: info is not an object with at least one recognized property or a string. options is not an object or undefined . RangeError Thrown if the provided numerical properties are out of range, and options.overflow is set to "reject" . Examples Using with() js const time = Temporal.PlainTime.from("12:34:56.123456789"); const newTime = time.with({ hour: 23 }); console.log(newTime.toString()); // '23:34:56.123456789' For more examples, see the documentation for the individual properties that can be set using with() . Specifications Specification Temporal # sec-temporal.plaintime.prototype.with Browser compatibility Loading… See also Temporal.PlainTime Temporal.PlainTime.from() Temporal.PlainTime.prototype.add() Temporal.PlainTime.prototype.subtract() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Temporal .PlainTime Experimental Constructor Temporal .PlainTime() Experimental Static methods compare() Experimental from() Experimental Instance methods add() Experimental equals() Experimental round() Experimental since() Experimental subtract() Experimental toJSON() Experimental toLocaleString() Experimental toString() Experimental until() Experimental valueOf() Experimental with() Experimental Instance properties hour Experimental microsecond Experimental millisecond Experimental minute Experimental nanosecond Experimental second Experimental Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Temporal Experimental Temporal .Duration Experimental Temporal .Instant Experimental Temporal .Now Experimental Temporal .PlainDate Experimental Temporal .PlainDateTime Experimental Temporal .PlainMonthDay Experimental Temporal .PlainYearMonth Experimental Temporal .ZonedDateTime Experimental Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .