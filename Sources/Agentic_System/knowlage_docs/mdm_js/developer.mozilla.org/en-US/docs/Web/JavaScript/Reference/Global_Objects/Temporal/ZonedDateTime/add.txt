Temporal.ZonedDateTime.prototype.add() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Temporal Temporal.ZonedDateTime add() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Temporal.ZonedDateTime.prototype.add() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The add() method of Temporal.ZonedDateTime instances returns a new Temporal.ZonedDateTime object representing this date-time moved forward by a given duration (in a form convertible by Temporal.Duration.from() ). In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js add(duration) add(duration, options) Parameters duration A string, an object, or a Temporal.Duration instance representing a duration to add to this date-time. It is converted to a Temporal.Duration object using the same algorithm as Temporal.Duration.from() . options Optional An object containing the following property: overflow Optional A string specifying the behavior when a date component is out of range. Possible values are: "constrain" (default) The date component is clamped to the valid range. "reject" A RangeError is thrown if the date component is out of range. Return value A new Temporal.ZonedDateTime object representing the date-time specified by the original ZonedDateTime , plus the duration. Exceptions RangeError Thrown if the result is not in the representable range , which is ±10 8 days, or about ±273,972.6 years, from the Unix epoch. Description For how calendar durations are added, see Temporal.PlainDate.prototype.add() . Addition and subtraction are performed according to rules defined in RFC 5545 (iCalendar) : Add/subtract the date portion of a duration using calendar arithmetic; in other words, add the date portion to its PlainDateTime using Temporal.PlainDateTime.prototype.add() , and then interpret the result in the same time zone. The result will automatically adjust for daylight saving time using the rules of this instance's timeZone field. For example, 2024-11-03T01:00:00-04:00[America/New_York] plus one day is 2024-11-04T01:00:00-05:00[America/New_York] , as if the day has 25 hours. If the date-time is ambiguous or invalid due to a time zone offset transition, it is resolved using the disambiguation: "compatible" behavior: the later of the two possible instants will be used for time-skipped transitions and the earlier of the two possible instants will be used for time-repeated transitions. For example, 2024-03-09T02:05:00-05:00[America/New_York] plus one day is supposedly 2024-03-10T02:05:00-05:00[America/New_York] , but this time doesn't exist, so the wall-clock time one hour after, 2024-03-10T03:05:00-04:00[America/New_York] , is returned. If the offset is ambiguous , it is resolved using the offset: "prefer" behavior: the offset is used if it's valid for the time zone and the local time, and recalculated otherwise. For example, 2024-11-02T01:00:00-04:00[America/New_York] plus one day is 2024-11-03T01:00:00-04:00[America/New_York] , while 2024-11-04T01:00:00-05:00[America/New_York] minus one day is 2024-11-03T01:00:00-05:00[America/New_York] . If the resulting date-time's components are out of bounds, they are resolved using the overflow option. For example, 2024-08-31 plus one month is 2024-09-31 which doesn't exist, so it is clamped to 2024-09-30 by default. Add/subtract the time portion of a duration using real-world time; in other words, add the time portion to its Instant using Temporal.Instant.prototype.add() , and then interpret the result in the same time zone. For example, 2024-11-03T01:00:00-04:00[America/New_York] plus one hour is 2024-11-03T01:00:00-05:00[America/New_York] . These rules make arithmetic with Temporal.ZonedDateTime "DST-safe", which means that the results most closely match the expectations of both real-world users and implementers of other standards-compliant calendar applications. These expectations include: Adding or subtracting days should keep clock time consistent across DST transitions. For example, if you have an appointment on Saturday at 1:00PM and you ask to reschedule it 1 day later, you would expect the reschedule appointment to still be at 1:00PM, even if there was a DST transition overnight. Adding or subtracting the time portion of a duration should ignore DST transitions. For example, a friend you've asked to meet in 2 hours will be annoyed if you show up 1 hour or 3 hours later. There should be a consistent and relatively-unsurprising order of operations. If results are at or near a DST transition, ambiguities should be handled automatically (no crashing) and deterministically. Adding a duration is equivalent to subtracting its negation . Examples Adding a duration js const start = Temporal.ZonedDateTime.from( "2021-11-01T12:34:56-04:00[America/New_York]", ); const end = start.add({ years: 1, months: 2, weeks: 3, days: 4, hours: 5, minutes: 6, seconds: 7, milliseconds: 8, }); console.log(end.toString()); // 2023-01-26T17:41:03.008-05:00[America/New_York] For more examples, especially with how different calendars and the overflow option interact with calendar durations, see Temporal.PlainDate.prototype.add() . Specifications Specification Temporal # sec-temporal.zoneddatetime.prototype.add Browser compatibility Loading… See also Temporal.ZonedDateTime Temporal.Duration Temporal.ZonedDateTime.prototype.subtract() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Temporal .ZonedDateTime Experimental Constructor Temporal .ZonedDateTime() Experimental Static methods compare() Experimental from() Experimental Instance methods add() Experimental equals() Experimental getTimeZoneTransition() Experimental round() Experimental since() Experimental startOfDay() Experimental subtract() Experimental toInstant() Experimental toJSON() Experimental toLocaleString() Experimental toPlainDate() Experimental toPlainDateTime() Experimental toPlainTime() Experimental toString() Experimental until() Experimental valueOf() Experimental with() Experimental withCalendar() Experimental withPlainTime() Experimental withTimeZone() Experimental Instance properties calendarId Experimental day Experimental dayOfWeek Experimental dayOfYear Experimental daysInMonth Experimental daysInWeek Experimental daysInYear Experimental epochMilliseconds Experimental epochNanoseconds Experimental era Experimental eraYear Experimental hour Experimental hoursInDay Experimental inLeapYear Experimental microsecond Experimental millisecond Experimental minute Experimental month Experimental monthCode Experimental monthsInYear Experimental nanosecond Experimental offset Experimental offsetNanoseconds Experimental second Experimental timeZoneId Experimental weekOfYear Experimental year Experimental yearOfWeek Experimental Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Temporal Experimental Temporal .Duration Experimental Temporal .Instant Experimental Temporal .Now Experimental Temporal .PlainDate Experimental Temporal .PlainDateTime Experimental Temporal .PlainMonthDay Experimental Temporal .PlainTime Experimental Temporal .PlainYearMonth Experimental Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .