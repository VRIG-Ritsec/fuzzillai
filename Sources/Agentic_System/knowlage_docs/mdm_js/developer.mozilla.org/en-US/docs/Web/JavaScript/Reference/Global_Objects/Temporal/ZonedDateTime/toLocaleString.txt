Temporal.ZonedDateTime.prototype.toLocaleString() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Temporal Temporal.ZonedDateTime toLocaleString() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Temporal.ZonedDateTime.prototype.toLocaleString() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The toLocaleString() method of Temporal.ZonedDateTime instances returns a string with a language-sensitive representation of this date-time. In implementations with Intl.DateTimeFormat API support, this method delegates to Intl.DateTimeFormat and passes this date-time converted to a Temporal.Instant (because Intl.DateTimeFormat cannot directly format a Temporal.ZonedDateTime ). Every time toLocaleString is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a Intl.DateTimeFormat object and use its format() method, because a DateTimeFormat object remembers the arguments passed to it and may decide to cache a slice of the database, so future format calls can search for localization strings within a more constrained context. However, currently Intl.DateTimeFormat does not support formatting Temporal.ZonedDateTime objects, so you must convert them to Temporal.Instant objects first before passing them to format() . In this article Syntax Examples Specifications Browser compatibility See also Syntax js toLocaleString() toLocaleString(locales) toLocaleString(locales, options) Parameters The locales and options parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations that support the Intl.DateTimeFormat API , these parameters correspond exactly to the Intl.DateTimeFormat() constructor's parameters. Implementations without Intl.DateTimeFormat support return the exact same string as toString() , ignoring both parameters. locales Optional A string with a BCP 47 language tag , or an array of such strings. Corresponds to the locales parameter of the Intl.DateTimeFormat() constructor. options Optional An object adjusting the output format. Corresponds to the options parameter of the Intl.DateTimeFormat() constructor. If this date-time's calendar is not "iso8601" , the calendar option must be provided with the same value; otherwise, if this date-time's calendar is "iso8601" , the calendar option can be any value. The timeZone option must not be provided, as it is automatically set to be the date-time's timeZoneId . Regarding the date-time component options and the style shortcuts ( dateStyle and timeStyle ), the options should follow one of these forms: Provide none of them: year , month , day , hour , minute , and second will default to "numeric" . Provide at least one of dateStyle or timeStyle : the date-time components will be set according to the specified style and the locale. Provide some date-time component options. Only the specified date-time components will be included in the output. See the Intl.DateTimeFormat() constructor for details on these parameters and how to use them. Return value A string representing the given date-time according to language-specific conventions. In implementations with Intl.DateTimeFormat , this is equivalent to new Intl.DateTimeFormat(locales, { ...options, timeZone: dateTime.timeZoneId }).format(dateTime.toInstant()) , where options has been normalized as described above. Note: Most of the time, the formatting returned by toLocaleString() is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of toLocaleString() to hardcoded constants. Exceptions RangeError Thrown if any of the options is invalid. TypeError Thrown if any of the options is not of the expected type. Examples Using toLocaleString() Basic use of this method without specifying a locale returns a formatted string in the default locale and with default options. js const zdt = Temporal.ZonedDateTime.from( "2021-08-01T12:34:56-04:00[America/New_York]", ); console.log(zdt.toLocaleString()); // 8/1/2021, 12:34:56 PM EDT (assuming en-US locale) If the date's calendar doesn't match the locale's default calendar, and the date's calendar is not iso8601 , an explicit calendar option must be provided with the same value. js const zdt = Temporal.ZonedDateTime.from( "2021-08-01T12:34:56+09:00[Asia/Tokyo][u-ca=japanese]", ); // The ja-JP locale uses the Gregorian calendar by default zdt.toLocaleString("ja-JP", { calendar: "japanese" }); // R3/8/1 12:34:56 JST Using toLocaleString() with options You can customize which parts of the date are included in the output by providing the options parameter. js const zdt = Temporal.ZonedDateTime.from( "2021-08-01T12:34:56+09:00[Asia/Tokyo][u-ca=japanese]", ); zdt.toLocaleString("ja-JP", { calendar: "japanese", dateStyle: "full", timeStyle: "full", }); // 令和3年8月1日日曜日 12時34分56秒 日本標準時 zdt.toLocaleString("ja-JP", { calendar: "japanese", year: "numeric", month: "long", hour: "numeric", timeZoneName: "shortGeneric", }); // 令和3年8月 12時 JST zdt.toLocaleString("ja-JP", { calendar: "japanese", year: "numeric", hour: "numeric", minute: "numeric", }); // 令和3年 12:34 Specifications Specification Temporal # sec-temporal.zoneddatetime.prototype.tolocalestring Browser compatibility Loading… See also Temporal.ZonedDateTime Intl.DateTimeFormat Temporal.ZonedDateTime.prototype.toJSON() Temporal.ZonedDateTime.prototype.toString() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 24, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Temporal .ZonedDateTime Experimental Constructor Temporal .ZonedDateTime() Experimental Static methods compare() Experimental from() Experimental Instance methods add() Experimental equals() Experimental getTimeZoneTransition() Experimental round() Experimental since() Experimental startOfDay() Experimental subtract() Experimental toInstant() Experimental toJSON() Experimental toLocaleString() Experimental toPlainDate() Experimental toPlainDateTime() Experimental toPlainTime() Experimental toString() Experimental until() Experimental valueOf() Experimental with() Experimental withCalendar() Experimental withPlainTime() Experimental withTimeZone() Experimental Instance properties calendarId Experimental day Experimental dayOfWeek Experimental dayOfYear Experimental daysInMonth Experimental daysInWeek Experimental daysInYear Experimental epochMilliseconds Experimental epochNanoseconds Experimental era Experimental eraYear Experimental hour Experimental hoursInDay Experimental inLeapYear Experimental microsecond Experimental millisecond Experimental minute Experimental month Experimental monthCode Experimental monthsInYear Experimental nanosecond Experimental offset Experimental offsetNanoseconds Experimental second Experimental timeZoneId Experimental weekOfYear Experimental year Experimental yearOfWeek Experimental Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages Temporal Experimental Temporal .Duration Experimental Temporal .Instant Experimental Temporal .Now Experimental Temporal .PlainDate Experimental Temporal .PlainDateTime Experimental Temporal .PlainMonthDay Experimental Temporal .PlainTime Experimental Temporal .PlainYearMonth Experimental Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .