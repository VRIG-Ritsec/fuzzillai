TypedArray[Symbol.species] - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects TypedArray [Symbol.species] Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Français 日本語 한국어 Русский 中文 (简体) TypedArray[Symbol.species] Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2016⁩. Learn more See full compatibility Report feedback The TypedArray[Symbol.species] static accessor property returns the constructor used to construct return values from typed array methods. Warning: The existence of [Symbol.species] allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are investigating whether to remove this feature . Avoid relying on it if possible. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js TypedArray[Symbol.species] Return value The value of the constructor ( this ) on which get [Symbol.species] was called. The return value is used to construct return values from typed array methods that create new typed arrays. Description The [Symbol.species] accessor property returns the default constructor for typed array objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically: js // Hypothetical underlying implementation for illustration class TypedArray { static get [Symbol.species]() { return this; } } Because of this polymorphic implementation, [Symbol.species] of derived subclasses would also return the constructor itself by default. js class SubTypedArray extends Int8Array {} SubTypedArray[Symbol.species] === SubTypedArray; // true When calling typed array methods that do not mutate the existing array but return a new array instance (for example, filter() and map() ), the array's constructor[Symbol.species] will be accessed. The returned constructor will be used to construct the return value of the typed array method. However, unlike Array[Symbol.species] , when using [Symbol.species] to create new typed arrays, the language will make sure that the newly created array is a proper typed array and has the same content type as the original array — for example, you can't create a BigInt64Array from a Float64Array , or create a non-BigInt array from a BigInt array. Doing so throws a TypeError . js class BadArray extends Int8Array { static get [Symbol.species]() { return Array; } } new BadArray(1).map(() => 0); // TypeError: Method %TypedArray%.prototype.map called on incompatible receiver [object Array] class BadArray2 extends Int8Array { static get [Symbol.species]() { return BigInt64Array; } } new BadArray2(1).map(() => 0n); // TypeError: TypedArray.prototype.map constructed typed array of different content type from |this| Note: Due to a bug in both SpiderMonkey and V8, the content type match is not checked. Only Safari will throw a TypeError in the second example. Examples Species in ordinary objects The [Symbol.species] property returns the default constructor function, which is one of the typed array constructors itself for any given typed array constructor. js Int8Array[Symbol.species]; // function Int8Array() Uint8Array[Symbol.species]; // function Uint8Array() Float32Array[Symbol.species]; // function Float32Array() Species in derived objects In an instance of a custom TypedArray subclass, such as MyTypedArray , the MyTypedArray species is the MyTypedArray constructor. However, you might want to overwrite this, in order to return a parent typed array object in your derived class methods: js class MyTypedArray extends Uint8Array { // Overwrite MyTypedArray species to the parent Uint8Array constructor static get [Symbol.species]() { return Uint8Array; } } Specifications Specification ECMAScript® 2026 Language Specification # sec-get-%typedarray%-%symbol.species% Browser compatibility Loading… See also TypedArray Symbol.species Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects TypedArray Static methods from() of() Static properties BYTES_PER_ELEMENT [Symbol .species] Instance methods at() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() forEach() includes() indexOf() join() keys() lastIndexOf() map() reduce() reduceRight() reverse() set() slice() some() sort() subarray() toLocaleString() toReversed() toSorted() toString() values() with() [Symbol .iterator]() Instance properties buffer byteLength byteOffset length Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages BigInt64Array BigUint64Array Float16Array Float32Array Float64Array Int8Array Int16Array Int32Array Uint8Array Uint8ClampedArray Uint16Array Uint32Array Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .