Uint8Array.prototype.setFromBase64() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Uint8Array setFromBase64() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 Uint8Array.prototype.setFromBase64() Baseline 2025 Newly available Since ⁨September 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The setFromBase64() method of Uint8Array instances populates this Uint8Array object with bytes from a base64 -encoded string, returning an object indicating how many bytes were read and written. This method is most suitable for populating a pre-allocated array buffer. If you just want to create a new Uint8Array object from a base64-encoded string, use the static method Uint8Array.fromBase64() instead. In this article Syntax Examples Specifications Browser compatibility See also Syntax js setFromBase64(string) setFromBase64(string, options) Parameters string A base64 string encoding bytes to write into a Uint8Array . It has the same requirements as the string parameter of Uint8Array.fromBase64() . Note that the string is only read up to the point where the array is filled, so any invalid base64 syntax after that point is ignored. options Optional An object customizing the base64 string interpretation process. It has the same requirements as the options parameter of Uint8Array.fromBase64() . Return value An object containing the following properties: read The number of base64 characters read from the input string. If the decoded data fits into the array, this is the length of the input string (including padding); otherwise, it is the length up to the last complete 4-character chunk that fits into the array. Chunks will never be split (because the remaining bits cannot be partially "put back" into the base64 without completely re-encoding it); if the next chunk cannot fit into the remainder of the array, it will be entirely unread, resulting in the last one or two bytes of the array not being written. written The number of bytes written to the Uint8Array . Will never be greater than this Uint8Array 's byteLength . Exceptions SyntaxError Thrown if the input string contains characters outside the specified alphabet, or if the last chunk does not satisfy the lastChunkHandling option. TypeError Thrown in one of the following cases: The input string is not a string. The options object is not an object or undefined . The options are not of the expected values or undefined . Examples Decoding a base64 string This example uses the default alphabet and lastChunkHandling options to decode a base64 string into an existing Uint8Array . js const uint8Array = new Uint8Array(16); const result = uint8Array.setFromBase64("PGI+ TURO PC9i Pg=="); console.log(result); // { read: 19, written: 10 } console.log(uint8Array); // Uint8Array(16) [60, 98, 62, 77, 68, 78, 60, 47, 98, 62, 0, 0, 0, 0, 0, 0] Decoding a big string into a small array If the string contains more data than the array can hold, the method will only write as many bytes as the array can hold, without discarding any bits. js const uint8Array = new Uint8Array(8); const result = uint8Array.setFromBase64("PGI+ TURO PC9i Pg=="); console.log(result); // { read: 9, written: 6 } console.log(uint8Array); // Uint8Array(8) [60, 98, 62, 77, 68, 78, 0, 0] Note how the last two bytes of the array are not written. To decode these two bytes, we need to read at least three more base64 characters, which represent 18 bits. These can't fit into the remaining two bytes of the array, so we can only write 2 chunks, or 6 bytes. Setting data at a specific offset The setFromBase64() method always starts writing at the beginning of the Uint8Array . If you want to write to the middle of the array, you can write to a TypedArray.prototype.subarray() instead. js const uint8Array = new Uint8Array(16); // Start writing at offset 2 const result = uint8Array.subarray(2).setFromBase64("PGI+ TURO PC9i Pg=="); console.log(result); // { read: 19, written: 10 } console.log(uint8Array); // Uint8Array(16) [0, 0, 60, 98, 62, 77, 68, 78, 60, 47, 98, 62, 0, 0, 0, 0] Stream decoding This example is adapted from the original proposal . It mimics the TextDecoder API with the stream option. Note the use of lastChunkHandling: "stop-before-partial" to handle incomplete chunks. js class Base64Decoder { #extra = ""; decode(chunk = "", options = {}) { const opts = { ...options }; // match TextEncoder API if (opts.stream) { opts.lastChunkHandling = "stop-before-partial"; } chunk = this.#extra + chunk; this.#extra = ""; // For simplicity, allocate new memory every time // the calculation below is guaranteed to be enough, // but may be too much if there is whitespace // if you're really concerned about memory, a TextDecoder style API is a bad choice let buffer = new Uint8Array(Math.ceil((chunk.length * 3) / 4)); const { read, written } = buffer.setFromBase64(chunk, opts); buffer = buffer.subarray(0, written); this.#extra = chunk.slice(read); return buffer; } } const decoder = new Base64Decoder(); console.log(decoder.decode("SG Vsb ", { stream: true })); // Uint8Array(3) [72, 101, 108] console.log(decoder.decode("G8gV29ybGR ", { stream: true })); // Uint8Array(6) [108, 111, 32, 87, 111, 114] console.log(decoder.decode("")); // Uint8Array(2) [108, 100] Specifications Specification Uint8Array to/from base64 # sec-uint8array.prototype.setfrombase64 Browser compatibility Loading… See also Polyfill of Uint8Array.prototype.setFromBase64 in core-js es-shims polyfill of Uint8Array.prototype.setFromBase64 Uint8Array Uint8Array.fromBase64() Uint8Array.prototype.toBase64() Window.atob() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Uint8Array Constructor Uint8Array() Static methods fromBase64() fromHex() Instance methods setFromBase64() setFromHex() toBase64() toHex() Inheritance TypedArray Static methods from() of() Static properties BYTES_PER_ELEMENT [Symbol .species] Instance methods at() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() forEach() includes() indexOf() join() keys() lastIndexOf() map() reduce() reduceRight() reverse() set() slice() some() sort() subarray() toLocaleString() toReversed() toSorted() toString() values() with() [Symbol .iterator]() Instance properties buffer byteLength byteOffset length Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages BigInt64Array BigUint64Array Float16Array Float32Array Float64Array Int8Array Int16Array Int32Array Uint8ClampedArray Uint16Array Uint32Array Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .