Uint8Array.prototype.toBase64() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects Uint8Array toBase64() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 Uint8Array.prototype.toBase64() Baseline 2025 Newly available Since ⁨September 2025⁩, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers. Learn more See full compatibility Report feedback The toBase64() method of Uint8Array instances returns a base64 -encoded string based on the data in this Uint8Array object. This method should be preferred over Window.btoa() , especially if you already have a Uint8Array holding the object, because you don't need to convert it to a string first. In this article Syntax Examples Specifications Browser compatibility See also Syntax js toBase64() toBase64(options) Parameters options Optional An object customizing the base64 string format. It can contain the following properties: alphabet Optional A string specifying the base64 alphabet to use. It can be one of the following: "base64" (default) Encode input with the standard base64 alphabet, which uses + and / . "base64url" Encode input with the URL-safe base64 alphabet, which uses - and _ . omitPadding Optional A boolean specifying whether to omit padding characters ( = ) at the end of the base64 string. The default is false . Return value A base64-encoded string representing the data in the Uint8Array . Exceptions TypeError Thrown in one of the following cases: The options object is not an object or undefined . The options.alphabet is not of the expected values or undefined . Examples Encoding binary data This example uses the default alphabet and omitPadding options to encode data from a Uint8Array into a base64 string. js const uint8Array = new Uint8Array([29, 233, 101, 161]); console.log(uint8Array.toBase64()); // "HelloQ==" Encoding data without padding js const uint8Array = new Uint8Array([29, 233, 101, 161]); console.log(uint8Array.toBase64({ omitPadding: true })); // "HelloQ" Encoding data with URL-safe alphabet This example populates a URLSearchParams object with a base64-encoded string using the URL-safe alphabet. js const uint8Array = new Uint8Array([46, 139, 222, 255, 42, 46]); const base64 = uint8Array.toBase64({ alphabet: "base64url" }); const params = new URLSearchParams(); params.set("data", base64); console.log(params.toString()); // "data=Love_you" Stream encoding This example is adapted from the original proposal , showcasing how to implement streaming in userland. It mimics the TextEncoder API with the stream option. js class Base64Encoder { #extra; #extraLength; constructor() { this.#extra = new Uint8Array(3); this.#extraLength = 0; } // Partly derived from https://github.com/lucacasonato/base64_streams/blob/main/src/iterator/encoder.ts encode(chunk = Uint8Array.of(), options = {}) { const stream = options.stream ?? false; if (this.#extraLength > 0) { const bytesNeeded = 3 - this.#extraLength; const bytesAvailable = Math.min(bytesNeeded, chunk.length); this.#extra.set(chunk.subarray(0, bytesAvailable), this.#extraLength); chunk = chunk.subarray(bytesAvailable); this.#extraLength += bytesAvailable; } if (!stream) { // assert: this.#extraLength.length === 0 || this.#extraLength === 3 || chunk.length === 0 const prefix = this.#extra.subarray(0, this.#extraLength).toBase64(); this.#extraLength = 0; return prefix + chunk.toBase64(); } let extraReturn = ""; if (this.#extraLength === 3) { extraReturn = this.#extra.toBase64(); this.#extraLength = 0; } const remainder = chunk.length % 3; if (remainder > 0) { this.#extra.set(chunk.subarray(chunk.length - remainder)); this.#extraLength = remainder; chunk = chunk.subarray(0, chunk.length - remainder); } return extraReturn + chunk.toBase64(); } } const encoder = new Base64Encoder(); console.log( encoder.encode(Uint8Array.of(72, 101, 108, 108, 111), { stream: true }), ); // "SGVs" console.log( encoder.encode(Uint8Array.of(32, 87, 111, 114, 108, 100), { stream: true }), ); // "bG8gV29y" console.log(encoder.encode()); // "bGQ=" Specifications Specification Uint8Array to/from base64 # sec-uint8array.prototype.tobase64 Browser compatibility Loading… See also Polyfill of Uint8Array.prototype.toBase64 in core-js es-shims polyfill of Uint8Array.prototype.toBase64 Uint8Array Uint8Array.fromBase64() Uint8Array.prototype.setFromBase64() Window.btoa() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 10, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects Uint8Array Constructor Uint8Array() Static methods fromBase64() fromHex() Instance methods setFromBase64() setFromHex() toBase64() toHex() Inheritance TypedArray Static methods from() of() Static properties BYTES_PER_ELEMENT [Symbol .species] Instance methods at() copyWithin() entries() every() fill() filter() find() findIndex() findLast() findLastIndex() forEach() includes() indexOf() join() keys() lastIndexOf() map() reduce() reduceRight() reverse() set() slice() some() sort() subarray() toLocaleString() toReversed() toSorted() toString() values() with() [Symbol .iterator]() Instance properties buffer byteLength byteOffset length Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Related pages BigInt64Array BigUint64Array Float16Array Float32Array Float64Array Int8Array Int16Array Int32Array Uint8ClampedArray Uint16Array Uint32Array Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .