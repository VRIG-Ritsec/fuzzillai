WeakMap.prototype.getOrInsertComputed() - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects WeakMap getOrInsertComputed() Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) WeakMap.prototype.getOrInsertComputed() Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback Experimental: This is an experimental technology Check the Browser compatibility table carefully before using this in production. The getOrInsertComputed() method of WeakMap instances returns the value corresponding to the specified key in this WeakMap . If the key is not present, it inserts a new entry with the key and a default value computed from a given callback, and returns the inserted value. Use this method instead of WeakMap.prototype.getOrInsert() when the default value is expensive to compute, and you want to avoid computing it unless it's actually needed. In this article Try it Syntax Examples Specifications Browser compatibility See also Try it const alan = { name: "Alan" }; const map = new WeakMap([[alan, 35]]); const defaultCreator = (obj) => `${obj.name}'s age is unknown`; console.log(map.getOrInsertComputed(alan, defaultCreator)); // Expected output: 35 const brett = { name: "Brett" }; console.log(map.getOrInsertComputed(brett, defaultCreator)); // Expected output: "Brett's age is unknown" Syntax js getOrInsertComputed(key, callback) Parameters key The key of the element to return from the Map object. Must be either an object or a non-registered symbol . Object keys are compared by reference , not by value. callback A function that returns the value to insert and return if the key is not already present in the Map object. The function is called with the following argument: key The same key that was passed to getOrInsertComputed() . Return value The value associated with the specified key in the WeakMap object. If the key can't be found, the result of callback(key) is inserted and returned. Examples Caching Caching involves building a mapping from the parameter of an expensive function to its return value, so that future calls with the same parameter can return the cached value instead of recomputing it. When no cached value exists, it needs to be computed and inserted into the cache. We use a WeakMap here instead of a Map , so that the cached argument values do not prevent them from being garbage-collected if they are no longer needed elsewhere in the program. If your cached function takes non-object arguments, you can use a Map instead. js // Any expensive function you want to cache function computeExpensiveValue(requestOptions) { // Imagine expensive computation, like fetching data or complex calculations console.log(`Fetching from ${requestOptions.url}`); return new Response("Fake response"); } // A higher-order function that adds caching to any function function withCache(fn) { const cache = new WeakMap(); return (param) => cache.getOrInsertComputed(param, fn); } const computeWithCache = withCache(computeExpensiveValue); const options = { url: "https://example.com/a", method: "GET" }; const value1 = computeWithCache(options); // Logs "Fetching from https://example.com/a" const value2 = computeWithCache(options); // No log Specifications Specification Upsert # sec-weakmap.prototype.getOrInsertComputed Browser compatibility Loading… See also Polyfill of WeakMap.prototype.getOrInsertComputed in core-js es-shims polyfill of WeakMap.prototype.getOrInsertComputed WeakMap WeakMap.prototype.get() WeakMap.prototype.set() WeakMap.prototype.has() WeakMap.prototype.getOrInsert() Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 26, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects WeakMap Constructor WeakMap() Instance methods delete() get() getOrInsert() Experimental getOrInsertComputed() Experimental has() set() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .