WeakSet - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Standard built-in objects WeakSet Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) WeakSet Baseline Widely available * This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨September 2015⁩. * Some parts of this feature may have varying levels of support. Learn more See full compatibility Report feedback A WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols . A value in the WeakSet may only occur once. It is unique in the WeakSet 's collection. In this article Description Constructor Instance properties Instance methods Examples Specifications Browser compatibility See also Description Values of WeakSets must be garbage-collectable. Most primitive data types can be arbitrarily created and don't have a lifetime, so they cannot be stored. Objects and non-registered symbols can be stored because they are garbage-collectable. The main differences to the Set object are: WeakSet s are collections of objects and symbols only . They cannot contain arbitrary values of any type, as Set s can. The WeakSet is weak , meaning references to objects in a WeakSet are held weakly . If no other references to a value stored in the WeakSet exist, those values can be garbage collected. Note: This also means that there is no list of current values stored in the collection. WeakSets are not enumerable. Key equality Like regular Set , value equality is based on the SameValueZero algorithm, which is the same as the === operator because WeakSet can only hold object and symbol values. This means that for object values, equality is based on object identity. They are compared by reference , not by value. Constructor WeakSet() Creates a new WeakSet object. Instance properties These properties are defined on WeakSet.prototype and shared by all WeakSet instances. WeakSet.prototype.constructor The constructor function that created the instance object. For WeakSet instances, the initial value is the WeakSet constructor. WeakSet.prototype[Symbol.toStringTag] The initial value of the [Symbol.toStringTag] property is the string "WeakSet" . This property is used in Object.prototype.toString() . Instance methods WeakSet.prototype.add() Inserts the specified value into this set, if it is not already present. WeakSet.prototype.delete() Removes the specified value from this set, if it is in the set. WeakSet.prototype.has() Returns a boolean indicating whether the specified value exists in this WeakSet or not. Examples Using the WeakSet object js const ws = new WeakSet(); const foo = {}; const bar = {}; ws.add(foo); ws.add(bar); ws.has(foo); // true ws.has(bar); // true ws.delete(foo); // removes foo from the set ws.has(foo); // false, foo has been removed ws.has(bar); // true, bar is retained Note that foo !== bar . While they are similar objects, they are not the same object . And so they are both added to the set. Detecting circular references Functions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed. WeakSet s are ideal for this purpose: js // Execute a callback on everything stored inside an object function execRecursively(fn, subject, _refs = new WeakSet()) { // Avoid infinite recursion if (_refs.has(subject)) { return; } fn(subject); if (typeof subject === "object" && subject) { _refs.add(subject); for (const key in subject) { execRecursively(fn, subject[key], _refs); } _refs.delete(subject); } } const foo = { foo: "Foo", bar: { bar: "Bar", }, }; foo.bar.baz = foo; // Circular reference! execRecursively((obj) => console.log(obj), foo); Here, a WeakSet is created on the first run, and passed along with every subsequent function call (using the internal _refs parameter). The number of objects or their traversal order is immaterial, so a WeakSet is more suitable (and performant) than a Set for tracking object references, especially if a very large number of objects is involved. Specifications Specification ECMAScript® 2026 Language Specification # sec-weakset-objects Browser compatibility Loading… See also Polyfill of WeakSet in core-js Map Set WeakMap Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Sep 22, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar Standard built-in objects WeakSet Constructor WeakSet() Instance methods add() delete() has() Inheritance Object/Function Static methods apply() bind() call() toString() [Symbol .hasInstance]() Static properties displayName Non-standard length name prototype arguments Non-standard Deprecated caller Non-standard Deprecated Instance methods __defineGetter__() Deprecated __defineSetter__() Deprecated __lookupGetter__() Deprecated __lookupSetter__() Deprecated hasOwnProperty() isPrototypeOf() propertyIsEnumerable() toLocaleString() toString() valueOf() Instance properties __proto__ Deprecated constructor Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .