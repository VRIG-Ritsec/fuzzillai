Destructuring - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Expressions and operators Destructuring Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) Español Français 日本語 한국어 Português (do Brasil) Русский 中文 (简体) 正體中文 (繁體) Destructuring Baseline Widely available This feature is well established and works across many devices and browser versions. It’s been available across browsers since ⁨August 2016⁩. Learn more See full compatibility Report feedback The destructuring syntax is a JavaScript syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. It can be used in locations that receive data (such as the left-hand side of an assignment or anywhere that creates new identifier bindings). In this article Try it Syntax Description Examples Specifications Browser compatibility See also Try it let a, b, rest; [a, b] = [10, 20]; console.log(a); // Expected output: 10 console.log(b); // Expected output: 20 [a, b, ...rest] = [10, 20, 30, 40, 50]; console.log(rest); // Expected output: Array [30, 40, 50] Syntax js const [a, b] = array; const [a, , b] = array; const [a = aDefault, b] = array; const [a, b, ...rest] = array; const [a, , b, ...rest] = array; const [a, b, ...{ pop, push }] = array; const [a, b, ...[c, d]] = array; const { a, b } = obj; const { a: a1, b: b1 } = obj; const { a: a1 = aDefault, b = bDefault } = obj; const { a, b, ...rest } = obj; const { a: a1, b: b1, ...rest } = obj; const { [key]: a } = obj; let a, b, a1, b1, c, d, rest, pop, push; [a, b] = array; [a, , b] = array; [a = aDefault, b] = array; [a, b, ...rest] = array; [a, , b, ...rest] = array; [a, b, ...{ pop, push }] = array; [a, b, ...[c, d]] = array; ({ a, b } = obj); // parentheses are required ({ a: a1, b: b1 } = obj); ({ a: a1 = aDefault, b = bDefault } = obj); ({ a, b, ...rest } = obj); ({ a: a1, b: b1, ...rest } = obj); Description The object and array literal expressions provide an easy way to create ad hoc packages of data. js const arr = [a, b, c]; The destructuring uses similar syntax but uses it on the left-hand side of the assignment instead. It performs the reverse operation of an array declaration, by declaring each element in the collection as a separate variable. js const arr = [1, 2, 3]; const [a, b, c] = arr; // a = 1, b = 2, c = 3 As for objects, compare the two pairs of lines below, and see how there's a direct correspondence within each pair. js const obj = { a, b, c }; const { a, b, c } = obj; // Equivalent to: // const a = obj.a, b = obj.b, c = obj.c; const obj = { prop1: x, prop2: y, prop3: z }; const { prop1: x, prop2: y, prop3: z } = obj; // Equivalent to: // const x = obj.prop1, y = obj.prop2, z = obj.prop3; This capability is similar to features present in languages such as Perl and Python. For features specific to array or object destructuring, refer to the individual examples below. Binding and assignment For both object and array destructuring, there are two kinds of destructuring patterns: binding pattern and assignment pattern , with slightly different syntaxes. In binding patterns, the pattern starts with a declaration keyword ( var , let , or const ). Then, each individual property must either be bound to a variable or further destructured. js const obj = { a: 1, b: { c: 2 } }; const { a, b: { c: d }, } = obj; // Two variables are bound: `a` and `d` All variables share the same declaration, so if you want some variables to be re-assignable but others to be read-only, you may have to destructure twice — once with let , once with const . js const obj = { a: 1, b: { c: 2 } }; const { a } = obj; // a is constant let { b: { c: d }, } = obj; // d is re-assignable In many other syntaxes where the language binds a variable for you, you can use a binding destructuring pattern. These include: The looping variable of for...in for...of , and for await...of loops; Function parameters; The catch binding variable. In assignment patterns, the pattern does not start with a keyword. Each destructured property is assigned to a target of assignment — which may either be declared beforehand with var or let , or is a property of another object — in general, anything that can appear on the left-hand side of an assignment expression. js const numbers = []; const obj = { a: 1, b: 2 }; ({ a: numbers[0], b: numbers[1] } = obj); // The properties `a` and `b` are assigned to properties of `numbers` Note: The parentheses ( ... ) around the assignment statement are required when using object literal destructuring without a declaration. { a, b } = { a: 1, b: 2 } is not valid stand-alone syntax, as the { a, b } on the left-hand side is considered a block and not an object literal according to the rules of expression statements . However, ({ a, b } = { a: 1, b: 2 }) is valid, as is const { a, b } = { a: 1, b: 2 } . If your coding style does not include trailing semicolons, the ( ... ) expression needs to be preceded by a semicolon, or it may be used to execute a function on the previous line. Note that the equivalent binding pattern of the code above is not valid syntax: js const numbers = []; const obj = { a: 1, b: 2 }; const { a: numbers[0], b: numbers[1] } = obj; // This is equivalent to: // const numbers[0] = obj.a; // const numbers[1] = obj.b; // Which definitely is not valid. You can only use assignment patterns as the left-hand side of the assignment operator. You cannot use them with compound assignment operators such as += or *= . Default value Each destructured property can have a default value . The default value is used when the property is not present, or has value undefined . It is not used if the property has value null . js const [a = 1] = []; // a is 1 const { b = 2 } = { b: undefined }; // b is 2 const { c = 2 } = { c: null }; // c is null The default value can be any expression. It will only be evaluated when necessary. js const { b = console.log("hey") } = { b: 2 }; // Does not log anything, because `b` is defined and there's no need // to evaluate the default value. Rest properties and rest elements You can end a destructuring pattern with a rest property ...rest . For array destructuring, it collects remaining elements of the iterable into a new array called rest (or any name you give it). For object destructuring, it copies all enumerable own properties of the object that are not already picked off by the destructuring pattern into a new object called rest . More formally, the ...rest syntax is called "rest elements" in array destructuring and "rest properties" in object destructuring, but we often just collectively call them "rest property". js const { a, ...others } = { a: 1, b: 2, c: 3 }; console.log(others); // { b: 2, c: 3 } const [first, ...others2] = [1, 2, 3]; console.log(others2); // [2, 3] The rest property must be the last in the pattern, and must not have a trailing comma. js const [a, ...b,] = [1, 2, 3]; // SyntaxError: rest element may not have a trailing comma // Always consider using rest operator as the last element Examples Array destructuring Basic variable assignment js const foo = ["one", "two", "three"]; const [red, yellow, green] = foo; console.log(red); // "one" console.log(yellow); // "two" console.log(green); // "three" Destructuring with more elements than the source In an array destructuring from an array of length N specified on the right-hand side of the assignment, if the number of variables specified on the left-hand side of the assignment is greater than N , only the first N variables are assigned values. The values of the remaining variables will be undefined. js const foo = ["one", "two"]; const [red, yellow, green, blue] = foo; console.log(red); // "one" console.log(yellow); // "two" console.log(green); // undefined console.log(blue); // undefined Swapping variables Two variables values can be swapped in one destructuring expression. Without destructuring, swapping two values requires a temporary variable (or, in some low-level languages, the XOR-swap trick ). js let a = 1; let b = 3; [a, b] = [b, a]; console.log(a); // 3 console.log(b); // 1 const arr = [1, 2, 3]; [arr[2], arr[1]] = [arr[1], arr[2]]; console.log(arr); // [1, 3, 2] Parsing an array returned from a function It's always been possible to return an array from a function. Destructuring can make working with an array return value more concise. In this example, f() returns the values [1, 2] as its output, which can be parsed in a single line with destructuring. js function f() { return [1, 2]; } const [a, b] = f(); console.log(a); // 1 console.log(b); // 2 Ignoring some returned values You can ignore return values that you're not interested in: js function f() { return [1, 2, 3]; } const [a, , b] = f(); console.log(a); // 1 console.log(b); // 3 const [c] = f(); console.log(c); // 1 You can also ignore all returned values: js [, ,] = f(); Though in this case, it's probably clearer to just call the function and not use destructuring at all. You don't have to use the return value. Using a binding pattern as the rest property The rest property of array destructuring can be another array or object binding pattern. The inner destructuring destructures from the array created after collecting the rest elements, so you cannot access any properties present on the original iterable in this way. js const [a, b, ...{ length }] = [1, 2, 3]; console.log(a, b, length); // 1 2 1 js const [a, b, ...[c, d]] = [1, 2, 3, 4]; console.log(a, b, c, d); // 1 2 3 4 These binding patterns can even be nested, as long as each rest property is the last in the list. js const [a, b, ...[c, d, ...[e, f]]] = [1, 2, 3, 4, 5, 6]; console.log(a, b, c, d, e, f); // 1 2 3 4 5 6 On the other hand, object destructuring can only have an identifier as the rest property. js const { a, ...{ b } } = { a: 1, b: 2 }; // SyntaxError: `...` must be followed by an identifier in declaration contexts let a, b; ({ a, ...{ b } } = { a: 1, b: 2 }); // SyntaxError: `...` must be followed by an assignable reference in assignment contexts Unpacking values from a regular expression match When the regular expression exec() method finds a match, it returns an array containing first the entire matched portion of the string and then the portions of the string that matched each parenthesized group in the regular expression. Destructuring allows you to unpack the parts out of this array easily, ignoring the full match if it is not needed. js function parseProtocol(url) { const parsedURL = /^(\w+):\/\/([^/]+)\/(.*)$/.exec(url); if (!parsedURL) { return false; } console.log(parsedURL); // ["https://developer.mozilla.org/en-US/docs/Web/JavaScript", // "https", "developer.mozilla.org", "en-US/docs/Web/JavaScript"] const [, protocol, fullHost, fullPath] = parsedURL; return protocol; } console.log( parseProtocol("https://developer.mozilla.org/en-US/docs/Web/JavaScript"), ); // "https" Using array destructuring on any iterable Array destructuring calls the iterable protocol of the right-hand side. Therefore, any iterable, not necessarily arrays, can be destructured. js const [a, b] = new Map([ [1, 2], [3, 4], ]); console.log(a, b); // [1, 2] [3, 4] Non-iterables cannot be destructured as arrays. js const obj = { 0: "a", 1: "b", length: 2 }; const [a, b] = obj; // TypeError: obj is not iterable Iterables are only iterated until all bindings are assigned. js const obj = { *[Symbol.iterator]() { for (const v of [0, 1, 2, 3]) { console.log(v); yield v; } }, }; const [a, b] = obj; // Only logs 0 and 1 The rest binding is eagerly evaluated and creates a new array, instead of using the old iterable. js const obj = { *[Symbol.iterator]() { for (const v of [0, 1, 2, 3]) { console.log(v); yield v; } }, }; const [a, b, ...rest] = obj; // Logs 0 1 2 3 console.log(rest); // [2, 3] (an array) Object destructuring Basic assignment js const user = { id: 42, isVerified: true, }; const { id, isVerified } = user; console.log(id); // 42 console.log(isVerified); // true Assigning to new variable names A property can be unpacked from an object and assigned to a variable with a different name than the object property. js const o = { p: 42, q: true }; const { p: foo, q: bar } = o; console.log(foo); // 42 console.log(bar); // true Here, for example, const { p: foo } = o takes from the object o the property named p and assigns it to a local variable named foo . Assigning to new variable names and providing default values A property can be both Unpacked from an object and assigned to a variable with a different name. Assigned a default value in case the unpacked value is undefined . js const { a: aa = 10, b: bb = 5 } = { a: 3 }; console.log(aa); // 3 console.log(bb); // 5 Unpacking properties from objects passed as a function parameter Objects passed into function parameters can also be unpacked into variables, which may then be accessed within the function body. As for object assignment, the destructuring syntax allows for the new variable to have the same name or a different name than the original property, and to assign default values for the case when the original object does not define the property. Consider this object, which contains information about a user. js const user = { id: 42, displayName: "jdoe", fullName: { firstName: "Jane", lastName: "Doe", }, }; Here we show how to unpack a property of the passed object into a variable with the same name. The parameter value { id } indicates that the id property of the object passed to the function should be unpacked into a variable with the same name, which can then be used within the function. js function userId({ id }) { return id; } console.log(userId(user)); // 42 You can define the name of the unpacked variable. Here we unpack the property named displayName , and rename it to dname for use within the function body. js function userDisplayName({ displayName: dname }) { return dname; } console.log(userDisplayName(user)); // "jdoe" Nested objects can also be unpacked. The example below shows the property fullname.firstName being unpacked into a variable called name . js function whois({ displayName, fullName: { firstName: name } }) { return `${displayName} is ${name}`; } console.log(whois(user)); // "jdoe is Jane" Setting a function parameter's default value Default values can be specified using = , and will be used as variable values if a specified property does not exist in the passed object. Below we show a function where the default size is 'big' , default co-ordinates are x: 0, y: 0 and default radius is 25. js function drawChart({ size = "big", coords = { x: 0, y: 0 }, radius = 25, } = {}) { console.log(size, coords, radius); // do some chart drawing } drawChart({ coords: { x: 18, y: 30 }, radius: 30, }); In the function signature for drawChart above, the destructured left-hand side has a default value of an empty object = {} . You could have also written the function without that default. However, if you leave out that default value, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can call drawChart() without supplying any parameters. Otherwise, you need to at least supply an empty object literal. For more information, see Default parameters > Destructured parameter with default value assignment . Nested object and array destructuring js const metadata = { title: "Scratchpad", translations: [ { locale: "de", localizationTags: [], lastEdit: "2014-04-14T08:43:37", url: "/de/docs/Tools/Scratchpad", title: "JavaScript-Umgebung", }, ], url: "/en-US/docs/Tools/Scratchpad", }; const { title: englishTitle, // rename translations: [ { title: localeTitle, // rename }, ], } = metadata; console.log(englishTitle); // "Scratchpad" console.log(localeTitle); // "JavaScript-Umgebung" For of iteration and destructuring js const people = [ { name: "Mike Smith", family: { mother: "Jane Smith", father: "Harry Smith", sister: "Samantha Smith", }, age: 35, }, { name: "Tom Jones", family: { mother: "Norah Jones", father: "Richard Jones", brother: "Howard Jones", }, age: 25, }, ]; for (const { name: n, family: { father: f }, } of people) { console.log(`Name: ${n}, Father: ${f}`); } // "Name: Mike Smith, Father: Harry Smith" // "Name: Tom Jones, Father: Richard Jones" Computed object property names and destructuring Computed property names, like on object literals , can be used with destructuring. js const key = "z"; const { [key]: foo } = { z: "bar" }; console.log(foo); // "bar" Invalid JavaScript identifier as a property name Destructuring can be used with property names that are not valid JavaScript identifiers by providing an alternative identifier that is valid. js const foo = { "fizz-buzz": true }; const { "fizz-buzz": fizzBuzz } = foo; console.log(fizzBuzz); // true Destructuring primitive values Object destructuring is almost equivalent to property accessing . This means if you try to destruct a primitive value, the value will get wrapped into the corresponding wrapper object and the property is accessed on the wrapper object. js const { a, toFixed } = 1; console.log(a, toFixed); // undefined ƒ toFixed() { [native code] } Same as accessing properties, destructuring null or undefined throws a TypeError . js const { a } = undefined; // TypeError: Cannot destructure property 'a' of 'undefined' as it is undefined. const { b } = null; // TypeError: Cannot destructure property 'b' of 'null' as it is null. This happens even when the pattern is empty. js const {} = null; // TypeError: Cannot destructure 'null' as it is null. Combined array and object destructuring Array and object destructuring can be combined. Say you want the third element in the array props below, and then you want the name property in the object, you can do the following: js const props = [ { id: 1, name: "Fizz" }, { id: 2, name: "Buzz" }, { id: 3, name: "FizzBuzz" }, ]; const [, , { name }] = props; console.log(name); // "FizzBuzz" The prototype chain is looked up when the object is deconstructed When deconstructing an object, if a property is not accessed in itself, it will continue to look up along the prototype chain. js const obj = { self: "123", __proto__: { prot: "456", }, }; const { self, prot } = obj; console.log(self); // "123" console.log(prot); // "456" Specifications Specification ECMAScript® 2026 Language Specification # sec-destructuring-assignment ECMAScript® 2026 Language Specification # sec-destructuring-binding-patterns Browser compatibility Loading… See also Assignment operators ES6 in Depth: Destructuring on hacks.mozilla.org (2015) Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 8, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar JavaScript Tutorials and guides JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and strings Representing dates & times Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Resource management Internationalization JavaScript modules Intermediate Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures Advanced Inheritance and the prototype chain Meta programming Memory Management References Built-in objects AggregateError Array ArrayBuffer AsyncDisposableStack AsyncFunction AsyncGenerator AsyncGeneratorFunction AsyncIterator Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() DisposableStack encodeURI() encodeURIComponent() Error escape() Deprecated eval() EvalError FinalizationRegistry Float16Array Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int8Array Int16Array Int32Array InternalError Non-standard Intl isFinite() isNaN() Iterator JSON Map Math NaN Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String SuppressedError Symbol SyntaxError Temporal Experimental TypedArray TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array undefined unescape() Deprecated URIError WeakMap WeakRef WeakSet Expressions & operators Addition (+) Addition assignment (+=) Assignment (=) async function expression async function* expression await Bitwise AND (&) Bitwise AND assignment (&=) Bitwise NOT (~) Bitwise OR (|) Bitwise OR assignment (|=) Bitwise XOR (^) Bitwise XOR assignment (^=) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete Destructuring Division (/) Division assignment (/=) Equality (==) Exponentiation (**) Exponentiation assignment (**=) function expression function* expression Greater than (>) Greater than or equal (>=) Grouping operator ( ) import.meta import.meta.resolve() import() in Increment (++) Inequality (!=) instanceof Left shift (<<) Left shift assignment (<<=) Less than (<) Less than or equal (<=) Logical AND (&&) Logical AND assignment (&&=) Logical NOT (!) Logical OR (||) Logical OR assignment (||=) Multiplication (*) Multiplication assignment (*=) new new.target null Nullish coalescing assignment (??=) Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder (%) Remainder assignment (%=) Right shift (>>) Right shift assignment (>>=) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction (-) Subtraction assignment (-=) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift (>>>) Unsigned right shift assignment (>>>=) void operator yield yield* Statements & declarations async function async function* await using Block statement break class const continue debugger do...while Empty statement export Expression statement for for await...of for...in for...of function function* if...else import Import attributes Labeled statement let return switch throw try...catch using var while with Deprecated Functions Arrow function expressions Default parameters get Method definitions Rest parameters set The arguments object [Symbol.iterator]() callee Deprecated length Classes constructor extends Private elements Public class fields static Static initialization blocks Regular expressions Backreference: \1, \2 Capturing group: (...) Character class escape: \d, \D, \w, \W, \s, \S Character class: [...], [^...] Character escape: \n, \u{...} Disjunction: | Input boundary assertion: ^, $ Literal character: a, b Lookahead assertion: (?=...), (?!...) Lookbehind assertion: (?<=...), (?<!...) Modifier: (?ims-ims:...) Named backreference: \k<name> Named capturing group: (?<name>...) Non-capturing group: (?:...) Quantifier: *, +, ?, {n}, {n,}, {n,m} Unicode character class escape: \p{...}, \P{...} Wildcard: . Word boundary assertion: \b, \B Errors AggregateError: No Promise in Promise.any was resolved Error: Permission denied to access property "x" InternalError: too much recursion RangeError: argument is not a valid code point RangeError: BigInt division by zero RangeError: BigInt negative exponent RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' RangeError: invalid array length RangeError: invalid date RangeError: precision is out of range RangeError: radix must be an integer RangeError: repeat count must be less than infinity RangeError: repeat count must be non-negative RangeError: x can't be converted to BigInt because it isn't an integer ReferenceError: "x" is not defined ReferenceError: assignment to undeclared variable "x" ReferenceError: can't access lexical declaration 'X' before initialization ReferenceError: must call super constructor before using 'this' in derived class constructor ReferenceError: super() called twice in derived class constructor SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code SyntaxError: "0"-prefixed octal literals are deprecated SyntaxError: "use strict" not allowed in function with non-simple parameters SyntaxError: "x" is a reserved identifier SyntaxError: \ at end of pattern SyntaxError: a declaration in the head of a for-of loop can't have an initializer SyntaxError: applying the 'delete' operator to an unqualified name is deprecated SyntaxError: arguments is not valid in fields SyntaxError: await is only valid in async functions, async generators and modules SyntaxError: await/yield expression can't be used in parameter SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions SyntaxError: character class escape cannot be used in class range in regular expression SyntaxError: continue must be inside loop SyntaxError: duplicate capture group name in regular expression SyntaxError: duplicate formal argument x SyntaxError: for-in loop head declarations may not have initializers SyntaxError: function statement requires a name SyntaxError: functions cannot be labelled SyntaxError: getter and setter for private name #x should either be both static or non-static SyntaxError: getter functions must have no arguments SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character SyntaxError: import declarations may only appear at top level of a module SyntaxError: incomplete quantifier in regular expression SyntaxError: invalid assignment left-hand side SyntaxError: invalid BigInt syntax SyntaxError: invalid capture group name in regular expression SyntaxError: invalid character in class in regular expression SyntaxError: invalid class set operation in regular expression SyntaxError: invalid decimal escape in regular expression SyntaxError: invalid identity escape in regular expression SyntaxError: invalid named capture reference in regular expression SyntaxError: invalid property name in regular expression SyntaxError: invalid range in character class SyntaxError: invalid regexp group SyntaxError: invalid regular expression flag "x" SyntaxError: invalid unicode escape in regular expression SyntaxError: JSON.parse: bad parsing SyntaxError: label not found SyntaxError: missing : after property id SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ] after element list SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing = in const declaration SyntaxError: missing formal parameter SyntaxError: missing name after . operator SyntaxError: missing variable name SyntaxError: negated character class with strings in regular expression SyntaxError: new keyword cannot be used with an optional chain SyntaxError: nothing to repeat SyntaxError: numbers out of order in {} quantifier. SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code SyntaxError: parameter after rest parameter SyntaxError: private fields can't be deleted SyntaxError: property name __proto__ appears more than once in object literal SyntaxError: raw bracket is not allowed in regular expression with unicode flag SyntaxError: redeclaration of formal parameter "x" SyntaxError: reference to undeclared private field or method #x SyntaxError: rest parameter may not have a default SyntaxError: return not in function SyntaxError: setter functions must have one argument SyntaxError: string literal contains an unescaped line break SyntaxError: super() is only valid in derived class constructors SyntaxError: tagged template cannot be used with optional chain SyntaxError: Unexpected '#' used outside of class body SyntaxError: Unexpected token SyntaxError: unlabeled break must be inside loop or switch SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' SyntaxError: use of super property/member accesses only valid within methods or eval code within methods SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed TypeError: 'x' is not iterable TypeError: "x" is (not) "y" TypeError: "x" is not a constructor TypeError: "x" is not a function TypeError: "x" is not a non-null object TypeError: "x" is read-only TypeError: already executing generator TypeError: BigInt value can't be serialized in JSON TypeError: calling a builtin X constructor without new is forbidden TypeError: can't access/set private field or method: object is not the right class TypeError: can't assign to property "x" on "y": not an object TypeError: can't convert BigInt to number TypeError: can't convert x to BigInt TypeError: can't define property "x": "obj" is not extensible TypeError: can't delete non-configurable array element TypeError: can't redefine non-configurable property "x" TypeError: can't set prototype of this object TypeError: can't set prototype: it would cause a prototype chain cycle TypeError: cannot use 'in' operator to search for 'x' in 'y' TypeError: class constructors must be invoked with 'new' TypeError: cyclic object value TypeError: derived class constructor returned invalid value x TypeError: getting private setter-only property TypeError: Initializing an object twice is an error with private fields/methods TypeError: invalid 'instanceof' operand 'x' TypeError: invalid Array.prototype.sort argument TypeError: invalid assignment to const "x" TypeError: Iterator/AsyncIterator constructor can't be used directly TypeError: matchAll/replaceAll must be called with a global RegExp TypeError: More arguments needed TypeError: null/undefined has no properties TypeError: property "x" is non-configurable and can't be deleted TypeError: Reduce of empty array with no initial value TypeError: setting getter-only property "x" TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol TypeError: X.prototype.y called on incompatible type URIError: malformed URI sequence Warning: -file- is being assigned a //# sourceMappingURL, but already has one Warning: unreachable code after return statement Misc JavaScript technologies overview Execution model Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .