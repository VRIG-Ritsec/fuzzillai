Regular expressions - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Regular expressions Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 中文 (简体) Regular expressions A regular expression ( regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl . You are encouraged to read the regular expressions guide to get an overview of the available regex syntaxes and how they work. In this article Description Specifications Browser compatibility See also Description Regular expressions are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a language ). A regular expression, at its core, needs the following features: A set of characters that can be used in the language, called the alphabet . Concatenation : ab means "the character a followed by the character b ". Union : a|b means "either a or b ". Kleene star : a* means "zero or more a characters". Assuming a finite alphabet (such as the 26 letters of the English alphabet, or the entire Unicode character set), all regular languages can be generated by the features above. Of course, many patterns are very tedious to express this way (such as "10 digits" or "a character that's not a space"), so JavaScript regular expressions include many shorthands, introduced below. Note: JavaScript regular expressions are in fact not regular, due to the existence of backreferences (regular expressions must have finite states). However, they are still a very useful feature. Creating regular expressions A regular expression is typically created as a literal by enclosing a pattern in forward slashes ( / ): js const regex1 = /ab+c/g; Regular expressions can also be created with the RegExp() constructor: js const regex2 = new RegExp("ab+c", "g"); They have no runtime differences, although they may have implications on performance, static analyzability, and authoring ergonomic issues with escaping characters. For more information, see the RegExp reference. Regex flags Flags are special parameters that can change the way a regular expression is interpreted or the way it interacts with the input text. Each flag corresponds to one accessor property on the RegExp object. Flag Description Corresponding property d Generate indices for substring matches. hasIndices g Global search. global i Case-insensitive search. ignoreCase m Makes ^ and $ match the start and end of each line instead of those of the entire string. multiline s Allows . to match newline characters. dotAll u "Unicode"; treat a pattern as a sequence of Unicode code points. unicode v An upgrade to the u mode with more Unicode features. unicodeSets y Perform a "sticky" search that matches starting at the current position in the target string. sticky The i , m , and s flags can be enabled or disabled for specific parts of a regex using the modifier syntax. The sections below list all available regex syntaxes, grouped by their syntactic nature. Assertions Assertions are constructs that test whether the string meets a certain condition at the specified position, but not consume characters. Assertions cannot be quantified . Input boundary assertion: ^ , $ Asserts that the current position is the start or end of input, or start or end of a line if the m flag is set. Lookahead assertion: (?=...) , (?!...) Asserts that the current position is followed or not followed by a certain pattern. Lookbehind assertion: (?<=...) , (?<!...) Asserts that the current position is preceded or not preceded by a certain pattern. Word boundary assertion: \b , \B Asserts that the current position is a word boundary. Atoms Atoms are the most basic units of a regular expression. Each atom consumes one or more characters in the string, and either fails the match or allows the pattern to continue matching with the next atom. Backreference: \1 , \2 Matches a previously matched subpattern captured with a capturing group. Capturing group: (...) Matches a subpattern and remembers information about the match. Character class: [...] , [^...] Matches any character in or not in a set of characters. When the v flag is enabled, it can also be used to match finite-length strings. Character class escape: \d , \D , \w , \W , \s , \S Matches any character in or not in a predefined set of characters. Character escape: \n , \u{...} Matches a character that may not be able to be conveniently represented in its literal form. Literal character: a , b Matches a specific character. Modifier: (?ims-ims:...) Overrides flag settings in a specific part of a regular expression. Named backreference: \k<name> Matches a previously matched subpattern captured with a named capturing group. Named capturing group: (?<name>...) Matches a subpattern and remembers information about the match. The group can later be identified by a custom name instead of by its index in the pattern. Non-capturing group: (?:...) Matches a subpattern without remembering information about the match. Unicode character class escape: \p{...} , \P{...} Matches a set of characters specified by a Unicode property. When the v flag is enabled, it can also be used to match finite-length strings. Wildcard: . Matches any character except line terminators, unless the s flag is set. Other features These features do not specify any pattern themselves, but are used to compose patterns. Disjunction: | Matches any of a set of alternatives separated by the | character. Quantifier: * , + , ? , {n} , {n,} , {n,m} Matches an atom a certain number of times. Escape sequences Escape sequences in regexes refer to any kind of syntax formed by \ followed by one or more characters. They may serve very different purposes depending on what follow \ . Below is a list of all valid "escape sequences": Escape sequence Followed by Meaning \B None Non-word-boundary assertion \D None Character class escape representing non-digit characters \P { , a Unicode property and/or value, then } Unicode character class escape representing characters without the specified Unicode property \S None Character class escape representing non-white-space characters \W None Character class escape representing non-word characters \b None Word boundary assertion ; inside character classes , represents U+0008 (BACKSPACE) \c A letter from A to Z or a to z A character escape representing the control character with value equal to the letter's character value modulo 32 \d None Character class escape representing digit characters ( 0 to 9 ) \f None Character escape representing U+000C (FORM FEED) \k < , an identifier, then > A named backreference \n None Character escape representing U+000A (LINE FEED) \p { , a Unicode property and/or value, then } Unicode character class escape representing characters with the specified Unicode property \q { , a string, then a } Only valid inside v -mode character classes ; represents the string to be matched literally \r None Character escape representing U+000D (CARRIAGE RETURN) \s None Character class escape representing whitespace characters \t None Character escape representing U+0009 (CHARACTER TABULATION) \u 4 hexadecimal digits; or { , 1 to 6 hexadecimal digits, then } Character escape representing the character with the given code point \v None Character escape representing U+000B (LINE TABULATION) \w None Character class escape representing word characters ( A to Z , a to z , 0 to 9 , _ ) \x 2 hexadecimal digits Character escape representing the character with the given value \0 None Character escape representing U+0000 (NULL) \ followed by 0 and another digit becomes a legacy octal escape sequence , which is forbidden in Unicode-aware mode . \ followed by any other digit sequence becomes a backreference . In addition, \ can be followed by some non-letter-or-digit characters, in which case the escape sequence is always a character escape representing the escaped character itself: \$ , \( , \) , \* , \+ , \. , \/ , \? , \[ , \\ , \] , \^ , \{ , \| , \} : valid everywhere \- : only valid inside character classes \! , \# , \% , \& , \, , \: , \; , \< , \= , \> , \@ , \` , \~ : only valid inside v -mode character classes The other ASCII characters, namely space character, " , ' , _ , and any letter character not mentioned above, are not valid escape sequences. In Unicode-unaware mode , escape sequences that are not one of the above become identity escapes : they represent the character that follows the backslash. For example, \a represents the character a . This behavior limits the ability to introduce new escape sequences without causing backward compatibility issues, and is therefore forbidden in Unicode-aware mode. Specifications Specification ECMAScript® 2026 Language Specification # prod-Disjunction ECMAScript® 2026 Language Specification # prod-Atom ECMAScript® 2026 Language Specification # prod-Assertion ECMAScript® 2026 Language Specification # prod-CharacterEscape ECMAScript® 2026 Language Specification # prod-CharacterClassEscape ECMAScript® 2026 Language Specification # prod-RegularExpressionModifiers ECMAScript® 2026 Language Specification # prod-CharacterClass ECMAScript® 2026 Language Specification # prod-Quantifier ECMAScript® 2026 Language Specification # prod-PatternCharacter ECMAScript® 2026 Language Specification # prod-DecimalEscape ECMAScript® 2026 Language Specification # prod-AtomEscape Browser compatibility Loading… See also Regular expressions guide RegExp Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 8, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar JavaScript Tutorials and guides JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and strings Representing dates & times Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Resource management Internationalization JavaScript modules Intermediate Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures Advanced Inheritance and the prototype chain Meta programming Memory Management References Built-in objects AggregateError Array ArrayBuffer AsyncDisposableStack AsyncFunction AsyncGenerator AsyncGeneratorFunction AsyncIterator Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() DisposableStack encodeURI() encodeURIComponent() Error escape() Deprecated eval() EvalError FinalizationRegistry Float16Array Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int8Array Int16Array Int32Array InternalError Non-standard Intl isFinite() isNaN() Iterator JSON Map Math NaN Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String SuppressedError Symbol SyntaxError Temporal Experimental TypedArray TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array undefined unescape() Deprecated URIError WeakMap WeakRef WeakSet Expressions & operators Addition (+) Addition assignment (+=) Assignment (=) async function expression async function* expression await Bitwise AND (&) Bitwise AND assignment (&=) Bitwise NOT (~) Bitwise OR (|) Bitwise OR assignment (|=) Bitwise XOR (^) Bitwise XOR assignment (^=) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete Destructuring Division (/) Division assignment (/=) Equality (==) Exponentiation (**) Exponentiation assignment (**=) function expression function* expression Greater than (>) Greater than or equal (>=) Grouping operator ( ) import.meta import.meta.resolve() import() in Increment (++) Inequality (!=) instanceof Left shift (<<) Left shift assignment (<<=) Less than (<) Less than or equal (<=) Logical AND (&&) Logical AND assignment (&&=) Logical NOT (!) Logical OR (||) Logical OR assignment (||=) Multiplication (*) Multiplication assignment (*=) new new.target null Nullish coalescing assignment (??=) Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder (%) Remainder assignment (%=) Right shift (>>) Right shift assignment (>>=) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction (-) Subtraction assignment (-=) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift (>>>) Unsigned right shift assignment (>>>=) void operator yield yield* Statements & declarations async function async function* await using Block statement break class const continue debugger do...while Empty statement export Expression statement for for await...of for...in for...of function function* if...else import Import attributes Labeled statement let return switch throw try...catch using var while with Deprecated Functions Arrow function expressions Default parameters get Method definitions Rest parameters set The arguments object [Symbol.iterator]() callee Deprecated length Classes constructor extends Private elements Public class fields static Static initialization blocks Regular expressions Backreference: \1, \2 Capturing group: (...) Character class escape: \d, \D, \w, \W, \s, \S Character class: [...], [^...] Character escape: \n, \u{...} Disjunction: | Input boundary assertion: ^, $ Literal character: a, b Lookahead assertion: (?=...), (?!...) Lookbehind assertion: (?<=...), (?<!...) Modifier: (?ims-ims:...) Named backreference: \k<name> Named capturing group: (?<name>...) Non-capturing group: (?:...) Quantifier: *, +, ?, {n}, {n,}, {n,m} Unicode character class escape: \p{...}, \P{...} Wildcard: . Word boundary assertion: \b, \B Errors AggregateError: No Promise in Promise.any was resolved Error: Permission denied to access property "x" InternalError: too much recursion RangeError: argument is not a valid code point RangeError: BigInt division by zero RangeError: BigInt negative exponent RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' RangeError: invalid array length RangeError: invalid date RangeError: precision is out of range RangeError: radix must be an integer RangeError: repeat count must be less than infinity RangeError: repeat count must be non-negative RangeError: x can't be converted to BigInt because it isn't an integer ReferenceError: "x" is not defined ReferenceError: assignment to undeclared variable "x" ReferenceError: can't access lexical declaration 'X' before initialization ReferenceError: must call super constructor before using 'this' in derived class constructor ReferenceError: super() called twice in derived class constructor SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code SyntaxError: "0"-prefixed octal literals are deprecated SyntaxError: "use strict" not allowed in function with non-simple parameters SyntaxError: "x" is a reserved identifier SyntaxError: \ at end of pattern SyntaxError: a declaration in the head of a for-of loop can't have an initializer SyntaxError: applying the 'delete' operator to an unqualified name is deprecated SyntaxError: arguments is not valid in fields SyntaxError: await is only valid in async functions, async generators and modules SyntaxError: await/yield expression can't be used in parameter SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions SyntaxError: character class escape cannot be used in class range in regular expression SyntaxError: continue must be inside loop SyntaxError: duplicate capture group name in regular expression SyntaxError: duplicate formal argument x SyntaxError: for-in loop head declarations may not have initializers SyntaxError: function statement requires a name SyntaxError: functions cannot be labelled SyntaxError: getter and setter for private name #x should either be both static or non-static SyntaxError: getter functions must have no arguments SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character SyntaxError: import declarations may only appear at top level of a module SyntaxError: incomplete quantifier in regular expression SyntaxError: invalid assignment left-hand side SyntaxError: invalid BigInt syntax SyntaxError: invalid capture group name in regular expression SyntaxError: invalid character in class in regular expression SyntaxError: invalid class set operation in regular expression SyntaxError: invalid decimal escape in regular expression SyntaxError: invalid identity escape in regular expression SyntaxError: invalid named capture reference in regular expression SyntaxError: invalid property name in regular expression SyntaxError: invalid range in character class SyntaxError: invalid regexp group SyntaxError: invalid regular expression flag "x" SyntaxError: invalid unicode escape in regular expression SyntaxError: JSON.parse: bad parsing SyntaxError: label not found SyntaxError: missing : after property id SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ] after element list SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing = in const declaration SyntaxError: missing formal parameter SyntaxError: missing name after . operator SyntaxError: missing variable name SyntaxError: negated character class with strings in regular expression SyntaxError: new keyword cannot be used with an optional chain SyntaxError: nothing to repeat SyntaxError: numbers out of order in {} quantifier. SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code SyntaxError: parameter after rest parameter SyntaxError: private fields can't be deleted SyntaxError: property name __proto__ appears more than once in object literal SyntaxError: raw bracket is not allowed in regular expression with unicode flag SyntaxError: redeclaration of formal parameter "x" SyntaxError: reference to undeclared private field or method #x SyntaxError: rest parameter may not have a default SyntaxError: return not in function SyntaxError: setter functions must have one argument SyntaxError: string literal contains an unescaped line break SyntaxError: super() is only valid in derived class constructors SyntaxError: tagged template cannot be used with optional chain SyntaxError: Unexpected '#' used outside of class body SyntaxError: Unexpected token SyntaxError: unlabeled break must be inside loop or switch SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' SyntaxError: use of super property/member accesses only valid within methods or eval code within methods SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed TypeError: 'x' is not iterable TypeError: "x" is (not) "y" TypeError: "x" is not a constructor TypeError: "x" is not a function TypeError: "x" is not a non-null object TypeError: "x" is read-only TypeError: already executing generator TypeError: BigInt value can't be serialized in JSON TypeError: calling a builtin X constructor without new is forbidden TypeError: can't access/set private field or method: object is not the right class TypeError: can't assign to property "x" on "y": not an object TypeError: can't convert BigInt to number TypeError: can't convert x to BigInt TypeError: can't define property "x": "obj" is not extensible TypeError: can't delete non-configurable array element TypeError: can't redefine non-configurable property "x" TypeError: can't set prototype of this object TypeError: can't set prototype: it would cause a prototype chain cycle TypeError: cannot use 'in' operator to search for 'x' in 'y' TypeError: class constructors must be invoked with 'new' TypeError: cyclic object value TypeError: derived class constructor returned invalid value x TypeError: getting private setter-only property TypeError: Initializing an object twice is an error with private fields/methods TypeError: invalid 'instanceof' operand 'x' TypeError: invalid Array.prototype.sort argument TypeError: invalid assignment to const "x" TypeError: Iterator/AsyncIterator constructor can't be used directly TypeError: matchAll/replaceAll must be called with a global RegExp TypeError: More arguments needed TypeError: null/undefined has no properties TypeError: property "x" is non-configurable and can't be deleted TypeError: Reduce of empty array with no initial value TypeError: setting getter-only property "x" TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol TypeError: X.prototype.y called on incompatible type URIError: malformed URI sequence Warning: -file- is being assigned a //# sourceMappingURL, but already has one Warning: unreachable code after return statement Misc JavaScript technologies overview Execution model Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .