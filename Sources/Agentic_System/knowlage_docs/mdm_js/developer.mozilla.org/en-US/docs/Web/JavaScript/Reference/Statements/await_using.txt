await using - JavaScript | MDN Skip to main content Skip to search MDN HTML HTML: Markup language HTML reference Elements Global attributes Attributes See all… HTML guides Responsive images HTML cheatsheet Date & time formats See all… Markup languages SVG MathML XML CSS CSS: Styling language CSS reference Properties Selectors At-rules Values & units See all… CSS guides Box model Animations Flexbox Colors See all… Layout cookbook Column layouts Centering an element Card component See all… JavaScript JS JavaScript: Scripting language JS reference Standard built-in objects Expressions & operators Statements & declarations Functions See all… JS guides Control flow & error handing Loops and iteration Working with objects Using classes See all… Web APIs Web APIs: Programming interfaces Web API reference File system API Fetch API Geolocation API HTML DOM API Push API Service worker API See all… Web API guides Using the Web animation API Using the Fetch API Working with the History API Using the Web speech API Using web workers All All web technology Technologies Accessibility HTTP URI Web extensions WebAssembly WebDriver See all… Topics Media Performance Privacy Security Progressive web apps Learn Learn web development Frontend developer course Getting started Common questions Curriculum Learn HTML Introduction to HTML Getting started with HTML Learn CSS What is CSS Getting started with CSS Learn JavaScript How to use data attributes Add JavaScript to your web page Tools Discover our tools Playground HTTP Observatory Border-image generator Border-radius generator Box-shadow generator Color format converter Color mixer Shape generator About Get to know MDN better About MDN Advertise with us Community MDN on GitHub Blog Toggle sidebar Web JavaScript Reference Statements and declarations await using Theme OS default Light Dark English (US) Remember language Learn more Deutsch English (US) 日本語 await using Limited availability This feature is not Baseline because it does not work in some of the most widely-used browsers. Learn more See full compatibility Report feedback The await using declaration declares block-scoped local variables that are asynchronously disposed . Like const , variables declared with await using must be initialized and cannot be reassigned. The variable's value must be either null , undefined , or an object with an [Symbol.asyncDispose]() or [Symbol.dispose]() method. When the variable goes out of scope, the [Symbol.asyncDispose]() or [Symbol.dispose]() method of the object is called and awaited, to ensure that resources are freed. In this article Syntax Description Examples Specifications Browser compatibility See also Syntax js await using name1 = value1; await using name1 = value1, name2 = value2; await using name1 = value1, name2 = value2, /* …, */ nameN = valueN; nameN The name of the variable to declare. Each must be a legal JavaScript identifier and not a destructuring binding pattern . valueN Initial value of the variable. It can be any legal expression but its value must be either null , undefined , or an object with an [Symbol.asyncDispose]() or [Symbol.dispose]() method. Description This declaration can only be used in places where both await and using can be used, which include: Inside a block (if the block is also in an async context) Inside an async function or async generator function body At the top level of a module In the initializer of a for , for...of (if the for loop is also in an async context), or for await...of loop An await using declares an async disposable resource that's tied to the lifetime of the variable's scope (block, function, module, etc.). When the scope exits, the resource is disposed of asynchronously. Its syntax may be somewhat confusing, because the await does not have an awaiting effect when the variable is first declared, but only when the variable goes out of scope. When a variable is first declared and its value is non-nullish, a disposer is retrieved from the object. The [Symbol.asyncDispose] property is tried first, and falls back to [Symbol.dispose] if [Symbol.asyncDispose] is undefined . If neither property contains a function, a TypeError is thrown. Notably, the [Symbol.dispose]() method is wrapped into a function that looks like async () => { object[Symbol.dispose](); } , which means if it returns a promise, that promise is not awaited. This disposer is saved to the scope. When the variable goes out of scope, the disposer is called and awaited. If the scope contains multiple using or await using declarations, all disposers are run in sequence in the reverse order of declaration, regardless of the type of declaration. All disposers are guaranteed to run (much like the finally block in try...catch...finally ). All errors thrown during disposal, including the initial error that caused the scope exit (if applicable), are all aggregated inside one SuppressedError , with each earlier exception as the suppressed property and the later exception as the error property. This SuppressedError is thrown after disposal is complete. The variable is allowed to have value null or undefined , so the resource can be optionally present. As long as one await using variable is declared in this scope, at least one await is guaranteed to happen on scope exit, even if the variable actually has value null or undefined . This prevents the disposal from happening synchronously, causing timing issues (see control flow effects of await ). await using ties resource management to lexical scopes, which is both convenient and sometimes confusing. See below for some examples where it may not behave how you expect. If you want to hand-manage resource disposal, while maintaining the same error handling guarantees, you can use AsyncDisposableStack instead. Examples You should also check using for more examples, especially some general caveats with respect to scope-based resource management. Basic usage Usually, you use await using on some library-provided resource that already implements the async disposable protocol. For example, the Node.js FileHandle is async disposable: js import fs from "node:fs/promises"; async function example() { await using file = await fs.open("example.txt", "r"); console.log(await file.read()); // Before `file` goes out of scope, it is disposed by calling `file[Symbol.asyncDispose]()` and awaited. } Note that there are two await operations in the declaration for file , which do different things and are both necessary. await fs.open() causes an await during acquisition : it waits for the file to be opened and unwraps the returned promise into a FileHandle object. await using file causes an await during disposal : it makes file disposed asynchronously when the variable goes out of scope. await using with for await...of It's very easy to confuse the following three syntaxes: for await (using x of y) { ... } for (await using x of y) { ... } for (using x of await y) { ... } It may be even more confusing to know that they can be used together. js for await (await using x of await y) { // ... } First, await y does what you expect: we await the promise y , which is expected to resolve to an object we iterate over. Let us set this variant aside. The for await...of loop requires the y object to be an async iterable . This means that the object must have a [Symbol.asyncIterator] method that returns an async iterator , whose next() method returns a promise representing the result. This is for when the iterable doesn't know what the next value is, or even if it's done yet, until some async operation is complete. On the other hand, the await using x syntax requires the x object, as yielded from the iterable, to be an async disposable . This means that the object must have a [Symbol.asyncDispose] method that returns a promise representing the disposal operation. This is a separate concern from the iteration itself, and is only called when the variable x goes out of scope. In other words, all of the following four combinations are valid and do different things: for (using x of y) : y is synchronously iterated, yielding one result at a time, which can be disposed synchronously. for await (using x of y) : y is asynchronously iterated, yielding one result at a time after awaiting, but the result value can be disposed synchronously. for (await using x of y) : y is synchronously iterated, yielding one result at a time, but the result value can only be disposed asynchronously. for await (await using x of y) : y is asynchronously iterated, yielding one result at a time after awaiting, and the result value can only be disposed asynchronously. Below, we create some fictitious values of y to demonstrate their use cases. For asynchronous APIs, we base our code on the Node.js fs/promises module. js const syncIterableOfSyncDisposables = [ stream1.getReader(), stream2.getReader(), ]; for (using reader of syncIterableOfSyncDisposables) { console.log(reader.read()); } js async function* requestMany(urls) { for (const url of urls) { const res = await fetch(url); yield res.body.getReader(); } } const asyncIterableOfSyncDisposables = requestMany([ "https://example.com", "https://example.org", ]); for await (using reader of asyncIterableOfSyncDisposables) { console.log(reader.read()); } js const syncIterableOfAsyncDisposables = fs .globSync("*.txt") .map((path) => fs.open(path, "r")); for (await using file of syncIterableOfAsyncDisposables) { console.log(await file.read()); } js async function* globHandles(pattern) { for await (const path of fs.glob(pattern)) { yield await fs.open(path, "r"); } } const asyncIterableOfAsyncDisposables = globHandles("*.txt"); for await (await using file of asyncIterableOfAsyncDisposables) { console.log(await file.read()); } Implicit await on scope exit As soon as one await using is declared in a scope, the scope will always have an await on exit, even if the variable is null or undefined . This ensures stable execution order and error handling. The Control flow effects of await examples have more details on this. In the example below, the example() call below doesn't resolve until one tick after, because of an implicit await when the function returns. js async function example() { await using nothing = null; console.log("Example call"); } example().then(() => console.log("Example done")); Promise.resolve().then(() => console.log("Microtask done")); // Output: // Example call // Microtask done // Example done Consider the same code but with a synchronous using instead. This time, the example() call immediately resolves, so the two then() handlers are called in the same tick. js async function example() { using nothing = null; console.log("Example call"); } example().then(() => console.log("Example done")); Promise.resolve().then(() => console.log("Microtask done")); // Output: // Example call // Example done // Microtask done For a more realistic example, consider two concurrent calls to a function: js class Resource { #name; constructor(name) { this.#name = name; } async [Symbol.asyncDispose]() { console.log(`Disposing resource ${this.#name}`); } } async function example(id, createOptionalResource) { await using required = new Resource(`required ${id}`); await using optional = createOptionalResource ? new Resource("optional") : null; await using another = new Resource(`another ${id}`); } example(1, true); example(2, false); // Output: // Disposing resource another 1 // Disposing resource another 2 // Disposing resource optional // Disposing resource required 1 // Disposing resource required 2 As you can see, the required 2 resource is disposed in the same tick as required 1 . If the optional resource did not cause a redundant await , then required 2 would have been disposed earlier, which would be simultaneous with optional . Specifications Specification ECMAScript Async Explicit Resource Management # prod-AwaitUsingDeclaration Browser compatibility Loading… See also JavaScript resource management const let using Symbol.asyncDispose AsyncDisposableStack Help improve MDN Was this page helpful to you? Yes No Learn how to contribute This page was last modified on ⁨Jul 29, 2025⁩ by MDN contributors . View this page on GitHub • Report a problem with this content Filter sidebar JavaScript Tutorials and guides JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and strings Representing dates & times Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Resource management Internationalization JavaScript modules Intermediate Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures Advanced Inheritance and the prototype chain Meta programming Memory Management References Built-in objects AggregateError Array ArrayBuffer AsyncDisposableStack AsyncFunction AsyncGenerator AsyncGeneratorFunction AsyncIterator Atomics BigInt BigInt64Array BigUint64Array Boolean DataView Date decodeURI() decodeURIComponent() DisposableStack encodeURI() encodeURIComponent() Error escape() Deprecated eval() EvalError FinalizationRegistry Float16Array Float32Array Float64Array Function Generator GeneratorFunction globalThis Infinity Int8Array Int16Array Int32Array InternalError Non-standard Intl isFinite() isNaN() Iterator JSON Map Math NaN Number Object parseFloat() parseInt() Promise Proxy RangeError ReferenceError Reflect RegExp Set SharedArrayBuffer String SuppressedError Symbol SyntaxError Temporal Experimental TypedArray TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array undefined unescape() Deprecated URIError WeakMap WeakRef WeakSet Expressions & operators Addition (+) Addition assignment (+=) Assignment (=) async function expression async function* expression await Bitwise AND (&) Bitwise AND assignment (&=) Bitwise NOT (~) Bitwise OR (|) Bitwise OR assignment (|=) Bitwise XOR (^) Bitwise XOR assignment (^=) class expression Comma operator (,) Conditional (ternary) operator Decrement (--) delete Destructuring Division (/) Division assignment (/=) Equality (==) Exponentiation (**) Exponentiation assignment (**=) function expression function* expression Greater than (>) Greater than or equal (>=) Grouping operator ( ) import.meta import.meta.resolve() import() in Increment (++) Inequality (!=) instanceof Left shift (<<) Left shift assignment (<<=) Less than (<) Less than or equal (<=) Logical AND (&&) Logical AND assignment (&&=) Logical NOT (!) Logical OR (||) Logical OR assignment (||=) Multiplication (*) Multiplication assignment (*=) new new.target null Nullish coalescing assignment (??=) Nullish coalescing operator (??) Object initializer Operator precedence Optional chaining (?.) Property accessors Remainder (%) Remainder assignment (%=) Right shift (>>) Right shift assignment (>>=) Spread syntax (...) Strict equality (===) Strict inequality (!==) Subtraction (-) Subtraction assignment (-=) super this typeof Unary negation (-) Unary plus (+) Unsigned right shift (>>>) Unsigned right shift assignment (>>>=) void operator yield yield* Statements & declarations async function async function* await using Block statement break class const continue debugger do...while Empty statement export Expression statement for for await...of for...in for...of function function* if...else import Import attributes Labeled statement let return switch throw try...catch using var while with Deprecated Functions Arrow function expressions Default parameters get Method definitions Rest parameters set The arguments object [Symbol.iterator]() callee Deprecated length Classes constructor extends Private elements Public class fields static Static initialization blocks Regular expressions Backreference: \1, \2 Capturing group: (...) Character class escape: \d, \D, \w, \W, \s, \S Character class: [...], [^...] Character escape: \n, \u{...} Disjunction: | Input boundary assertion: ^, $ Literal character: a, b Lookahead assertion: (?=...), (?!...) Lookbehind assertion: (?<=...), (?<!...) Modifier: (?ims-ims:...) Named backreference: \k<name> Named capturing group: (?<name>...) Non-capturing group: (?:...) Quantifier: *, +, ?, {n}, {n,}, {n,m} Unicode character class escape: \p{...}, \P{...} Wildcard: . Word boundary assertion: \b, \B Errors AggregateError: No Promise in Promise.any was resolved Error: Permission denied to access property "x" InternalError: too much recursion RangeError: argument is not a valid code point RangeError: BigInt division by zero RangeError: BigInt negative exponent RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD' RangeError: invalid array length RangeError: invalid date RangeError: precision is out of range RangeError: radix must be an integer RangeError: repeat count must be less than infinity RangeError: repeat count must be non-negative RangeError: x can't be converted to BigInt because it isn't an integer ReferenceError: "x" is not defined ReferenceError: assignment to undeclared variable "x" ReferenceError: can't access lexical declaration 'X' before initialization ReferenceError: must call super constructor before using 'this' in derived class constructor ReferenceError: super() called twice in derived class constructor SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code SyntaxError: "0"-prefixed octal literals are deprecated SyntaxError: "use strict" not allowed in function with non-simple parameters SyntaxError: "x" is a reserved identifier SyntaxError: \ at end of pattern SyntaxError: a declaration in the head of a for-of loop can't have an initializer SyntaxError: applying the 'delete' operator to an unqualified name is deprecated SyntaxError: arguments is not valid in fields SyntaxError: await is only valid in async functions, async generators and modules SyntaxError: await/yield expression can't be used in parameter SyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressions SyntaxError: character class escape cannot be used in class range in regular expression SyntaxError: continue must be inside loop SyntaxError: duplicate capture group name in regular expression SyntaxError: duplicate formal argument x SyntaxError: for-in loop head declarations may not have initializers SyntaxError: function statement requires a name SyntaxError: functions cannot be labelled SyntaxError: getter and setter for private name #x should either be both static or non-static SyntaxError: getter functions must have no arguments SyntaxError: identifier starts immediately after numeric literal SyntaxError: illegal character SyntaxError: import declarations may only appear at top level of a module SyntaxError: incomplete quantifier in regular expression SyntaxError: invalid assignment left-hand side SyntaxError: invalid BigInt syntax SyntaxError: invalid capture group name in regular expression SyntaxError: invalid character in class in regular expression SyntaxError: invalid class set operation in regular expression SyntaxError: invalid decimal escape in regular expression SyntaxError: invalid identity escape in regular expression SyntaxError: invalid named capture reference in regular expression SyntaxError: invalid property name in regular expression SyntaxError: invalid range in character class SyntaxError: invalid regexp group SyntaxError: invalid regular expression flag "x" SyntaxError: invalid unicode escape in regular expression SyntaxError: JSON.parse: bad parsing SyntaxError: label not found SyntaxError: missing : after property id SyntaxError: missing ) after argument list SyntaxError: missing ) after condition SyntaxError: missing ] after element list SyntaxError: missing } after function body SyntaxError: missing } after property list SyntaxError: missing = in const declaration SyntaxError: missing formal parameter SyntaxError: missing name after . operator SyntaxError: missing variable name SyntaxError: negated character class with strings in regular expression SyntaxError: new keyword cannot be used with an optional chain SyntaxError: nothing to repeat SyntaxError: numbers out of order in {} quantifier. SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code SyntaxError: parameter after rest parameter SyntaxError: private fields can't be deleted SyntaxError: property name __proto__ appears more than once in object literal SyntaxError: raw bracket is not allowed in regular expression with unicode flag SyntaxError: redeclaration of formal parameter "x" SyntaxError: reference to undeclared private field or method #x SyntaxError: rest parameter may not have a default SyntaxError: return not in function SyntaxError: setter functions must have one argument SyntaxError: string literal contains an unescaped line break SyntaxError: super() is only valid in derived class constructors SyntaxError: tagged template cannot be used with optional chain SyntaxError: Unexpected '#' used outside of class body SyntaxError: Unexpected token SyntaxError: unlabeled break must be inside loop or switch SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**' SyntaxError: use of super property/member accesses only valid within methods or eval code within methods SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed TypeError: 'x' is not iterable TypeError: "x" is (not) "y" TypeError: "x" is not a constructor TypeError: "x" is not a function TypeError: "x" is not a non-null object TypeError: "x" is read-only TypeError: already executing generator TypeError: BigInt value can't be serialized in JSON TypeError: calling a builtin X constructor without new is forbidden TypeError: can't access/set private field or method: object is not the right class TypeError: can't assign to property "x" on "y": not an object TypeError: can't convert BigInt to number TypeError: can't convert x to BigInt TypeError: can't define property "x": "obj" is not extensible TypeError: can't delete non-configurable array element TypeError: can't redefine non-configurable property "x" TypeError: can't set prototype of this object TypeError: can't set prototype: it would cause a prototype chain cycle TypeError: cannot use 'in' operator to search for 'x' in 'y' TypeError: class constructors must be invoked with 'new' TypeError: cyclic object value TypeError: derived class constructor returned invalid value x TypeError: getting private setter-only property TypeError: Initializing an object twice is an error with private fields/methods TypeError: invalid 'instanceof' operand 'x' TypeError: invalid Array.prototype.sort argument TypeError: invalid assignment to const "x" TypeError: Iterator/AsyncIterator constructor can't be used directly TypeError: matchAll/replaceAll must be called with a global RegExp TypeError: More arguments needed TypeError: null/undefined has no properties TypeError: property "x" is non-configurable and can't be deleted TypeError: Reduce of empty array with no initial value TypeError: setting getter-only property "x" TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol TypeError: X.prototype.y called on incompatible type URIError: malformed URI sequence Warning: -file- is being assigned a //# sourceMappingURL, but already has one Warning: unreachable code after return statement Misc JavaScript technologies overview Execution model Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features Your blueprint for a better internet. MDN About Blog Mozilla careers Advertise with us MDN Plus Product help Contribute MDN Community Community resources Writing guidelines MDN Discord MDN on GitHub Developers Web technologies Learn web development Guides Tutorials Glossary Hacks blog Website Privacy Notice Telemetry Settings Legal Community Participation Guidelines Visit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation . Portions of this content are ©1998–⁨2025⁩ by individual mozilla.org contributors. Content available under a Creative Commons license .