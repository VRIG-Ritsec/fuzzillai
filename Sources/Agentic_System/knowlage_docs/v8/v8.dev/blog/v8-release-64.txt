V8 release v6.4 · V8 V8 Show navigation Home Blog Docs Tools JS/Wasm features Research V8 release v6.4 Published 19 December 2017 · Tagged with release Every six weeks, we create a new branch of V8 as part of our release process . Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, V8 version 6.4 , which is in beta until its release in coordination with Chrome 64 Stable in several weeks. V8 v6.4 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release. Speed # V8 v6.4 improves the performance of the instanceof operator by 3.6×. As a direct result, uglify-js is now 15–20% faster according to V8’s Web Tooling Benchmark . This release also addresses some performance cliffs in Function.prototype.bind . For example, TurboFan now consistently inlines all monomorphic calls to bind . In addition, TurboFan also supports the bound callback pattern , meaning that instead of the following: doSomething ( callback , someObj ) ; You can now use: doSomething ( callback . bind ( someObj ) ) ; This way, the code is more readable, and you still get the same performance. Thanks to Peter Wong ’s latest contributions, WeakMap and WeakSet are now implemented using the CodeStubAssembler , resulting in performance improvements of up to 5× across the board. As part of V8’s on-going effort to improve the performance of array built-ins, we improved Array.prototype.slice performance ~4× by reimplementing it using the CodeStubAssembler. Additionally, calls to Array.prototype.map and Array.prototype.filter are now inlined for many cases, giving them a performance profile competitive with hand-written versions. We worked to make out-of-bounds loads in arrays, typed arrays, and strings no longer incur a ~10× performance hit after noticing this coding pattern being used in the wild. Memory # V8’s built-in code objects and bytecode handlers are now deserialized lazily from the snapshot, which can significantly reduce memory consumed by each Isolate. Benchmarks in Chrome show savings of several hundred KB per tab when browsing common sites. Look out for a dedicated blog post on this subject early next year. ECMAScript language features # This V8 release includes support for two new exciting regular expression features. In regular expressions with the /u flag, Unicode property escapes are now enabled by default. const regexGreekSymbol = / \p{Script_Extensions=Greek} / u ; regexGreekSymbol . test ( 'π' ) ; // → true Support for named capture groups in regular expressions is now enabled by default. const pattern = / (?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2}) / u ; const result = pattern . exec ( '2017-12-15' ) ; // result.groups.year === '2017' // result.groups.month === '12' // result.groups.day === '15' More details about these features are available in our blog post titled Upcoming regular expression features . Thanks to Groupon , V8 now implements import.meta , which enables embedders to expose host-specific metadata about the current module. For example, Chrome 64 exposes the module URL via import.meta.url , and Chrome plans to add more properties to import.meta in the future. To assist with local-aware formatting of strings produced by internationalization formatters, developers can now use Intl.NumberFormat.prototype.formatToParts() to format a number to a list of tokens and their type. Thanks to Igalia for implementing this in V8! V8 API # Please use git log branch-heads/6.3..branch-heads/6.4 include/v8.h to get a list of the API changes. Developers with an active V8 checkout can use git checkout -b 6.4 -t branch-heads/6.4 to experiment with the new features in V8 v6.4. Alternatively you can subscribe to Chrome’s Beta channel and try the new features out yourself soon. Posted by the V8 team. Retweet this article! Branding Terms Privacy Twitter Edit this page on GitHub Except as otherwise noted, any code samples from the V8 project are licensed under V8’s BSD-style license . Other content on this page is licensed under the Creative Commons Attribution 3.0 License . For details, see our site policies .