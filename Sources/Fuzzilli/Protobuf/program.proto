// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is autogenerated. Please check the README.

syntax = "proto3";
package fuzzilli.protobuf;

import "operations.proto";

message Instruction {
    // The operation is either encoded as an index, referring to the nth operation
    // (so that shared operations are also only present once in the protobuf), or
    // as one of the many concrete Operation messages.
    repeated uint32 inouts = 1;
    oneof operation {
        uint32 opIdx = 2;
        Nop nop = 3;
        LoadInteger loadInteger = 4;
        LoadBigInt loadBigInt = 5;
        LoadFloat loadFloat = 6;
        LoadString loadString = 7;
        LoadBoolean loadBoolean = 8;
        LoadUndefined loadUndefined = 9;
        LoadNull loadNull = 10;
        LoadThis loadThis = 11;
        LoadArguments loadArguments = 12;
        LoadRegExp loadRegExp = 13;
        BeginObjectLiteral beginObjectLiteral = 14;
        ObjectLiteralAddProperty objectLiteralAddProperty = 15;
        ObjectLiteralAddElement objectLiteralAddElement = 16;
        ObjectLiteralAddComputedProperty objectLiteralAddComputedProperty = 17;
        ObjectLiteralCopyProperties objectLiteralCopyProperties = 18;
        ObjectLiteralSetPrototype objectLiteralSetPrototype = 19;
        BeginObjectLiteralMethod beginObjectLiteralMethod = 20;
        EndObjectLiteralMethod endObjectLiteralMethod = 21;
        BeginObjectLiteralComputedMethod beginObjectLiteralComputedMethod = 22;
        EndObjectLiteralComputedMethod endObjectLiteralComputedMethod = 23;
        BeginObjectLiteralGetter beginObjectLiteralGetter = 24;
        EndObjectLiteralGetter endObjectLiteralGetter = 25;
        BeginObjectLiteralSetter beginObjectLiteralSetter = 26;
        EndObjectLiteralSetter endObjectLiteralSetter = 27;
        EndObjectLiteral endObjectLiteral = 28;
        BeginClassDefinition beginClassDefinition = 29;
        BeginClassConstructor beginClassConstructor = 30;
        EndClassConstructor endClassConstructor = 31;
        ClassAddInstanceProperty classAddInstanceProperty = 32;
        ClassAddInstanceElement classAddInstanceElement = 33;
        ClassAddInstanceComputedProperty classAddInstanceComputedProperty = 34;
        BeginClassInstanceMethod beginClassInstanceMethod = 35;
        EndClassInstanceMethod endClassInstanceMethod = 36;
        BeginClassInstanceGetter beginClassInstanceGetter = 37;
        EndClassInstanceGetter endClassInstanceGetter = 38;
        BeginClassInstanceSetter beginClassInstanceSetter = 39;
        EndClassInstanceSetter endClassInstanceSetter = 40;
        ClassAddStaticProperty classAddStaticProperty = 41;
        ClassAddStaticElement classAddStaticElement = 42;
        ClassAddStaticComputedProperty classAddStaticComputedProperty = 43;
        BeginClassStaticInitializer beginClassStaticInitializer = 44;
        EndClassStaticInitializer endClassStaticInitializer = 45;
        BeginClassStaticMethod beginClassStaticMethod = 46;
        EndClassStaticMethod endClassStaticMethod = 47;
        BeginClassStaticGetter beginClassStaticGetter = 48;
        EndClassStaticGetter endClassStaticGetter = 49;
        BeginClassStaticSetter beginClassStaticSetter = 50;
        EndClassStaticSetter endClassStaticSetter = 51;
        ClassAddPrivateInstanceProperty classAddPrivateInstanceProperty = 52;
        BeginClassPrivateInstanceMethod beginClassPrivateInstanceMethod = 53;
        EndClassPrivateInstanceMethod endClassPrivateInstanceMethod = 54;
        ClassAddPrivateStaticProperty classAddPrivateStaticProperty = 55;
        BeginClassPrivateStaticMethod beginClassPrivateStaticMethod = 56;
        EndClassPrivateStaticMethod endClassPrivateStaticMethod = 57;
        EndClassDefinition endClassDefinition = 58;
        CreateArray createArray = 59;
        CreateIntArray createIntArray = 60;
        CreateFloatArray createFloatArray = 61;
        CreateArrayWithSpread createArrayWithSpread = 62;
        CreateTemplateString createTemplateString = 63;
        LoadBuiltin loadBuiltin = 64;
        GetProperty getProperty = 65;
        SetProperty setProperty = 66;
        UpdateProperty updateProperty = 67;
        DeleteProperty deleteProperty = 68;
        ConfigureProperty configureProperty = 69;
        GetElement getElement = 70;
        SetElement setElement = 71;
        UpdateElement updateElement = 72;
        DeleteElement deleteElement = 73;
        ConfigureElement configureElement = 74;
        GetComputedProperty getComputedProperty = 75;
        SetComputedProperty setComputedProperty = 76;
        UpdateComputedProperty updateComputedProperty = 77;
        DeleteComputedProperty deleteComputedProperty = 78;
        ConfigureComputedProperty configureComputedProperty = 79;
        TypeOf typeOf = 80;
        TestInstanceOf testInstanceOf = 81;
        TestIn testIn = 82;
        BeginPlainFunction beginPlainFunction = 83;
        EndPlainFunction endPlainFunction = 84;
        BeginArrowFunction beginArrowFunction = 85;
        EndArrowFunction endArrowFunction = 86;
        BeginGeneratorFunction beginGeneratorFunction = 87;
        EndGeneratorFunction endGeneratorFunction = 88;
        BeginAsyncFunction beginAsyncFunction = 89;
        EndAsyncFunction endAsyncFunction = 90;
        BeginAsyncArrowFunction beginAsyncArrowFunction = 91;
        EndAsyncArrowFunction endAsyncArrowFunction = 92;
        BeginAsyncGeneratorFunction beginAsyncGeneratorFunction = 93;
        EndAsyncGeneratorFunction endAsyncGeneratorFunction = 94;
        BeginConstructor beginConstructor = 95;
        EndConstructor endConstructor = 96;
        Return return = 97;
        Yield yield = 98;
        YieldEach yieldEach = 99;
        Await await = 100;
        CallFunction callFunction = 101;
        CallFunctionWithSpread callFunctionWithSpread = 102;
        Construct construct = 103;
        ConstructWithSpread constructWithSpread = 104;
        CallMethod callMethod = 105;
        CallMethodWithSpread callMethodWithSpread = 106;
        CallComputedMethod callComputedMethod = 107;
        CallComputedMethodWithSpread callComputedMethodWithSpread = 108;
        UnaryOperation unaryOperation = 109;
        BinaryOperation binaryOperation = 110;
        TernaryOperation ternaryOperation = 111;
        Update update = 112;
        Dup dup = 113;
        Reassign reassign = 114;
        DestructArray destructArray = 115;
        DestructArrayAndReassign destructArrayAndReassign = 116;
        DestructObject destructObject = 117;
        DestructObjectAndReassign destructObjectAndReassign = 118;
        Compare compare = 119;
        LoadNamedVariable loadNamedVariable = 120;
        StoreNamedVariable storeNamedVariable = 121;
        DefineNamedVariable defineNamedVariable = 122;
        Eval eval = 123;
        BeginWith beginWith = 124;
        EndWith endWith = 125;
        CallSuperConstructor callSuperConstructor = 126;
        CallSuperMethod callSuperMethod = 127;
        GetPrivateProperty getPrivateProperty = 128;
        SetPrivateProperty setPrivateProperty = 129;
        UpdatePrivateProperty updatePrivateProperty = 130;
        CallPrivateMethod callPrivateMethod = 131;
        GetSuperProperty getSuperProperty = 132;
        SetSuperProperty setSuperProperty = 133;
        UpdateSuperProperty updateSuperProperty = 134;
        BeginIf beginIf = 135;
        BeginElse beginElse = 136;
        EndIf endIf = 137;
        BeginWhileLoopHeader beginWhileLoopHeader = 138;
        BeginWhileLoopBody beginWhileLoopBody = 139;
        EndWhileLoop endWhileLoop = 140;
        BeginDoWhileLoopBody beginDoWhileLoopBody = 141;
        BeginDoWhileLoopHeader beginDoWhileLoopHeader = 142;
        EndDoWhileLoop endDoWhileLoop = 143;
        BeginForLoopInitializer beginForLoopInitializer = 144;
        BeginForLoopCondition beginForLoopCondition = 145;
        BeginForLoopAfterthought beginForLoopAfterthought = 146;
        BeginForLoopBody beginForLoopBody = 147;
        EndForLoop endForLoop = 148;
        BeginForInLoop beginForInLoop = 149;
        EndForInLoop endForInLoop = 150;
        BeginForOfLoop beginForOfLoop = 151;
        BeginForOfLoopWithDestruct beginForOfLoopWithDestruct = 152;
        EndForOfLoop endForOfLoop = 153;
        BeginRepeatLoop beginRepeatLoop = 154;
        EndRepeatLoop endRepeatLoop = 155;
        LoopBreak loopBreak = 156;
        LoopContinue loopContinue = 157;
        BeginTry beginTry = 158;
        BeginCatch beginCatch = 159;
        BeginFinally beginFinally = 160;
        EndTryCatchFinally endTryCatchFinally = 161;
        ThrowException throwException = 162;
        BeginCodeString beginCodeString = 163;
        EndCodeString endCodeString = 164;
        BeginBlockStatement beginBlockStatement = 165;
        EndBlockStatement endBlockStatement = 166;
        BeginSwitch beginSwitch = 167;
        BeginSwitchCase beginSwitchCase = 168;
        BeginSwitchDefaultCase beginSwitchDefaultCase = 169;
        EndSwitchCase endSwitchCase = 170;
        EndSwitch endSwitch = 171;
        SwitchBreak switchBreak = 172;
        LoadNewTarget loadNewTarget = 173;
        Print print = 174;
        Explore explore = 175;
        Probe probe = 176;
        Fixup fixup = 177;
    }
}

message Program {
    bytes uuid = 1;
    repeated Instruction code = 2;
    map<sint32, string> comments = 3;
    Program parent = 4;
}
