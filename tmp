extension REPRL {
    fileprivate static func formatDate() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyMMddHHmmss"
        return formatter.string(from: Date())
    }

    /// append any lines containing "[Feedback slot ..." from the provided output to a log file.
    /// The log file will be placed at {storagePath}/logs/trace-feedback-updates-<timestamp>.log if storagePath is configured,
    /// otherwise ./logs/trace-feedback-updates-<timestamp>.log.
    fileprivate static func logTraceFeedbackUpdates(from output: String, fuzzer: Fuzzer) {
        let needle = "[Feedback slot"
        guard output.contains(needle) else { return }

        let storageBase = fuzzer.config.storagePath ?? FileManager.default.currentDirectoryPath
        let logsDir = storageBase + "/logs"

        do {
            try FileManager.default.createDirectory(atPath: logsDir, withIntermediateDirectories: true) // wont fail if directory already exists
        } catch {
            // if we can't create the directory, return silently.
            return
        }

        let date = formatDate()
        let logFile = logsDir + "/trace-feedback-updates-\(date).log"

        // filter and append lines to the file
        let lines = output.split(separator: "\n", omittingEmptySubsequences: false)
        var i = 0
        while i < lines.count {
            let line = String(lines[i])
            if line.contains(needle) {
                var feedbackUpdate = line
                var bracketCount = 0
                
                // Count opening brackets in the first line
                for char in line {
                    if char == "[" {
                        bracketCount += 1
                    } else if char == "]" {
                        bracketCount -= 1
                    }
                }
                
                // Keep reading lines until all brackets are closed
                i += 1
                while i < lines.count && bracketCount > 0 {
                    let nextLine = String(lines[i])
                    feedbackUpdate += "\n" + nextLine
                    
                    // Count brackets in this line
                    for char in nextLine {
                        if char == "[" {
                            bracketCount += 1
                        } else if char == "]" {
                            bracketCount -= 1
                        }
                    }
                    i += 1
                }
                
                matched.append(feedbackUpdate)
            } else {
                i += 1
            }
        }
        
        guard !matched.isEmpty else { return }

        let toWrite = matched.joined(separator: "\n\n") + "\n"
        if let data = toWrite.data(using: .utf8) {
            if FileManager.default.fileExists(atPath: logFile) {
                if let fh = FileHandle(forWritingAtPath: logFile) {
                    fh.seekToEndOfFile() // append to end of existing file
                    fh.write(data)
                    try? fh.close()
                }
            } else {
                _ = FileManager.default.createFile(atPath: logFile, contents: data)
            }
        }
    }
}

